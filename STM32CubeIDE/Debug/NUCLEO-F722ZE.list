
NUCLEO-F722ZE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000749c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0800767c  0800767c  0001767c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007944  08007944  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08007944  08007944  00017944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800794c  0800794c  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800794c  0800794c  0001794c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007950  08007950  00017950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08007954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b50  200000a0  080079f0  000200a0  2**3
                  ALLOC
 10 ._user_heap_stack 00018000  20000bf0  080079f0  00020bf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f8de  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e3c  00000000  00000000  0002f9ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc8  00000000  00000000  00032830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a73  00000000  00000000  000335f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d8a  00000000  00000000  0003406b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001321b  00000000  00000000  00058df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1734  00000000  00000000  0006c010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e08  00000000  00000000  0014d744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  0015154c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000a0 	.word	0x200000a0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007664 	.word	0x08007664

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000a4 	.word	0x200000a4
 800021c:	08007664 	.word	0x08007664

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFF);
 80005c4:	1d39      	adds	r1, r7, #4
 80005c6:	23ff      	movs	r3, #255	; 0xff
 80005c8:	2201      	movs	r2, #1
 80005ca:	4804      	ldr	r0, [pc, #16]	; (80005dc <__io_putchar+0x20>)
 80005cc:	f002 fdaa 	bl	8003124 <HAL_UART_Transmit>

  return ch;
 80005d0:	687b      	ldr	r3, [r7, #4]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000a48 	.word	0x20000a48

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b08c      	sub	sp, #48	; 0x30
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  wiz_NetInfo net_info =
 80005e6:	4b6f      	ldr	r3, [pc, #444]	; (80007a4 <main+0x1c4>)
 80005e8:	463c      	mov	r4, r7
 80005ea:	461d      	mov	r5, r3
 80005ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005f4:	6020      	str	r0, [r4, #0]
 80005f6:	3404      	adds	r4, #4
 80005f8:	8021      	strh	r1, [r4, #0]
 80005fa:	3402      	adds	r4, #2
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f000 fd44 	bl	800108c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f8d6 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f000 fa3e 	bl	8000a88 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800060c:	f000 f990 	bl	8000930 <MX_USART3_UART_Init>
  MX_FMC_Init();
 8000610:	f000 f9be 	bl	8000990 <MX_FMC_Init>
  MX_ADC1_Init();
 8000614:	f000 f93a 	bl	800088c <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int hours, minutes;
	  hours = get_time_hour(&net_info);
 8000618:	463b      	mov	r3, r7
 800061a:	4618      	mov	r0, r3
 800061c:	f003 fb22 	bl	8003c64 <get_time_hour>
 8000620:	62b8      	str	r0, [r7, #40]	; 0x28
	  minutes = get_time_minutes(&net_info);
 8000622:	463b      	mov	r3, r7
 8000624:	4618      	mov	r0, r3
 8000626:	f003 fb63 	bl	8003cf0 <get_time_minutes>
 800062a:	6278      	str	r0, [r7, #36]	; 0x24
	  int target1 = 7;
 800062c:	2307      	movs	r3, #7
 800062e:	623b      	str	r3, [r7, #32]
	  int target2 = 17;
 8000630:	2311      	movs	r3, #17
 8000632:	61fb      	str	r3, [r7, #28]
	  int water_flag = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	62fb      	str	r3, [r7, #44]	; 0x2c

	  HAL_ADC_Start(&hadc1);
 8000638:	485b      	ldr	r0, [pc, #364]	; (80007a8 <main+0x1c8>)
 800063a:	f000 fded 	bl	8001218 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800063e:	f04f 31ff 	mov.w	r1, #4294967295
 8000642:	4859      	ldr	r0, [pc, #356]	; (80007a8 <main+0x1c8>)
 8000644:	f000 feea 	bl	800141c <HAL_ADC_PollForConversion>
	  uint16_t adcValue = HAL_ADC_GetValue(&hadc1);
 8000648:	4857      	ldr	r0, [pc, #348]	; (80007a8 <main+0x1c8>)
 800064a:	f000 ff72 	bl	8001532 <HAL_ADC_GetValue>
 800064e:	4603      	mov	r3, r0
 8000650:	837b      	strh	r3, [r7, #26]
	  printf(" Current ADC : %d\n", adcValue);
 8000652:	8b7b      	ldrh	r3, [r7, #26]
 8000654:	4619      	mov	r1, r3
 8000656:	4855      	ldr	r0, [pc, #340]	; (80007ac <main+0x1cc>)
 8000658:	f006 f9e2 	bl	8006a20 <iprintf>
	  HAL_ADC_Stop(&hadc1);
 800065c:	4852      	ldr	r0, [pc, #328]	; (80007a8 <main+0x1c8>)
 800065e:	f000 fea9 	bl	80013b4 <HAL_ADC_Stop>

	  if (hours == target1 && minutes == 0 && water_flag == 0){
 8000662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000664:	6a3b      	ldr	r3, [r7, #32]
 8000666:	429a      	cmp	r2, r3
 8000668:	d143      	bne.n	80006f2 <main+0x112>
 800066a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066c:	2b00      	cmp	r3, #0
 800066e:	d140      	bne.n	80006f2 <main+0x112>
 8000670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000672:	2b00      	cmp	r3, #0
 8000674:	d13d      	bne.n	80006f2 <main+0x112>
		  if (adcValue > 3000){ // Arid Soil
 8000676:	8b7b      	ldrh	r3, [r7, #26]
 8000678:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800067c:	4293      	cmp	r3, r2
 800067e:	d90f      	bls.n	80006a0 <main+0xc0>
			  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET); //Active Low Relay
 8000680:	2200      	movs	r2, #0
 8000682:	2180      	movs	r1, #128	; 0x80
 8000684:	484a      	ldr	r0, [pc, #296]	; (80007b0 <main+0x1d0>)
 8000686:	f001 fc39 	bl	8001efc <HAL_GPIO_WritePin>
			  HAL_Delay(15000);
 800068a:	f643 2098 	movw	r0, #15000	; 0x3a98
 800068e:	f000 fd5b 	bl	8001148 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET); //Active Low Relay
 8000692:	2201      	movs	r2, #1
 8000694:	2180      	movs	r1, #128	; 0x80
 8000696:	4846      	ldr	r0, [pc, #280]	; (80007b0 <main+0x1d0>)
 8000698:	f001 fc30 	bl	8001efc <HAL_GPIO_WritePin>
			  water_flag = 1;
 800069c:	2301      	movs	r3, #1
 800069e:	62fb      	str	r3, [r7, #44]	; 0x2c
		  }

		  if (adcValue > 1900){ //Moist Soil
 80006a0:	8b7b      	ldrh	r3, [r7, #26]
 80006a2:	f240 726c 	movw	r2, #1900	; 0x76c
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d90f      	bls.n	80006ca <main+0xea>
			  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET); //Active Low Relay
 80006aa:	2200      	movs	r2, #0
 80006ac:	2180      	movs	r1, #128	; 0x80
 80006ae:	4840      	ldr	r0, [pc, #256]	; (80007b0 <main+0x1d0>)
 80006b0:	f001 fc24 	bl	8001efc <HAL_GPIO_WritePin>
			  HAL_Delay(7000);
 80006b4:	f641 3058 	movw	r0, #7000	; 0x1b58
 80006b8:	f000 fd46 	bl	8001148 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET); //Active Low Relay
 80006bc:	2201      	movs	r2, #1
 80006be:	2180      	movs	r1, #128	; 0x80
 80006c0:	483b      	ldr	r0, [pc, #236]	; (80007b0 <main+0x1d0>)
 80006c2:	f001 fc1b 	bl	8001efc <HAL_GPIO_WritePin>
			  water_flag = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	62fb      	str	r3, [r7, #44]	; 0x2c
		  }

		  if (adcValue > 1000){ // Wet Soil
 80006ca:	8b7b      	ldrh	r3, [r7, #26]
 80006cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006d0:	d90f      	bls.n	80006f2 <main+0x112>
			  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET); //Active Low Relay
 80006d2:	2200      	movs	r2, #0
 80006d4:	2180      	movs	r1, #128	; 0x80
 80006d6:	4836      	ldr	r0, [pc, #216]	; (80007b0 <main+0x1d0>)
 80006d8:	f001 fc10 	bl	8001efc <HAL_GPIO_WritePin>
			  HAL_Delay(3000);
 80006dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006e0:	f000 fd32 	bl	8001148 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET); //Active Low Relay
 80006e4:	2201      	movs	r2, #1
 80006e6:	2180      	movs	r1, #128	; 0x80
 80006e8:	4831      	ldr	r0, [pc, #196]	; (80007b0 <main+0x1d0>)
 80006ea:	f001 fc07 	bl	8001efc <HAL_GPIO_WritePin>
			  water_flag = 1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		  }
	  }
	  if ((target1 + 1) == hours){
 80006f2:	6a3b      	ldr	r3, [r7, #32]
 80006f4:	3301      	adds	r3, #1
 80006f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d101      	bne.n	8000700 <main+0x120>
		  water_flag = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	  }

	  if (hours == target2 && minutes == 0 && water_flag == 0){
 8000700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	429a      	cmp	r2, r3
 8000706:	d143      	bne.n	8000790 <main+0x1b0>
 8000708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070a:	2b00      	cmp	r3, #0
 800070c:	d140      	bne.n	8000790 <main+0x1b0>
 800070e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000710:	2b00      	cmp	r3, #0
 8000712:	d13d      	bne.n	8000790 <main+0x1b0>
		  if (adcValue > 3000){ // Arid Soil
 8000714:	8b7b      	ldrh	r3, [r7, #26]
 8000716:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800071a:	4293      	cmp	r3, r2
 800071c:	d90f      	bls.n	800073e <main+0x15e>
			  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET); //Active Low Relay
 800071e:	2200      	movs	r2, #0
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	4823      	ldr	r0, [pc, #140]	; (80007b0 <main+0x1d0>)
 8000724:	f001 fbea 	bl	8001efc <HAL_GPIO_WritePin>
			  HAL_Delay(15000);
 8000728:	f643 2098 	movw	r0, #15000	; 0x3a98
 800072c:	f000 fd0c 	bl	8001148 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET); //Active Low Relay
 8000730:	2201      	movs	r2, #1
 8000732:	2180      	movs	r1, #128	; 0x80
 8000734:	481e      	ldr	r0, [pc, #120]	; (80007b0 <main+0x1d0>)
 8000736:	f001 fbe1 	bl	8001efc <HAL_GPIO_WritePin>
			  water_flag = 1;
 800073a:	2301      	movs	r3, #1
 800073c:	62fb      	str	r3, [r7, #44]	; 0x2c
		  }

		  if (adcValue > 1900){ //Moist Soil
 800073e:	8b7b      	ldrh	r3, [r7, #26]
 8000740:	f240 726c 	movw	r2, #1900	; 0x76c
 8000744:	4293      	cmp	r3, r2
 8000746:	d90f      	bls.n	8000768 <main+0x188>
			  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET); //Active Low Relay
 8000748:	2200      	movs	r2, #0
 800074a:	2180      	movs	r1, #128	; 0x80
 800074c:	4818      	ldr	r0, [pc, #96]	; (80007b0 <main+0x1d0>)
 800074e:	f001 fbd5 	bl	8001efc <HAL_GPIO_WritePin>
			  HAL_Delay(7000);
 8000752:	f641 3058 	movw	r0, #7000	; 0x1b58
 8000756:	f000 fcf7 	bl	8001148 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET); //Active Low Relay
 800075a:	2201      	movs	r2, #1
 800075c:	2180      	movs	r1, #128	; 0x80
 800075e:	4814      	ldr	r0, [pc, #80]	; (80007b0 <main+0x1d0>)
 8000760:	f001 fbcc 	bl	8001efc <HAL_GPIO_WritePin>
			  water_flag = 1;
 8000764:	2301      	movs	r3, #1
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
		  }

		  if (adcValue > 1000){ // Wet Soil
 8000768:	8b7b      	ldrh	r3, [r7, #26]
 800076a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800076e:	d90f      	bls.n	8000790 <main+0x1b0>
			  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET); //Active Low Relay
 8000770:	2200      	movs	r2, #0
 8000772:	2180      	movs	r1, #128	; 0x80
 8000774:	480e      	ldr	r0, [pc, #56]	; (80007b0 <main+0x1d0>)
 8000776:	f001 fbc1 	bl	8001efc <HAL_GPIO_WritePin>
			  HAL_Delay(3000);
 800077a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800077e:	f000 fce3 	bl	8001148 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET); //Active Low Relay
 8000782:	2201      	movs	r2, #1
 8000784:	2180      	movs	r1, #128	; 0x80
 8000786:	480a      	ldr	r0, [pc, #40]	; (80007b0 <main+0x1d0>)
 8000788:	f001 fbb8 	bl	8001efc <HAL_GPIO_WritePin>
			  water_flag = 1;
 800078c:	2301      	movs	r3, #1
 800078e:	62fb      	str	r3, [r7, #44]	; 0x2c
		  }
	  }
	  if ((target2 + 1) == hours){
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	3301      	adds	r3, #1
 8000794:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000796:	429a      	cmp	r2, r3
 8000798:	f47f af3e 	bne.w	8000618 <main+0x38>
		  water_flag = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
  {
 80007a0:	e73a      	b.n	8000618 <main+0x38>
 80007a2:	bf00      	nop
 80007a4:	08007690 	.word	0x08007690
 80007a8:	20000b1c 	.word	0x20000b1c
 80007ac:	0800767c 	.word	0x0800767c
 80007b0:	40020400 	.word	0x40020400

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b094      	sub	sp, #80	; 0x50
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0320 	add.w	r3, r7, #32
 80007be:	2230      	movs	r2, #48	; 0x30
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f006 fa72 	bl	8006cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d8:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <SystemClock_Config+0xd0>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	4a29      	ldr	r2, [pc, #164]	; (8000884 <SystemClock_Config+0xd0>)
 80007de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e2:	6413      	str	r3, [r2, #64]	; 0x40
 80007e4:	4b27      	ldr	r3, [pc, #156]	; (8000884 <SystemClock_Config+0xd0>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f0:	4b25      	ldr	r3, [pc, #148]	; (8000888 <SystemClock_Config+0xd4>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a24      	ldr	r2, [pc, #144]	; (8000888 <SystemClock_Config+0xd4>)
 80007f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	4b22      	ldr	r3, [pc, #136]	; (8000888 <SystemClock_Config+0xd4>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000808:	2301      	movs	r3, #1
 800080a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800080c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000812:	2302      	movs	r3, #2
 8000814:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000816:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800081a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800081c:	2304      	movs	r3, #4
 800081e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000820:	23d8      	movs	r3, #216	; 0xd8
 8000822:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000824:	2302      	movs	r3, #2
 8000826:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000828:	2309      	movs	r3, #9
 800082a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082c:	f107 0320 	add.w	r3, r7, #32
 8000830:	4618      	mov	r0, r3
 8000832:	f001 fbcd 	bl	8001fd0 <HAL_RCC_OscConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800083c:	f000 f9ea 	bl	8000c14 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000840:	f001 fb76 	bl	8001f30 <HAL_PWREx_EnableOverDrive>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800084a:	f000 f9e3 	bl	8000c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	230f      	movs	r3, #15
 8000850:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000852:	2302      	movs	r3, #2
 8000854:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800085a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800085e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000864:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	2107      	movs	r1, #7
 800086c:	4618      	mov	r0, r3
 800086e:	f001 fe53 	bl	8002518 <HAL_RCC_ClockConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000878:	f000 f9cc 	bl	8000c14 <Error_Handler>
  }
}
 800087c:	bf00      	nop
 800087e:	3750      	adds	r7, #80	; 0x50
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40023800 	.word	0x40023800
 8000888:	40007000 	.word	0x40007000

0800088c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000892:	463b      	mov	r3, r7
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800089e:	4b21      	ldr	r3, [pc, #132]	; (8000924 <MX_ADC1_Init+0x98>)
 80008a0:	4a21      	ldr	r2, [pc, #132]	; (8000928 <MX_ADC1_Init+0x9c>)
 80008a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <MX_ADC1_Init+0x98>)
 80008a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008ac:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <MX_ADC1_Init+0x98>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <MX_ADC1_Init+0x98>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008b8:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_ADC1_Init+0x98>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008be:	4b19      	ldr	r3, [pc, #100]	; (8000924 <MX_ADC1_Init+0x98>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_ADC1_Init+0x98>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008cc:	4b15      	ldr	r3, [pc, #84]	; (8000924 <MX_ADC1_Init+0x98>)
 80008ce:	4a17      	ldr	r2, [pc, #92]	; (800092c <MX_ADC1_Init+0xa0>)
 80008d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_ADC1_Init+0x98>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_ADC1_Init+0x98>)
 80008da:	2201      	movs	r2, #1
 80008dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_ADC1_Init+0x98>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008e6:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_ADC1_Init+0x98>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008ec:	480d      	ldr	r0, [pc, #52]	; (8000924 <MX_ADC1_Init+0x98>)
 80008ee:	f000 fc4f 	bl	8001190 <HAL_ADC_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008f8:	f000 f98c 	bl	8000c14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008fc:	2303      	movs	r3, #3
 80008fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000900:	2301      	movs	r3, #1
 8000902:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000904:	2300      	movs	r3, #0
 8000906:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	4619      	mov	r1, r3
 800090c:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_ADC1_Init+0x98>)
 800090e:	f000 fe1d 	bl	800154c <HAL_ADC_ConfigChannel>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000918:	f000 f97c 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000b1c 	.word	0x20000b1c
 8000928:	40012000 	.word	0x40012000
 800092c:	0f000001 	.word	0x0f000001

08000930 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000934:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000936:	4a15      	ldr	r2, [pc, #84]	; (800098c <MX_USART3_UART_Init+0x5c>)
 8000938:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <MX_USART3_UART_Init+0x58>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_USART3_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <MX_USART3_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_USART3_UART_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000974:	f002 fb88 	bl	8003088 <HAL_UART_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800097e:	f000 f949 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000a48 	.word	0x20000a48
 800098c:	40004800 	.word	0x40004800

08000990 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
 80009a4:	615a      	str	r2, [r3, #20]
 80009a6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80009a8:	4b35      	ldr	r3, [pc, #212]	; (8000a80 <MX_FMC_Init+0xf0>)
 80009aa:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80009ae:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80009b0:	4b33      	ldr	r3, [pc, #204]	; (8000a80 <MX_FMC_Init+0xf0>)
 80009b2:	4a34      	ldr	r2, [pc, #208]	; (8000a84 <MX_FMC_Init+0xf4>)
 80009b4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80009b6:	4b32      	ldr	r3, [pc, #200]	; (8000a80 <MX_FMC_Init+0xf0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80009bc:	4b30      	ldr	r3, [pc, #192]	; (8000a80 <MX_FMC_Init+0xf0>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80009c2:	4b2f      	ldr	r3, [pc, #188]	; (8000a80 <MX_FMC_Init+0xf0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80009c8:	4b2d      	ldr	r3, [pc, #180]	; (8000a80 <MX_FMC_Init+0xf0>)
 80009ca:	2210      	movs	r2, #16
 80009cc:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80009ce:	4b2c      	ldr	r3, [pc, #176]	; (8000a80 <MX_FMC_Init+0xf0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80009d4:	4b2a      	ldr	r3, [pc, #168]	; (8000a80 <MX_FMC_Init+0xf0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80009da:	4b29      	ldr	r3, [pc, #164]	; (8000a80 <MX_FMC_Init+0xf0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80009e0:	4b27      	ldr	r3, [pc, #156]	; (8000a80 <MX_FMC_Init+0xf0>)
 80009e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009e6:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80009e8:	4b25      	ldr	r3, [pc, #148]	; (8000a80 <MX_FMC_Init+0xf0>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80009ee:	4b24      	ldr	r3, [pc, #144]	; (8000a80 <MX_FMC_Init+0xf0>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80009f4:	4b22      	ldr	r3, [pc, #136]	; (8000a80 <MX_FMC_Init+0xf0>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <MX_FMC_Init+0xf0>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000a00:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <MX_FMC_Init+0xf0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000a06:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <MX_FMC_Init+0xf0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <MX_FMC_Init+0xf0>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000a12:	230f      	movs	r3, #15
 8000a14:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000a16:	230f      	movs	r3, #15
 8000a18:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000a1a:	23ff      	movs	r3, #255	; 0xff
 8000a1c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000a1e:	230f      	movs	r3, #15
 8000a20:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000a22:	2310      	movs	r3, #16
 8000a24:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000a26:	2311      	movs	r3, #17
 8000a28:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2200      	movs	r2, #0
 8000a32:	4619      	mov	r1, r3
 8000a34:	4812      	ldr	r0, [pc, #72]	; (8000a80 <MX_FMC_Init+0xf0>)
 8000a36:	f002 fadf 	bl	8002ff8 <HAL_SRAM_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 8000a40:	f000 f8e8 	bl	8000c14 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  // overwrite
  Timing.AddressSetupTime = 1;
 8000a44:	2301      	movs	r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 1;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 7;
 8000a4c:	2307      	movs	r3, #7
 8000a4e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 2;
 8000a54:	2302      	movs	r3, #2
 8000a56:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	2200      	movs	r2, #0
 8000a64:	4619      	mov	r1, r3
 8000a66:	4806      	ldr	r0, [pc, #24]	; (8000a80 <MX_FMC_Init+0xf0>)
 8000a68:	f002 fac6 	bl	8002ff8 <HAL_SRAM_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_FMC_Init+0xe6>
  {
    Error_Handler();
 8000a72:	f000 f8cf 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE END FMC_Init 2 */
}
 8000a76:	bf00      	nop
 8000a78:	3720      	adds	r7, #32
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000ad0 	.word	0x20000ad0
 8000a84:	a0000104 	.word	0xa0000104

08000a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08c      	sub	sp, #48	; 0x30
 8000a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a9e:	4b58      	ldr	r3, [pc, #352]	; (8000c00 <MX_GPIO_Init+0x178>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a57      	ldr	r2, [pc, #348]	; (8000c00 <MX_GPIO_Init+0x178>)
 8000aa4:	f043 0310 	orr.w	r3, r3, #16
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b55      	ldr	r3, [pc, #340]	; (8000c00 <MX_GPIO_Init+0x178>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0310 	and.w	r3, r3, #16
 8000ab2:	61bb      	str	r3, [r7, #24]
 8000ab4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	4b52      	ldr	r3, [pc, #328]	; (8000c00 <MX_GPIO_Init+0x178>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a51      	ldr	r2, [pc, #324]	; (8000c00 <MX_GPIO_Init+0x178>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b4f      	ldr	r3, [pc, #316]	; (8000c00 <MX_GPIO_Init+0x178>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ace:	4b4c      	ldr	r3, [pc, #304]	; (8000c00 <MX_GPIO_Init+0x178>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a4b      	ldr	r2, [pc, #300]	; (8000c00 <MX_GPIO_Init+0x178>)
 8000ad4:	f043 0320 	orr.w	r3, r3, #32
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b49      	ldr	r3, [pc, #292]	; (8000c00 <MX_GPIO_Init+0x178>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0320 	and.w	r3, r3, #32
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae6:	4b46      	ldr	r3, [pc, #280]	; (8000c00 <MX_GPIO_Init+0x178>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a45      	ldr	r2, [pc, #276]	; (8000c00 <MX_GPIO_Init+0x178>)
 8000aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b43      	ldr	r3, [pc, #268]	; (8000c00 <MX_GPIO_Init+0x178>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	4b40      	ldr	r3, [pc, #256]	; (8000c00 <MX_GPIO_Init+0x178>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a3f      	ldr	r2, [pc, #252]	; (8000c00 <MX_GPIO_Init+0x178>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b3d      	ldr	r3, [pc, #244]	; (8000c00 <MX_GPIO_Init+0x178>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	4b3a      	ldr	r3, [pc, #232]	; (8000c00 <MX_GPIO_Init+0x178>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a39      	ldr	r2, [pc, #228]	; (8000c00 <MX_GPIO_Init+0x178>)
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b37      	ldr	r3, [pc, #220]	; (8000c00 <MX_GPIO_Init+0x178>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2e:	4b34      	ldr	r3, [pc, #208]	; (8000c00 <MX_GPIO_Init+0x178>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a33      	ldr	r2, [pc, #204]	; (8000c00 <MX_GPIO_Init+0x178>)
 8000b34:	f043 0308 	orr.w	r3, r3, #8
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b31      	ldr	r3, [pc, #196]	; (8000c00 <MX_GPIO_Init+0x178>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0308 	and.w	r3, r3, #8
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b4c:	482d      	ldr	r0, [pc, #180]	; (8000c04 <MX_GPIO_Init+0x17c>)
 8000b4e:	f001 f9d5 	bl	8001efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|LD1_Pin, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000b58:	482b      	ldr	r0, [pc, #172]	; (8000c08 <MX_GPIO_Init+0x180>)
 8000b5a:	f001 f9cf 	bl	8001efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5x00_RST_GPIO_Port, W5x00_RST_Pin, GPIO_PIN_SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b64:	4829      	ldr	r0, [pc, #164]	; (8000c0c <MX_GPIO_Init+0x184>)
 8000b66:	f001 f9c9 	bl	8001efc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : W5x00_BRDY0_Pin W5x00_BRDY1_Pin W5x00_BRDY2_Pin W5x00_BRDY3_Pin */
  GPIO_InitStruct.Pin = W5x00_BRDY0_Pin|W5x00_BRDY1_Pin|W5x00_BRDY2_Pin|W5x00_BRDY3_Pin;
 8000b6a:	233c      	movs	r3, #60	; 0x3c
 8000b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4824      	ldr	r0, [pc, #144]	; (8000c10 <MX_GPIO_Init+0x188>)
 8000b7e:	f001 f821 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1_Pin W5x00_INT_Pin */
  GPIO_InitStruct.Pin = PB1_Pin|W5x00_INT_Pin;
 8000b82:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	481d      	ldr	r0, [pc, #116]	; (8000c0c <MX_GPIO_Init+0x184>)
 8000b98:	f001 f814 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4813      	ldr	r0, [pc, #76]	; (8000c04 <MX_GPIO_Init+0x17c>)
 8000bb6:	f001 f805 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 LD1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|LD1_Pin;
 8000bba:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480d      	ldr	r0, [pc, #52]	; (8000c08 <MX_GPIO_Init+0x180>)
 8000bd4:	f000 fff6 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5x00_RST_Pin */
  GPIO_InitStruct.Pin = W5x00_RST_Pin;
 8000bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(W5x00_RST_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4806      	ldr	r0, [pc, #24]	; (8000c0c <MX_GPIO_Init+0x184>)
 8000bf2:	f000 ffe7 	bl	8001bc4 <HAL_GPIO_Init>

}
 8000bf6:	bf00      	nop
 8000bf8:	3730      	adds	r7, #48	; 0x30
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40021400 	.word	0x40021400
 8000c08:	40020400 	.word	0x40020400
 8000c0c:	40020800 	.word	0x40020800
 8000c10:	40021000 	.word	0x40021000

08000c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <Error_Handler+0x8>
	...

08000c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <HAL_MspInit+0x44>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <HAL_MspInit+0x44>)
 8000c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c30:	6413      	str	r3, [r2, #64]	; 0x40
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <HAL_MspInit+0x44>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <HAL_MspInit+0x44>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	4a08      	ldr	r2, [pc, #32]	; (8000c64 <HAL_MspInit+0x44>)
 8000c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c48:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_MspInit+0x44>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40023800 	.word	0x40023800

08000c68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	; 0x28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a15      	ldr	r2, [pc, #84]	; (8000cdc <HAL_ADC_MspInit+0x74>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d123      	bne.n	8000cd2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_ADC_MspInit+0x78>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <HAL_ADC_MspInit+0x78>)
 8000c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c94:	6453      	str	r3, [r2, #68]	; 0x44
 8000c96:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_ADC_MspInit+0x78>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_ADC_MspInit+0x78>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <HAL_ADC_MspInit+0x78>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <HAL_ADC_MspInit+0x78>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cba:	2308      	movs	r3, #8
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <HAL_ADC_MspInit+0x7c>)
 8000cce:	f000 ff79 	bl	8001bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	3728      	adds	r7, #40	; 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40012000 	.word	0x40012000
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020000 	.word	0x40020000

08000ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b0aa      	sub	sp, #168	; 0xa8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2280      	movs	r2, #128	; 0x80
 8000d06:	2100      	movs	r1, #0
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f005 ffcf 	bl	8006cac <memset>
  if(huart->Instance==USART3)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a22      	ldr	r2, [pc, #136]	; (8000d9c <HAL_UART_MspInit+0xb4>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d13c      	bne.n	8000d92 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d1c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4618      	mov	r0, r3
 8000d28:	f001 fe1c 	bl	8002964 <HAL_RCCEx_PeriphCLKConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d32:	f7ff ff6f 	bl	8000c14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d36:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <HAL_UART_MspInit+0xb8>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	4a19      	ldr	r2, [pc, #100]	; (8000da0 <HAL_UART_MspInit+0xb8>)
 8000d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d40:	6413      	str	r3, [r2, #64]	; 0x40
 8000d42:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <HAL_UART_MspInit+0xb8>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4e:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <HAL_UART_MspInit+0xb8>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a13      	ldr	r2, [pc, #76]	; (8000da0 <HAL_UART_MspInit+0xb8>)
 8000d54:	f043 0304 	orr.w	r3, r3, #4
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <HAL_UART_MspInit+0xb8>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0304 	and.w	r3, r3, #4
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d66:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d80:	2307      	movs	r3, #7
 8000d82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d86:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	; (8000da4 <HAL_UART_MspInit+0xbc>)
 8000d8e:	f000 ff19 	bl	8001bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d92:	bf00      	nop
 8000d94:	37a8      	adds	r7, #168	; 0xa8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40004800 	.word	0x40004800
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020800 	.word	0x40020800

08000da8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000dbc:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <HAL_FMC_MspInit+0xa4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d13f      	bne.n	8000e44 <HAL_FMC_MspInit+0x9c>
    return;
  }
  FMC_Initialized = 1;
 8000dc4:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <HAL_FMC_MspInit+0xa4>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000dca:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <HAL_FMC_MspInit+0xa8>)
 8000dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dce:	4a20      	ldr	r2, [pc, #128]	; (8000e50 <HAL_FMC_MspInit+0xa8>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6393      	str	r3, [r2, #56]	; 0x38
 8000dd6:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <HAL_FMC_MspInit+0xa8>)
 8000dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000de2:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000de6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df0:	2303      	movs	r3, #3
 8000df2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000df4:	230c      	movs	r3, #12
 8000df6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4815      	ldr	r0, [pc, #84]	; (8000e54 <HAL_FMC_MspInit+0xac>)
 8000dfe:	f000 fee1 	bl	8001bc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000e02:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000e06:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e14:	230c      	movs	r3, #12
 8000e16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	480e      	ldr	r0, [pc, #56]	; (8000e58 <HAL_FMC_MspInit+0xb0>)
 8000e1e:	f000 fed1 	bl	8001bc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000e22:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000e26:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e34:	230c      	movs	r3, #12
 8000e36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4807      	ldr	r0, [pc, #28]	; (8000e5c <HAL_FMC_MspInit+0xb4>)
 8000e3e:	f000 fec1 	bl	8001bc4 <HAL_GPIO_Init>
 8000e42:	e000      	b.n	8000e46 <HAL_FMC_MspInit+0x9e>
    return;
 8000e44:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	200000bc 	.word	0x200000bc
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40021400 	.word	0x40021400
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40020c00 	.word	0x40020c00

08000e60 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000e68:	f7ff ff9e 	bl	8000da8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec0:	f000 f922 	bl	8001108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000ec4:	f000 fe77 	bl	8001bb6 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	e00a      	b.n	8000ef4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ede:	f3af 8000 	nop.w
 8000ee2:	4601      	mov	r1, r0
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	1c5a      	adds	r2, r3, #1
 8000ee8:	60ba      	str	r2, [r7, #8]
 8000eea:	b2ca      	uxtb	r2, r1
 8000eec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	dbf0      	blt.n	8000ede <_read+0x12>
  }

  return len;
 8000efc:	687b      	ldr	r3, [r7, #4]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	60f8      	str	r0, [r7, #12]
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	e009      	b.n	8000f2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	60ba      	str	r2, [r7, #8]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff fb4b 	bl	80005bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	697a      	ldr	r2, [r7, #20]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	dbf1      	blt.n	8000f18 <_write+0x12>
  }
  return len;
 8000f34:	687b      	ldr	r3, [r7, #4]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <_close>:

int _close(int file)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f66:	605a      	str	r2, [r3, #4]
  return 0;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <_isatty>:

int _isatty(int file)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb0:	4a14      	ldr	r2, [pc, #80]	; (8001004 <_sbrk+0x5c>)
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <_sbrk+0x60>)
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <_sbrk+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d102      	bne.n	8000fca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <_sbrk+0x64>)
 8000fc6:	4a12      	ldr	r2, [pc, #72]	; (8001010 <_sbrk+0x68>)
 8000fc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d207      	bcs.n	8000fe8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd8:	f005 fec6 	bl	8006d68 <__errno>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	220c      	movs	r2, #12
 8000fe0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe6:	e009      	b.n	8000ffc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <_sbrk+0x64>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a05      	ldr	r2, [pc, #20]	; (800100c <_sbrk+0x64>)
 8000ff8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20040000 	.word	0x20040000
 8001008:	00008000 	.word	0x00008000
 800100c:	200000c0 	.word	0x200000c0
 8001010:	20000bf0 	.word	0x20000bf0

08001014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800104c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001018:	480d      	ldr	r0, [pc, #52]	; (8001050 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800101a:	490e      	ldr	r1, [pc, #56]	; (8001054 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800101c:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a0b      	ldr	r2, [pc, #44]	; (800105c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001030:	4c0b      	ldr	r4, [pc, #44]	; (8001060 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800103e:	f000 f813 	bl	8001068 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001042:	f005 fe97 	bl	8006d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001046:	f7ff facb 	bl	80005e0 <main>
  bx  lr    
 800104a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800104c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001054:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001058:	08007954 	.word	0x08007954
  ldr r2, =_sbss
 800105c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001060:	20000bf0 	.word	0x20000bf0

08001064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC_IRQHandler>
	...

08001068 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <SystemInit+0x20>)
 800106e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001072:	4a05      	ldr	r2, [pc, #20]	; (8001088 <SystemInit+0x20>)
 8001074:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001078:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001090:	2003      	movs	r0, #3
 8001092:	f000 fd5d 	bl	8001b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001096:	2000      	movs	r0, #0
 8001098:	f000 f806 	bl	80010a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800109c:	f7ff fdc0 	bl	8000c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_InitTick+0x54>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_InitTick+0x58>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010be:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 fd69 	bl	8001b9e <HAL_SYSTICK_Config>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00e      	b.n	80010f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	d80a      	bhi.n	80010f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010dc:	2200      	movs	r2, #0
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f000 fd3f 	bl	8001b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e8:	4a06      	ldr	r2, [pc, #24]	; (8001104 <HAL_InitTick+0x5c>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e000      	b.n	80010f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000000 	.word	0x20000000
 8001100:	20000008 	.word	0x20000008
 8001104:	20000004 	.word	0x20000004

08001108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_IncTick+0x20>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_IncTick+0x24>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <HAL_IncTick+0x24>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008
 800112c:	20000b64 	.word	0x20000b64

08001130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <HAL_GetTick+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000b64 	.word	0x20000b64

08001148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff ffee 	bl	8001130 <HAL_GetTick>
 8001154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001160:	d005      	beq.n	800116e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_Delay+0x44>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4413      	add	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800116e:	bf00      	nop
 8001170:	f7ff ffde 	bl	8001130 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	429a      	cmp	r2, r3
 800117e:	d8f7      	bhi.n	8001170 <HAL_Delay+0x28>
  {
  }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008

08001190 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001198:	2300      	movs	r3, #0
 800119a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e031      	b.n	800120a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d109      	bne.n	80011c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff fd5a 	bl	8000c68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f003 0310 	and.w	r3, r3, #16
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d116      	bne.n	80011fc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <HAL_ADC_Init+0x84>)
 80011d4:	4013      	ands	r3, r2
 80011d6:	f043 0202 	orr.w	r2, r3, #2
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f000 fb0a 	bl	80017f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f023 0303 	bic.w	r3, r3, #3
 80011f2:	f043 0201 	orr.w	r2, r3, #1
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	641a      	str	r2, [r3, #64]	; 0x40
 80011fa:	e001      	b.n	8001200 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001208:	7bfb      	ldrb	r3, [r7, #15]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	ffffeefd 	.word	0xffffeefd

08001218 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800122a:	2b01      	cmp	r3, #1
 800122c:	d101      	bne.n	8001232 <HAL_ADC_Start+0x1a>
 800122e:	2302      	movs	r3, #2
 8001230:	e0ad      	b.n	800138e <HAL_ADC_Start+0x176>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2201      	movs	r2, #1
 8001236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b01      	cmp	r3, #1
 8001246:	d018      	beq.n	800127a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0201 	orr.w	r2, r2, #1
 8001256:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001258:	4b50      	ldr	r3, [pc, #320]	; (800139c <HAL_ADC_Start+0x184>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a50      	ldr	r2, [pc, #320]	; (80013a0 <HAL_ADC_Start+0x188>)
 800125e:	fba2 2303 	umull	r2, r3, r2, r3
 8001262:	0c9a      	lsrs	r2, r3, #18
 8001264:	4613      	mov	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4413      	add	r3, r2
 800126a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800126c:	e002      	b.n	8001274 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	3b01      	subs	r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1f9      	bne.n	800126e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b01      	cmp	r3, #1
 8001286:	d175      	bne.n	8001374 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800128c:	4b45      	ldr	r3, [pc, #276]	; (80013a4 <HAL_ADC_Start+0x18c>)
 800128e:	4013      	ands	r3, r2
 8001290:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d007      	beq.n	80012b6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012c2:	d106      	bne.n	80012d2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c8:	f023 0206 	bic.w	r2, r3, #6
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	645a      	str	r2, [r3, #68]	; 0x44
 80012d0:	e002      	b.n	80012d8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80012e8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80012ea:	4b2f      	ldr	r3, [pc, #188]	; (80013a8 <HAL_ADC_Start+0x190>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 031f 	and.w	r3, r3, #31
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d10f      	bne.n	8001316 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d143      	bne.n	800138c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	e03a      	b.n	800138c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a24      	ldr	r2, [pc, #144]	; (80013ac <HAL_ADC_Start+0x194>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d10e      	bne.n	800133e <HAL_ADC_Start+0x126>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d107      	bne.n	800133e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800133c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800133e:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <HAL_ADC_Start+0x190>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f003 0310 	and.w	r3, r3, #16
 8001346:	2b00      	cmp	r3, #0
 8001348:	d120      	bne.n	800138c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a18      	ldr	r2, [pc, #96]	; (80013b0 <HAL_ADC_Start+0x198>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d11b      	bne.n	800138c <HAL_ADC_Start+0x174>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d114      	bne.n	800138c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	e00b      	b.n	800138c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	f043 0210 	orr.w	r2, r3, #16
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001384:	f043 0201 	orr.w	r2, r3, #1
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000000 	.word	0x20000000
 80013a0:	431bde83 	.word	0x431bde83
 80013a4:	fffff8fe 	.word	0xfffff8fe
 80013a8:	40012300 	.word	0x40012300
 80013ac:	40012000 	.word	0x40012000
 80013b0:	40012200 	.word	0x40012200

080013b4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d101      	bne.n	80013ca <HAL_ADC_Stop+0x16>
 80013c6:	2302      	movs	r3, #2
 80013c8:	e01f      	b.n	800140a <HAL_ADC_Stop+0x56>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2201      	movs	r2, #1
 80013ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 0201 	bic.w	r2, r2, #1
 80013e0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d107      	bne.n	8001400 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HAL_ADC_Stop+0x64>)
 80013f6:	4013      	ands	r3, r2
 80013f8:	f043 0201 	orr.w	r2, r3, #1
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	ffffeefe 	.word	0xffffeefe

0800141c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001438:	d113      	bne.n	8001462 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001448:	d10b      	bne.n	8001462 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f043 0220 	orr.w	r2, r3, #32
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e063      	b.n	800152a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001462:	f7ff fe65 	bl	8001130 <HAL_GetTick>
 8001466:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001468:	e021      	b.n	80014ae <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001470:	d01d      	beq.n	80014ae <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d007      	beq.n	8001488 <HAL_ADC_PollForConversion+0x6c>
 8001478:	f7ff fe5a 	bl	8001130 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	429a      	cmp	r2, r3
 8001486:	d212      	bcs.n	80014ae <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b02      	cmp	r3, #2
 8001494:	d00b      	beq.n	80014ae <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f043 0204 	orr.w	r2, r3, #4
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e03d      	b.n	800152a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d1d6      	bne.n	800146a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f06f 0212 	mvn.w	r2, #18
 80014c4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d123      	bne.n	8001528 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d11f      	bne.n	8001528 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d006      	beq.n	8001504 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001500:	2b00      	cmp	r3, #0
 8001502:	d111      	bne.n	8001528 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d105      	bne.n	8001528 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	f043 0201 	orr.w	r2, r3, #1
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001560:	2b01      	cmp	r3, #1
 8001562:	d101      	bne.n	8001568 <HAL_ADC_ConfigChannel+0x1c>
 8001564:	2302      	movs	r3, #2
 8001566:	e136      	b.n	80017d6 <HAL_ADC_ConfigChannel+0x28a>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b09      	cmp	r3, #9
 8001576:	d93a      	bls.n	80015ee <HAL_ADC_ConfigChannel+0xa2>
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001580:	d035      	beq.n	80015ee <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68d9      	ldr	r1, [r3, #12]
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	b29b      	uxth	r3, r3
 800158e:	461a      	mov	r2, r3
 8001590:	4613      	mov	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	4413      	add	r3, r2
 8001596:	3b1e      	subs	r3, #30
 8001598:	2207      	movs	r2, #7
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43da      	mvns	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	400a      	ands	r2, r1
 80015a6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a8d      	ldr	r2, [pc, #564]	; (80017e4 <HAL_ADC_ConfigChannel+0x298>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d10a      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68d9      	ldr	r1, [r3, #12]
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	061a      	lsls	r2, r3, #24
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015c6:	e035      	b.n	8001634 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68d9      	ldr	r1, [r3, #12]
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	4618      	mov	r0, r3
 80015da:	4603      	mov	r3, r0
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4403      	add	r3, r0
 80015e0:	3b1e      	subs	r3, #30
 80015e2:	409a      	lsls	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015ec:	e022      	b.n	8001634 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6919      	ldr	r1, [r3, #16]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	461a      	mov	r2, r3
 80015fc:	4613      	mov	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4413      	add	r3, r2
 8001602:	2207      	movs	r2, #7
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43da      	mvns	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	400a      	ands	r2, r1
 8001610:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6919      	ldr	r1, [r3, #16]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	b29b      	uxth	r3, r3
 8001622:	4618      	mov	r0, r3
 8001624:	4603      	mov	r3, r0
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4403      	add	r3, r0
 800162a:	409a      	lsls	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b06      	cmp	r3, #6
 800163a:	d824      	bhi.n	8001686 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	3b05      	subs	r3, #5
 800164e:	221f      	movs	r2, #31
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43da      	mvns	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	400a      	ands	r2, r1
 800165c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	b29b      	uxth	r3, r3
 800166a:	4618      	mov	r0, r3
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	3b05      	subs	r3, #5
 8001678:	fa00 f203 	lsl.w	r2, r0, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	635a      	str	r2, [r3, #52]	; 0x34
 8001684:	e04c      	b.n	8001720 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b0c      	cmp	r3, #12
 800168c:	d824      	bhi.n	80016d8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	3b23      	subs	r3, #35	; 0x23
 80016a0:	221f      	movs	r2, #31
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43da      	mvns	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	400a      	ands	r2, r1
 80016ae:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	4618      	mov	r0, r3
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	3b23      	subs	r3, #35	; 0x23
 80016ca:	fa00 f203 	lsl.w	r2, r0, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	631a      	str	r2, [r3, #48]	; 0x30
 80016d6:	e023      	b.n	8001720 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	3b41      	subs	r3, #65	; 0x41
 80016ea:	221f      	movs	r2, #31
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43da      	mvns	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	400a      	ands	r2, r1
 80016f8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	b29b      	uxth	r3, r3
 8001706:	4618      	mov	r0, r3
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	4613      	mov	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	3b41      	subs	r3, #65	; 0x41
 8001714:	fa00 f203 	lsl.w	r2, r0, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a30      	ldr	r2, [pc, #192]	; (80017e8 <HAL_ADC_ConfigChannel+0x29c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d10a      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x1f4>
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001732:	d105      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001734:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <HAL_ADC_ConfigChannel+0x2a0>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	4a2c      	ldr	r2, [pc, #176]	; (80017ec <HAL_ADC_ConfigChannel+0x2a0>)
 800173a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800173e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a28      	ldr	r2, [pc, #160]	; (80017e8 <HAL_ADC_ConfigChannel+0x29c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d10f      	bne.n	800176a <HAL_ADC_ConfigChannel+0x21e>
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2b12      	cmp	r3, #18
 8001750:	d10b      	bne.n	800176a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001752:	4b26      	ldr	r3, [pc, #152]	; (80017ec <HAL_ADC_ConfigChannel+0x2a0>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	4a25      	ldr	r2, [pc, #148]	; (80017ec <HAL_ADC_ConfigChannel+0x2a0>)
 8001758:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800175c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800175e:	4b23      	ldr	r3, [pc, #140]	; (80017ec <HAL_ADC_ConfigChannel+0x2a0>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4a22      	ldr	r2, [pc, #136]	; (80017ec <HAL_ADC_ConfigChannel+0x2a0>)
 8001764:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001768:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a1e      	ldr	r2, [pc, #120]	; (80017e8 <HAL_ADC_ConfigChannel+0x29c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d12b      	bne.n	80017cc <HAL_ADC_ConfigChannel+0x280>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a1a      	ldr	r2, [pc, #104]	; (80017e4 <HAL_ADC_ConfigChannel+0x298>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d003      	beq.n	8001786 <HAL_ADC_ConfigChannel+0x23a>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b11      	cmp	r3, #17
 8001784:	d122      	bne.n	80017cc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001786:	4b19      	ldr	r3, [pc, #100]	; (80017ec <HAL_ADC_ConfigChannel+0x2a0>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	4a18      	ldr	r2, [pc, #96]	; (80017ec <HAL_ADC_ConfigChannel+0x2a0>)
 800178c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001790:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001792:	4b16      	ldr	r3, [pc, #88]	; (80017ec <HAL_ADC_ConfigChannel+0x2a0>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	4a15      	ldr	r2, [pc, #84]	; (80017ec <HAL_ADC_ConfigChannel+0x2a0>)
 8001798:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800179c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a10      	ldr	r2, [pc, #64]	; (80017e4 <HAL_ADC_ConfigChannel+0x298>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d111      	bne.n	80017cc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80017a8:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <HAL_ADC_ConfigChannel+0x2a4>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a11      	ldr	r2, [pc, #68]	; (80017f4 <HAL_ADC_ConfigChannel+0x2a8>)
 80017ae:	fba2 2303 	umull	r2, r3, r2, r3
 80017b2:	0c9a      	lsrs	r2, r3, #18
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80017be:	e002      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1f9      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	10000012 	.word	0x10000012
 80017e8:	40012000 	.word	0x40012000
 80017ec:	40012300 	.word	0x40012300
 80017f0:	20000000 	.word	0x20000000
 80017f4:	431bde83 	.word	0x431bde83

080017f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001800:	4b78      	ldr	r3, [pc, #480]	; (80019e4 <ADC_Init+0x1ec>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	4a77      	ldr	r2, [pc, #476]	; (80019e4 <ADC_Init+0x1ec>)
 8001806:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800180a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800180c:	4b75      	ldr	r3, [pc, #468]	; (80019e4 <ADC_Init+0x1ec>)
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4973      	ldr	r1, [pc, #460]	; (80019e4 <ADC_Init+0x1ec>)
 8001816:	4313      	orrs	r3, r2
 8001818:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001828:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6859      	ldr	r1, [r3, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	021a      	lsls	r2, r3, #8
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800184c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6859      	ldr	r1, [r3, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800186e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6899      	ldr	r1, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	430a      	orrs	r2, r1
 8001880:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001886:	4a58      	ldr	r2, [pc, #352]	; (80019e8 <ADC_Init+0x1f0>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d022      	beq.n	80018d2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800189a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6899      	ldr	r1, [r3, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6899      	ldr	r1, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	e00f      	b.n	80018f2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 0202 	bic.w	r2, r2, #2
 8001900:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6899      	ldr	r1, [r3, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	005a      	lsls	r2, r3, #1
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3020 	ldrb.w	r3, [r3, #32]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d01b      	beq.n	8001958 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800192e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800193e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6859      	ldr	r1, [r3, #4]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	3b01      	subs	r3, #1
 800194c:	035a      	lsls	r2, r3, #13
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	e007      	b.n	8001968 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001966:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001976:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	3b01      	subs	r3, #1
 8001984:	051a      	lsls	r2, r3, #20
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800199c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6899      	ldr	r1, [r3, #8]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019aa:	025a      	lsls	r2, r3, #9
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6899      	ldr	r1, [r3, #8]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	029a      	lsls	r2, r3, #10
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	609a      	str	r2, [r3, #8]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	40012300 	.word	0x40012300
 80019e8:	0f000001 	.word	0x0f000001

080019ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <__NVIC_SetPriorityGrouping+0x40>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a08:	4013      	ands	r3, r2
 8001a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <__NVIC_SetPriorityGrouping+0x44>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a1a:	4a04      	ldr	r2, [pc, #16]	; (8001a2c <__NVIC_SetPriorityGrouping+0x40>)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	60d3      	str	r3, [r2, #12]
}
 8001a20:	bf00      	nop
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000ed00 	.word	0xe000ed00
 8001a30:	05fa0000 	.word	0x05fa0000

08001a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a38:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <__NVIC_GetPriorityGrouping+0x18>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	0a1b      	lsrs	r3, r3, #8
 8001a3e:	f003 0307 	and.w	r3, r3, #7
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	6039      	str	r1, [r7, #0]
 8001a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	db0a      	blt.n	8001a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	490c      	ldr	r1, [pc, #48]	; (8001a9c <__NVIC_SetPriority+0x4c>)
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	0112      	lsls	r2, r2, #4
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	440b      	add	r3, r1
 8001a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a78:	e00a      	b.n	8001a90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	4908      	ldr	r1, [pc, #32]	; (8001aa0 <__NVIC_SetPriority+0x50>)
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	3b04      	subs	r3, #4
 8001a88:	0112      	lsls	r2, r2, #4
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	761a      	strb	r2, [r3, #24]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000e100 	.word	0xe000e100
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b089      	sub	sp, #36	; 0x24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f1c3 0307 	rsb	r3, r3, #7
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	bf28      	it	cs
 8001ac2:	2304      	movcs	r3, #4
 8001ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3304      	adds	r3, #4
 8001aca:	2b06      	cmp	r3, #6
 8001acc:	d902      	bls.n	8001ad4 <NVIC_EncodePriority+0x30>
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3b03      	subs	r3, #3
 8001ad2:	e000      	b.n	8001ad6 <NVIC_EncodePriority+0x32>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aec:	f04f 31ff 	mov.w	r1, #4294967295
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	fa01 f303 	lsl.w	r3, r1, r3
 8001af6:	43d9      	mvns	r1, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001afc:	4313      	orrs	r3, r2
         );
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3724      	adds	r7, #36	; 0x24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b1c:	d301      	bcc.n	8001b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e00f      	b.n	8001b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b22:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <SysTick_Config+0x40>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b2a:	210f      	movs	r1, #15
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b30:	f7ff ff8e 	bl	8001a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <SysTick_Config+0x40>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b3a:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <SysTick_Config+0x40>)
 8001b3c:	2207      	movs	r2, #7
 8001b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	e000e010 	.word	0xe000e010

08001b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff ff47 	bl	80019ec <__NVIC_SetPriorityGrouping>
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b086      	sub	sp, #24
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
 8001b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b78:	f7ff ff5c 	bl	8001a34 <__NVIC_GetPriorityGrouping>
 8001b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	6978      	ldr	r0, [r7, #20]
 8001b84:	f7ff ff8e 	bl	8001aa4 <NVIC_EncodePriority>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b8e:	4611      	mov	r1, r2
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff5d 	bl	8001a50 <__NVIC_SetPriority>
}
 8001b96:	bf00      	nop
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff ffb0 	bl	8001b0c <SysTick_Config>
 8001bac:	4603      	mov	r3, r0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001bba:	f004 fd81 	bl	80066c0 <HAL_SYSTICK_Callback>
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b089      	sub	sp, #36	; 0x24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	e169      	b.n	8001eb8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001be4:	2201      	movs	r2, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	f040 8158 	bne.w	8001eb2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d005      	beq.n	8001c1a <HAL_GPIO_Init+0x56>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d130      	bne.n	8001c7c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	2203      	movs	r2, #3
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c50:	2201      	movs	r2, #1
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	091b      	lsrs	r3, r3, #4
 8001c66:	f003 0201 	and.w	r2, r3, #1
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d017      	beq.n	8001cb8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d123      	bne.n	8001d0c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	08da      	lsrs	r2, r3, #3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3208      	adds	r2, #8
 8001ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	220f      	movs	r2, #15
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	08da      	lsrs	r2, r3, #3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3208      	adds	r2, #8
 8001d06:	69b9      	ldr	r1, [r7, #24]
 8001d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	2203      	movs	r2, #3
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0203 	and.w	r2, r3, #3
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 80b2 	beq.w	8001eb2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4e:	4b60      	ldr	r3, [pc, #384]	; (8001ed0 <HAL_GPIO_Init+0x30c>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d52:	4a5f      	ldr	r2, [pc, #380]	; (8001ed0 <HAL_GPIO_Init+0x30c>)
 8001d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d58:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5a:	4b5d      	ldr	r3, [pc, #372]	; (8001ed0 <HAL_GPIO_Init+0x30c>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d66:	4a5b      	ldr	r2, [pc, #364]	; (8001ed4 <HAL_GPIO_Init+0x310>)
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	089b      	lsrs	r3, r3, #2
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	220f      	movs	r2, #15
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a52      	ldr	r2, [pc, #328]	; (8001ed8 <HAL_GPIO_Init+0x314>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d02b      	beq.n	8001dea <HAL_GPIO_Init+0x226>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a51      	ldr	r2, [pc, #324]	; (8001edc <HAL_GPIO_Init+0x318>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d025      	beq.n	8001de6 <HAL_GPIO_Init+0x222>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a50      	ldr	r2, [pc, #320]	; (8001ee0 <HAL_GPIO_Init+0x31c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d01f      	beq.n	8001de2 <HAL_GPIO_Init+0x21e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4f      	ldr	r2, [pc, #316]	; (8001ee4 <HAL_GPIO_Init+0x320>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d019      	beq.n	8001dde <HAL_GPIO_Init+0x21a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4e      	ldr	r2, [pc, #312]	; (8001ee8 <HAL_GPIO_Init+0x324>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d013      	beq.n	8001dda <HAL_GPIO_Init+0x216>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4d      	ldr	r2, [pc, #308]	; (8001eec <HAL_GPIO_Init+0x328>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d00d      	beq.n	8001dd6 <HAL_GPIO_Init+0x212>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4c      	ldr	r2, [pc, #304]	; (8001ef0 <HAL_GPIO_Init+0x32c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d007      	beq.n	8001dd2 <HAL_GPIO_Init+0x20e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4b      	ldr	r2, [pc, #300]	; (8001ef4 <HAL_GPIO_Init+0x330>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d101      	bne.n	8001dce <HAL_GPIO_Init+0x20a>
 8001dca:	2307      	movs	r3, #7
 8001dcc:	e00e      	b.n	8001dec <HAL_GPIO_Init+0x228>
 8001dce:	2308      	movs	r3, #8
 8001dd0:	e00c      	b.n	8001dec <HAL_GPIO_Init+0x228>
 8001dd2:	2306      	movs	r3, #6
 8001dd4:	e00a      	b.n	8001dec <HAL_GPIO_Init+0x228>
 8001dd6:	2305      	movs	r3, #5
 8001dd8:	e008      	b.n	8001dec <HAL_GPIO_Init+0x228>
 8001dda:	2304      	movs	r3, #4
 8001ddc:	e006      	b.n	8001dec <HAL_GPIO_Init+0x228>
 8001dde:	2303      	movs	r3, #3
 8001de0:	e004      	b.n	8001dec <HAL_GPIO_Init+0x228>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e002      	b.n	8001dec <HAL_GPIO_Init+0x228>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <HAL_GPIO_Init+0x228>
 8001dea:	2300      	movs	r3, #0
 8001dec:	69fa      	ldr	r2, [r7, #28]
 8001dee:	f002 0203 	and.w	r2, r2, #3
 8001df2:	0092      	lsls	r2, r2, #2
 8001df4:	4093      	lsls	r3, r2
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001dfc:	4935      	ldr	r1, [pc, #212]	; (8001ed4 <HAL_GPIO_Init+0x310>)
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	089b      	lsrs	r3, r3, #2
 8001e02:	3302      	adds	r3, #2
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e0a:	4b3b      	ldr	r3, [pc, #236]	; (8001ef8 <HAL_GPIO_Init+0x334>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	43db      	mvns	r3, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e2e:	4a32      	ldr	r2, [pc, #200]	; (8001ef8 <HAL_GPIO_Init+0x334>)
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e34:	4b30      	ldr	r3, [pc, #192]	; (8001ef8 <HAL_GPIO_Init+0x334>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e58:	4a27      	ldr	r2, [pc, #156]	; (8001ef8 <HAL_GPIO_Init+0x334>)
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e5e:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <HAL_GPIO_Init+0x334>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	43db      	mvns	r3, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e82:	4a1d      	ldr	r2, [pc, #116]	; (8001ef8 <HAL_GPIO_Init+0x334>)
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <HAL_GPIO_Init+0x334>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eac:	4a12      	ldr	r2, [pc, #72]	; (8001ef8 <HAL_GPIO_Init+0x334>)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	61fb      	str	r3, [r7, #28]
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	2b0f      	cmp	r3, #15
 8001ebc:	f67f ae92 	bls.w	8001be4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	3724      	adds	r7, #36	; 0x24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40013800 	.word	0x40013800
 8001ed8:	40020000 	.word	0x40020000
 8001edc:	40020400 	.word	0x40020400
 8001ee0:	40020800 	.word	0x40020800
 8001ee4:	40020c00 	.word	0x40020c00
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40021400 	.word	0x40021400
 8001ef0:	40021800 	.word	0x40021800
 8001ef4:	40021c00 	.word	0x40021c00
 8001ef8:	40013c00 	.word	0x40013c00

08001efc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	807b      	strh	r3, [r7, #2]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f0c:	787b      	ldrb	r3, [r7, #1]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f12:	887a      	ldrh	r2, [r7, #2]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f18:	e003      	b.n	8001f22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f1a:	887b      	ldrh	r3, [r7, #2]
 8001f1c:	041a      	lsls	r2, r3, #16
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	619a      	str	r2, [r3, #24]
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
	...

08001f30 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f3a:	4b23      	ldr	r3, [pc, #140]	; (8001fc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	4a22      	ldr	r2, [pc, #136]	; (8001fc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f44:	6413      	str	r3, [r2, #64]	; 0x40
 8001f46:	4b20      	ldr	r3, [pc, #128]	; (8001fc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	603b      	str	r3, [r7, #0]
 8001f50:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f52:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a1d      	ldr	r2, [pc, #116]	; (8001fcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f5c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f5e:	f7ff f8e7 	bl	8001130 <HAL_GetTick>
 8001f62:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f64:	e009      	b.n	8001f7a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f66:	f7ff f8e3 	bl	8001130 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f74:	d901      	bls.n	8001f7a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e022      	b.n	8001fc0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f7a:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f86:	d1ee      	bne.n	8001f66 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f88:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a0f      	ldr	r2, [pc, #60]	; (8001fcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f92:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f94:	f7ff f8cc 	bl	8001130 <HAL_GetTick>
 8001f98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f9a:	e009      	b.n	8001fb0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f9c:	f7ff f8c8 	bl	8001130 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001faa:	d901      	bls.n	8001fb0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e007      	b.n	8001fc0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001fbc:	d1ee      	bne.n	8001f9c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40007000 	.word	0x40007000

08001fd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e291      	b.n	800250a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 8087 	beq.w	8002102 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ff4:	4b96      	ldr	r3, [pc, #600]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 030c 	and.w	r3, r3, #12
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d00c      	beq.n	800201a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002000:	4b93      	ldr	r3, [pc, #588]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 030c 	and.w	r3, r3, #12
 8002008:	2b08      	cmp	r3, #8
 800200a:	d112      	bne.n	8002032 <HAL_RCC_OscConfig+0x62>
 800200c:	4b90      	ldr	r3, [pc, #576]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002014:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002018:	d10b      	bne.n	8002032 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201a:	4b8d      	ldr	r3, [pc, #564]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d06c      	beq.n	8002100 <HAL_RCC_OscConfig+0x130>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d168      	bne.n	8002100 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e26b      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800203a:	d106      	bne.n	800204a <HAL_RCC_OscConfig+0x7a>
 800203c:	4b84      	ldr	r3, [pc, #528]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a83      	ldr	r2, [pc, #524]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	e02e      	b.n	80020a8 <HAL_RCC_OscConfig+0xd8>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10c      	bne.n	800206c <HAL_RCC_OscConfig+0x9c>
 8002052:	4b7f      	ldr	r3, [pc, #508]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a7e      	ldr	r2, [pc, #504]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	4b7c      	ldr	r3, [pc, #496]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a7b      	ldr	r2, [pc, #492]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002064:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	e01d      	b.n	80020a8 <HAL_RCC_OscConfig+0xd8>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0xc0>
 8002076:	4b76      	ldr	r3, [pc, #472]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a75      	ldr	r2, [pc, #468]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 800207c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	4b73      	ldr	r3, [pc, #460]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a72      	ldr	r2, [pc, #456]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e00b      	b.n	80020a8 <HAL_RCC_OscConfig+0xd8>
 8002090:	4b6f      	ldr	r3, [pc, #444]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a6e      	ldr	r2, [pc, #440]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	4b6c      	ldr	r3, [pc, #432]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a6b      	ldr	r2, [pc, #428]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 80020a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d013      	beq.n	80020d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7ff f83e 	bl	8001130 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b8:	f7ff f83a 	bl	8001130 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b64      	cmp	r3, #100	; 0x64
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e21f      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ca:	4b61      	ldr	r3, [pc, #388]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0xe8>
 80020d6:	e014      	b.n	8002102 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7ff f82a 	bl	8001130 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e0:	f7ff f826 	bl	8001130 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b64      	cmp	r3, #100	; 0x64
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e20b      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f2:	4b57      	ldr	r3, [pc, #348]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x110>
 80020fe:	e000      	b.n	8002102 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d069      	beq.n	80021e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800210e:	4b50      	ldr	r3, [pc, #320]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00b      	beq.n	8002132 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800211a:	4b4d      	ldr	r3, [pc, #308]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	2b08      	cmp	r3, #8
 8002124:	d11c      	bne.n	8002160 <HAL_RCC_OscConfig+0x190>
 8002126:	4b4a      	ldr	r3, [pc, #296]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d116      	bne.n	8002160 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002132:	4b47      	ldr	r3, [pc, #284]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d005      	beq.n	800214a <HAL_RCC_OscConfig+0x17a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d001      	beq.n	800214a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e1df      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214a:	4b41      	ldr	r3, [pc, #260]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	493d      	ldr	r1, [pc, #244]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 800215a:	4313      	orrs	r3, r2
 800215c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800215e:	e040      	b.n	80021e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d023      	beq.n	80021b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002168:	4b39      	ldr	r3, [pc, #228]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a38      	ldr	r2, [pc, #224]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7fe ffdc 	bl	8001130 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800217c:	f7fe ffd8 	bl	8001130 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e1bd      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218e:	4b30      	ldr	r3, [pc, #192]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f0      	beq.n	800217c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219a:	4b2d      	ldr	r3, [pc, #180]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4929      	ldr	r1, [pc, #164]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]
 80021ae:	e018      	b.n	80021e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021b0:	4b27      	ldr	r3, [pc, #156]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a26      	ldr	r2, [pc, #152]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 80021b6:	f023 0301 	bic.w	r3, r3, #1
 80021ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021bc:	f7fe ffb8 	bl	8001130 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c4:	f7fe ffb4 	bl	8001130 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e199      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d6:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d038      	beq.n	8002260 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d019      	beq.n	800222a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021f6:	4b16      	ldr	r3, [pc, #88]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 80021f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021fa:	4a15      	ldr	r2, [pc, #84]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002202:	f7fe ff95 	bl	8001130 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800220a:	f7fe ff91 	bl	8001130 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e176      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 800221e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x23a>
 8002228:	e01a      	b.n	8002260 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800222a:	4b09      	ldr	r3, [pc, #36]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 800222c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800222e:	4a08      	ldr	r2, [pc, #32]	; (8002250 <HAL_RCC_OscConfig+0x280>)
 8002230:	f023 0301 	bic.w	r3, r3, #1
 8002234:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002236:	f7fe ff7b 	bl	8001130 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800223c:	e00a      	b.n	8002254 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800223e:	f7fe ff77 	bl	8001130 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d903      	bls.n	8002254 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e15c      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
 8002250:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002254:	4b91      	ldr	r3, [pc, #580]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 8002256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1ee      	bne.n	800223e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 80a4 	beq.w	80023b6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800226e:	4b8b      	ldr	r3, [pc, #556]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10d      	bne.n	8002296 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800227a:	4b88      	ldr	r3, [pc, #544]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	4a87      	ldr	r2, [pc, #540]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 8002280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002284:	6413      	str	r3, [r2, #64]	; 0x40
 8002286:	4b85      	ldr	r3, [pc, #532]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002292:	2301      	movs	r3, #1
 8002294:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002296:	4b82      	ldr	r3, [pc, #520]	; (80024a0 <HAL_RCC_OscConfig+0x4d0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d118      	bne.n	80022d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80022a2:	4b7f      	ldr	r3, [pc, #508]	; (80024a0 <HAL_RCC_OscConfig+0x4d0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a7e      	ldr	r2, [pc, #504]	; (80024a0 <HAL_RCC_OscConfig+0x4d0>)
 80022a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ae:	f7fe ff3f 	bl	8001130 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b6:	f7fe ff3b 	bl	8001130 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b64      	cmp	r3, #100	; 0x64
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e120      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022c8:	4b75      	ldr	r3, [pc, #468]	; (80024a0 <HAL_RCC_OscConfig+0x4d0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d106      	bne.n	80022ea <HAL_RCC_OscConfig+0x31a>
 80022dc:	4b6f      	ldr	r3, [pc, #444]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 80022de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e0:	4a6e      	ldr	r2, [pc, #440]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6713      	str	r3, [r2, #112]	; 0x70
 80022e8:	e02d      	b.n	8002346 <HAL_RCC_OscConfig+0x376>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10c      	bne.n	800230c <HAL_RCC_OscConfig+0x33c>
 80022f2:	4b6a      	ldr	r3, [pc, #424]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f6:	4a69      	ldr	r2, [pc, #420]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 80022f8:	f023 0301 	bic.w	r3, r3, #1
 80022fc:	6713      	str	r3, [r2, #112]	; 0x70
 80022fe:	4b67      	ldr	r3, [pc, #412]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 8002300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002302:	4a66      	ldr	r2, [pc, #408]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 8002304:	f023 0304 	bic.w	r3, r3, #4
 8002308:	6713      	str	r3, [r2, #112]	; 0x70
 800230a:	e01c      	b.n	8002346 <HAL_RCC_OscConfig+0x376>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2b05      	cmp	r3, #5
 8002312:	d10c      	bne.n	800232e <HAL_RCC_OscConfig+0x35e>
 8002314:	4b61      	ldr	r3, [pc, #388]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 8002316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002318:	4a60      	ldr	r2, [pc, #384]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 800231a:	f043 0304 	orr.w	r3, r3, #4
 800231e:	6713      	str	r3, [r2, #112]	; 0x70
 8002320:	4b5e      	ldr	r3, [pc, #376]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 8002322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002324:	4a5d      	ldr	r2, [pc, #372]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	6713      	str	r3, [r2, #112]	; 0x70
 800232c:	e00b      	b.n	8002346 <HAL_RCC_OscConfig+0x376>
 800232e:	4b5b      	ldr	r3, [pc, #364]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 8002330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002332:	4a5a      	ldr	r2, [pc, #360]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 8002334:	f023 0301 	bic.w	r3, r3, #1
 8002338:	6713      	str	r3, [r2, #112]	; 0x70
 800233a:	4b58      	ldr	r3, [pc, #352]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 800233c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233e:	4a57      	ldr	r2, [pc, #348]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 8002340:	f023 0304 	bic.w	r3, r3, #4
 8002344:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d015      	beq.n	800237a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234e:	f7fe feef 	bl	8001130 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002354:	e00a      	b.n	800236c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002356:	f7fe feeb 	bl	8001130 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f241 3288 	movw	r2, #5000	; 0x1388
 8002364:	4293      	cmp	r3, r2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e0ce      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236c:	4b4b      	ldr	r3, [pc, #300]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 800236e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0ee      	beq.n	8002356 <HAL_RCC_OscConfig+0x386>
 8002378:	e014      	b.n	80023a4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237a:	f7fe fed9 	bl	8001130 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002380:	e00a      	b.n	8002398 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002382:	f7fe fed5 	bl	8001130 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002390:	4293      	cmp	r3, r2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e0b8      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002398:	4b40      	ldr	r3, [pc, #256]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 800239a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1ee      	bne.n	8002382 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023a4:	7dfb      	ldrb	r3, [r7, #23]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d105      	bne.n	80023b6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023aa:	4b3c      	ldr	r3, [pc, #240]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	4a3b      	ldr	r2, [pc, #236]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 80023b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 80a4 	beq.w	8002508 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023c0:	4b36      	ldr	r3, [pc, #216]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 030c 	and.w	r3, r3, #12
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d06b      	beq.n	80024a4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d149      	bne.n	8002468 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d4:	4b31      	ldr	r3, [pc, #196]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a30      	ldr	r2, [pc, #192]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 80023da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e0:	f7fe fea6 	bl	8001130 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e8:	f7fe fea2 	bl	8001130 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e087      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fa:	4b28      	ldr	r3, [pc, #160]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69da      	ldr	r2, [r3, #28]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	019b      	lsls	r3, r3, #6
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	085b      	lsrs	r3, r3, #1
 800241e:	3b01      	subs	r3, #1
 8002420:	041b      	lsls	r3, r3, #16
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002428:	061b      	lsls	r3, r3, #24
 800242a:	4313      	orrs	r3, r2
 800242c:	4a1b      	ldr	r2, [pc, #108]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 800242e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002432:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002434:	4b19      	ldr	r3, [pc, #100]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a18      	ldr	r2, [pc, #96]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 800243a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800243e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002440:	f7fe fe76 	bl	8001130 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002448:	f7fe fe72 	bl	8001130 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e057      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245a:	4b10      	ldr	r3, [pc, #64]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0x478>
 8002466:	e04f      	b.n	8002508 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a0b      	ldr	r2, [pc, #44]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 800246e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7fe fe5c 	bl	8001130 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247c:	f7fe fe58 	bl	8001130 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e03d      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248e:	4b03      	ldr	r3, [pc, #12]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f0      	bne.n	800247c <HAL_RCC_OscConfig+0x4ac>
 800249a:	e035      	b.n	8002508 <HAL_RCC_OscConfig+0x538>
 800249c:	40023800 	.word	0x40023800
 80024a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80024a4:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <HAL_RCC_OscConfig+0x544>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d028      	beq.n	8002504 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024bc:	429a      	cmp	r2, r3
 80024be:	d121      	bne.n	8002504 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d11a      	bne.n	8002504 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024d4:	4013      	ands	r3, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024dc:	4293      	cmp	r3, r2
 80024de:	d111      	bne.n	8002504 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ea:	085b      	lsrs	r3, r3, #1
 80024ec:	3b01      	subs	r3, #1
 80024ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d107      	bne.n	8002504 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800

08002518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0d0      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002530:	4b6a      	ldr	r3, [pc, #424]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 030f 	and.w	r3, r3, #15
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d910      	bls.n	8002560 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253e:	4b67      	ldr	r3, [pc, #412]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 020f 	bic.w	r2, r3, #15
 8002546:	4965      	ldr	r1, [pc, #404]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800254e:	4b63      	ldr	r3, [pc, #396]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d001      	beq.n	8002560 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0b8      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d020      	beq.n	80025ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002578:	4b59      	ldr	r3, [pc, #356]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	4a58      	ldr	r2, [pc, #352]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 800257e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002582:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002590:	4b53      	ldr	r3, [pc, #332]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	4a52      	ldr	r2, [pc, #328]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002596:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800259a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800259c:	4b50      	ldr	r3, [pc, #320]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	494d      	ldr	r1, [pc, #308]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d040      	beq.n	800263c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d107      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c2:	4b47      	ldr	r3, [pc, #284]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d115      	bne.n	80025fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e07f      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d107      	bne.n	80025ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025da:	4b41      	ldr	r3, [pc, #260]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d109      	bne.n	80025fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e073      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ea:	4b3d      	ldr	r3, [pc, #244]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e06b      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025fa:	4b39      	ldr	r3, [pc, #228]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f023 0203 	bic.w	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4936      	ldr	r1, [pc, #216]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002608:	4313      	orrs	r3, r2
 800260a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800260c:	f7fe fd90 	bl	8001130 <HAL_GetTick>
 8002610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002612:	e00a      	b.n	800262a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002614:	f7fe fd8c 	bl	8001130 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002622:	4293      	cmp	r3, r2
 8002624:	d901      	bls.n	800262a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e053      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262a:	4b2d      	ldr	r3, [pc, #180]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 020c 	and.w	r2, r3, #12
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	429a      	cmp	r2, r3
 800263a:	d1eb      	bne.n	8002614 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800263c:	4b27      	ldr	r3, [pc, #156]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d210      	bcs.n	800266c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b24      	ldr	r3, [pc, #144]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 020f 	bic.w	r2, r3, #15
 8002652:	4922      	ldr	r1, [pc, #136]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	4b20      	ldr	r3, [pc, #128]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e032      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002678:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4916      	ldr	r1, [pc, #88]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002686:	4313      	orrs	r3, r2
 8002688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d009      	beq.n	80026aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002696:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	490e      	ldr	r1, [pc, #56]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026aa:	f000 f821 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 80026ae:	4602      	mov	r2, r0
 80026b0:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	490a      	ldr	r1, [pc, #40]	; (80026e4 <HAL_RCC_ClockConfig+0x1cc>)
 80026bc:	5ccb      	ldrb	r3, [r1, r3]
 80026be:	fa22 f303 	lsr.w	r3, r2, r3
 80026c2:	4a09      	ldr	r2, [pc, #36]	; (80026e8 <HAL_RCC_ClockConfig+0x1d0>)
 80026c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026c6:	4b09      	ldr	r3, [pc, #36]	; (80026ec <HAL_RCC_ClockConfig+0x1d4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fcec 	bl	80010a8 <HAL_InitTick>

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023c00 	.word	0x40023c00
 80026e0:	40023800 	.word	0x40023800
 80026e4:	080078f8 	.word	0x080078f8
 80026e8:	20000000 	.word	0x20000000
 80026ec:	20000004 	.word	0x20000004

080026f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f4:	b094      	sub	sp, #80	; 0x50
 80026f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	647b      	str	r3, [r7, #68]	; 0x44
 80026fc:	2300      	movs	r3, #0
 80026fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002700:	2300      	movs	r3, #0
 8002702:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002708:	4b79      	ldr	r3, [pc, #484]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 030c 	and.w	r3, r3, #12
 8002710:	2b08      	cmp	r3, #8
 8002712:	d00d      	beq.n	8002730 <HAL_RCC_GetSysClockFreq+0x40>
 8002714:	2b08      	cmp	r3, #8
 8002716:	f200 80e1 	bhi.w	80028dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0x34>
 800271e:	2b04      	cmp	r3, #4
 8002720:	d003      	beq.n	800272a <HAL_RCC_GetSysClockFreq+0x3a>
 8002722:	e0db      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002724:	4b73      	ldr	r3, [pc, #460]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002726:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002728:	e0db      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800272a:	4b73      	ldr	r3, [pc, #460]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800272c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800272e:	e0d8      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002730:	4b6f      	ldr	r3, [pc, #444]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002738:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800273a:	4b6d      	ldr	r3, [pc, #436]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d063      	beq.n	800280e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002746:	4b6a      	ldr	r3, [pc, #424]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	099b      	lsrs	r3, r3, #6
 800274c:	2200      	movs	r2, #0
 800274e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002750:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002758:	633b      	str	r3, [r7, #48]	; 0x30
 800275a:	2300      	movs	r3, #0
 800275c:	637b      	str	r3, [r7, #52]	; 0x34
 800275e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002762:	4622      	mov	r2, r4
 8002764:	462b      	mov	r3, r5
 8002766:	f04f 0000 	mov.w	r0, #0
 800276a:	f04f 0100 	mov.w	r1, #0
 800276e:	0159      	lsls	r1, r3, #5
 8002770:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002774:	0150      	lsls	r0, r2, #5
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	4621      	mov	r1, r4
 800277c:	1a51      	subs	r1, r2, r1
 800277e:	6139      	str	r1, [r7, #16]
 8002780:	4629      	mov	r1, r5
 8002782:	eb63 0301 	sbc.w	r3, r3, r1
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002794:	4659      	mov	r1, fp
 8002796:	018b      	lsls	r3, r1, #6
 8002798:	4651      	mov	r1, sl
 800279a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800279e:	4651      	mov	r1, sl
 80027a0:	018a      	lsls	r2, r1, #6
 80027a2:	4651      	mov	r1, sl
 80027a4:	ebb2 0801 	subs.w	r8, r2, r1
 80027a8:	4659      	mov	r1, fp
 80027aa:	eb63 0901 	sbc.w	r9, r3, r1
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027c2:	4690      	mov	r8, r2
 80027c4:	4699      	mov	r9, r3
 80027c6:	4623      	mov	r3, r4
 80027c8:	eb18 0303 	adds.w	r3, r8, r3
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	462b      	mov	r3, r5
 80027d0:	eb49 0303 	adc.w	r3, r9, r3
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027e2:	4629      	mov	r1, r5
 80027e4:	024b      	lsls	r3, r1, #9
 80027e6:	4621      	mov	r1, r4
 80027e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027ec:	4621      	mov	r1, r4
 80027ee:	024a      	lsls	r2, r1, #9
 80027f0:	4610      	mov	r0, r2
 80027f2:	4619      	mov	r1, r3
 80027f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027f6:	2200      	movs	r2, #0
 80027f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80027fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002800:	f7fd fd5e 	bl	80002c0 <__aeabi_uldivmod>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4613      	mov	r3, r2
 800280a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800280c:	e058      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800280e:	4b38      	ldr	r3, [pc, #224]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	099b      	lsrs	r3, r3, #6
 8002814:	2200      	movs	r2, #0
 8002816:	4618      	mov	r0, r3
 8002818:	4611      	mov	r1, r2
 800281a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800281e:	623b      	str	r3, [r7, #32]
 8002820:	2300      	movs	r3, #0
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
 8002824:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002828:	4642      	mov	r2, r8
 800282a:	464b      	mov	r3, r9
 800282c:	f04f 0000 	mov.w	r0, #0
 8002830:	f04f 0100 	mov.w	r1, #0
 8002834:	0159      	lsls	r1, r3, #5
 8002836:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800283a:	0150      	lsls	r0, r2, #5
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4641      	mov	r1, r8
 8002842:	ebb2 0a01 	subs.w	sl, r2, r1
 8002846:	4649      	mov	r1, r9
 8002848:	eb63 0b01 	sbc.w	fp, r3, r1
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002858:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800285c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002860:	ebb2 040a 	subs.w	r4, r2, sl
 8002864:	eb63 050b 	sbc.w	r5, r3, fp
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	f04f 0300 	mov.w	r3, #0
 8002870:	00eb      	lsls	r3, r5, #3
 8002872:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002876:	00e2      	lsls	r2, r4, #3
 8002878:	4614      	mov	r4, r2
 800287a:	461d      	mov	r5, r3
 800287c:	4643      	mov	r3, r8
 800287e:	18e3      	adds	r3, r4, r3
 8002880:	603b      	str	r3, [r7, #0]
 8002882:	464b      	mov	r3, r9
 8002884:	eb45 0303 	adc.w	r3, r5, r3
 8002888:	607b      	str	r3, [r7, #4]
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	f04f 0300 	mov.w	r3, #0
 8002892:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002896:	4629      	mov	r1, r5
 8002898:	028b      	lsls	r3, r1, #10
 800289a:	4621      	mov	r1, r4
 800289c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028a0:	4621      	mov	r1, r4
 80028a2:	028a      	lsls	r2, r1, #10
 80028a4:	4610      	mov	r0, r2
 80028a6:	4619      	mov	r1, r3
 80028a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028aa:	2200      	movs	r2, #0
 80028ac:	61bb      	str	r3, [r7, #24]
 80028ae:	61fa      	str	r2, [r7, #28]
 80028b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028b4:	f7fd fd04 	bl	80002c0 <__aeabi_uldivmod>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4613      	mov	r3, r2
 80028be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	0c1b      	lsrs	r3, r3, #16
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	3301      	adds	r3, #1
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80028d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028da:	e002      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80028de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3750      	adds	r7, #80	; 0x50
 80028e8:	46bd      	mov	sp, r7
 80028ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028ee:	bf00      	nop
 80028f0:	40023800 	.word	0x40023800
 80028f4:	00f42400 	.word	0x00f42400
 80028f8:	007a1200 	.word	0x007a1200

080028fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002900:	4b03      	ldr	r3, [pc, #12]	; (8002910 <HAL_RCC_GetHCLKFreq+0x14>)
 8002902:	681b      	ldr	r3, [r3, #0]
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	20000000 	.word	0x20000000

08002914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002918:	f7ff fff0 	bl	80028fc <HAL_RCC_GetHCLKFreq>
 800291c:	4602      	mov	r2, r0
 800291e:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	0a9b      	lsrs	r3, r3, #10
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	4903      	ldr	r1, [pc, #12]	; (8002938 <HAL_RCC_GetPCLK1Freq+0x24>)
 800292a:	5ccb      	ldrb	r3, [r1, r3]
 800292c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002930:	4618      	mov	r0, r3
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40023800 	.word	0x40023800
 8002938:	08007908 	.word	0x08007908

0800293c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002940:	f7ff ffdc 	bl	80028fc <HAL_RCC_GetHCLKFreq>
 8002944:	4602      	mov	r2, r0
 8002946:	4b05      	ldr	r3, [pc, #20]	; (800295c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	0b5b      	lsrs	r3, r3, #13
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	4903      	ldr	r1, [pc, #12]	; (8002960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002952:	5ccb      	ldrb	r3, [r1, r3]
 8002954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002958:	4618      	mov	r0, r3
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40023800 	.word	0x40023800
 8002960:	08007908 	.word	0x08007908

08002964 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8002974:	2300      	movs	r3, #0
 8002976:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d012      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002988:	4b65      	ldr	r3, [pc, #404]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	4a64      	ldr	r2, [pc, #400]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800298e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002992:	6093      	str	r3, [r2, #8]
 8002994:	4b62      	ldr	r3, [pc, #392]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	4960      	ldr	r1, [pc, #384]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 80029aa:	2301      	movs	r3, #1
 80029ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d017      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029ba:	4b59      	ldr	r3, [pc, #356]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80029bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c8:	4955      	ldr	r1, [pc, #340]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029d8:	d101      	bne.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80029da:	2301      	movs	r3, #1
 80029dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80029e6:	2301      	movs	r3, #1
 80029e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d017      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029f6:	4b4a      	ldr	r3, [pc, #296]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80029f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a04:	4946      	ldr	r1, [pc, #280]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a14:	d101      	bne.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8002a16:	2301      	movs	r3, #1
 8002a18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8002a22:	2301      	movs	r3, #1
 8002a24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0320 	and.w	r3, r3, #32
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 808b 	beq.w	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a34:	4b3a      	ldr	r3, [pc, #232]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	4a39      	ldr	r2, [pc, #228]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a3e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a40:	4b37      	ldr	r3, [pc, #220]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a4c:	4b35      	ldr	r3, [pc, #212]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a34      	ldr	r2, [pc, #208]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a58:	f7fe fb6a 	bl	8001130 <HAL_GetTick>
 8002a5c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a60:	f7fe fb66 	bl	8001130 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b64      	cmp	r3, #100	; 0x64
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e2bc      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a72:	4b2c      	ldr	r3, [pc, #176]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f0      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a7e:	4b28      	ldr	r3, [pc, #160]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a86:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d035      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d02e      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a9c:	4b20      	ldr	r3, [pc, #128]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aa4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002aa6:	4b1e      	ldr	r3, [pc, #120]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aaa:	4a1d      	ldr	r2, [pc, #116]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ab2:	4b1b      	ldr	r3, [pc, #108]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab6:	4a1a      	ldr	r2, [pc, #104]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002abc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002abe:	4a18      	ldr	r2, [pc, #96]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ac4:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d114      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad0:	f7fe fb2e 	bl	8001130 <HAL_GetTick>
 8002ad4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad6:	e00a      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad8:	f7fe fb2a 	bl	8001130 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e27e      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aee:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0ee      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b06:	d111      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002b14:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b16:	400b      	ands	r3, r1
 8002b18:	4901      	ldr	r1, [pc, #4]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
 8002b1e:	e00b      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40007000 	.word	0x40007000
 8002b28:	0ffffcff 	.word	0x0ffffcff
 8002b2c:	4ba4      	ldr	r3, [pc, #656]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	4aa3      	ldr	r2, [pc, #652]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b32:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b36:	6093      	str	r3, [r2, #8]
 8002b38:	4ba1      	ldr	r3, [pc, #644]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b44:	499e      	ldr	r1, [pc, #632]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d010      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b56:	4b9a      	ldr	r3, [pc, #616]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b5c:	4a98      	ldr	r2, [pc, #608]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b62:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002b66:	4b96      	ldr	r3, [pc, #600]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b68:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b70:	4993      	ldr	r1, [pc, #588]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00a      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b84:	4b8e      	ldr	r3, [pc, #568]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b92:	498b      	ldr	r1, [pc, #556]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00a      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ba6:	4b86      	ldr	r3, [pc, #536]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bb4:	4982      	ldr	r1, [pc, #520]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00a      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bc8:	4b7d      	ldr	r3, [pc, #500]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bd6:	497a      	ldr	r1, [pc, #488]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bea:	4b75      	ldr	r3, [pc, #468]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf0:	f023 0203 	bic.w	r2, r3, #3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf8:	4971      	ldr	r1, [pc, #452]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00a      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c0c:	4b6c      	ldr	r3, [pc, #432]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c12:	f023 020c 	bic.w	r2, r3, #12
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	4969      	ldr	r1, [pc, #420]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c2e:	4b64      	ldr	r3, [pc, #400]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3c:	4960      	ldr	r1, [pc, #384]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00a      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c50:	4b5b      	ldr	r3, [pc, #364]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5e:	4958      	ldr	r1, [pc, #352]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c72:	4b53      	ldr	r3, [pc, #332]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c80:	494f      	ldr	r1, [pc, #316]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00a      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002c94:	4b4a      	ldr	r3, [pc, #296]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca2:	4947      	ldr	r1, [pc, #284]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002cb6:	4b42      	ldr	r3, [pc, #264]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc4:	493e      	ldr	r1, [pc, #248]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002cd8:	4b39      	ldr	r3, [pc, #228]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cde:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce6:	4936      	ldr	r1, [pc, #216]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d011      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002cfa:	4b31      	ldr	r3, [pc, #196]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d00:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d08:	492d      	ldr	r1, [pc, #180]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d18:	d101      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d2a:	4b25      	ldr	r3, [pc, #148]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d30:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d38:	4921      	ldr	r1, [pc, #132]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d4c:	4b1c      	ldr	r3, [pc, #112]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d52:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d5a:	4919      	ldr	r1, [pc, #100]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002d6e:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d74:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d7c:	4910      	ldr	r1, [pc, #64]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d006      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 809d 	beq.w	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d98:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a08      	ldr	r2, [pc, #32]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002da2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002da4:	f7fe f9c4 	bl	8001130 <HAL_GetTick>
 8002da8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002daa:	e00b      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002dac:	f7fe f9c0 	bl	8001130 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b64      	cmp	r3, #100	; 0x64
 8002db8:	d904      	bls.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e116      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x688>
 8002dbe:	bf00      	nop
 8002dc0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dc4:	4b8b      	ldr	r3, [pc, #556]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1ed      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d017      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d113      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002de4:	4b83      	ldr	r3, [pc, #524]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dea:	0e1b      	lsrs	r3, r3, #24
 8002dec:	f003 030f 	and.w	r3, r3, #15
 8002df0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	019a      	lsls	r2, r3, #6
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	061b      	lsls	r3, r3, #24
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	071b      	lsls	r3, r3, #28
 8002e04:	497b      	ldr	r1, [pc, #492]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d004      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e20:	d00a      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d024      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e36:	d11f      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e38:	4b6e      	ldr	r3, [pc, #440]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e3e:	0f1b      	lsrs	r3, r3, #28
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	019a      	lsls	r2, r3, #6
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	061b      	lsls	r3, r3, #24
 8002e52:	431a      	orrs	r2, r3
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	071b      	lsls	r3, r3, #28
 8002e58:	4966      	ldr	r1, [pc, #408]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e60:	4b64      	ldr	r3, [pc, #400]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e66:	f023 021f 	bic.w	r2, r3, #31
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	4960      	ldr	r1, [pc, #384]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00d      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	019a      	lsls	r2, r3, #6
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	061b      	lsls	r3, r3, #24
 8002e90:	431a      	orrs	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	071b      	lsls	r3, r3, #28
 8002e98:	4956      	ldr	r1, [pc, #344]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ea0:	4b54      	ldr	r3, [pc, #336]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a53      	ldr	r2, [pc, #332]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002ea6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002eaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eac:	f7fe f940 	bl	8001130 <HAL_GetTick>
 8002eb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002eb4:	f7fe f93c 	bl	8001130 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b64      	cmp	r3, #100	; 0x64
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e092      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ec6:	4b4b      	ldr	r3, [pc, #300]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	f040 8088 	bne.w	8002fea <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002eda:	4b46      	ldr	r3, [pc, #280]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a45      	ldr	r2, [pc, #276]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ee4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ee6:	f7fe f923 	bl	8001130 <HAL_GetTick>
 8002eea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002eee:	f7fe f91f 	bl	8001130 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b64      	cmp	r3, #100	; 0x64
 8002efa:	d901      	bls.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e075      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f00:	4b3c      	ldr	r3, [pc, #240]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f0c:	d0ef      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d009      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d024      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d120      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f36:	4b2f      	ldr	r3, [pc, #188]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3c:	0c1b      	lsrs	r3, r3, #16
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	019a      	lsls	r2, r3, #6
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	041b      	lsls	r3, r3, #16
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	061b      	lsls	r3, r3, #24
 8002f56:	4927      	ldr	r1, [pc, #156]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f5e:	4b25      	ldr	r3, [pc, #148]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f64:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	021b      	lsls	r3, r3, #8
 8002f70:	4920      	ldr	r1, [pc, #128]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d018      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f8c:	d113      	bne.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f8e:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f94:	0e1b      	lsrs	r3, r3, #24
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	019a      	lsls	r2, r3, #6
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	041b      	lsls	r3, r3, #16
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	061b      	lsls	r3, r3, #24
 8002fae:	4911      	ldr	r1, [pc, #68]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002fb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a0e      	ldr	r2, [pc, #56]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fc2:	f7fe f8b5 	bl	8001130 <HAL_GetTick>
 8002fc6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fca:	f7fe f8b1 	bl	8001130 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b64      	cmp	r3, #100	; 0x64
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e007      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002fdc:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fe8:	d1ef      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3720      	adds	r7, #32
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40023800 	.word	0x40023800

08002ff8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e038      	b.n	8003080 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d106      	bne.n	8003028 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f7fd ff1c 	bl	8000e60 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	3308      	adds	r3, #8
 8003030:	4619      	mov	r1, r3
 8003032:	4610      	mov	r0, r2
 8003034:	f000 fcfe 	bl	8003a34 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	461a      	mov	r2, r3
 8003042:	68b9      	ldr	r1, [r7, #8]
 8003044:	f000 fd86 	bl	8003b54 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6858      	ldr	r0, [r3, #4]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	f000 fdcd 	bl	8003bf4 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	6892      	ldr	r2, [r2, #8]
 8003062:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	6892      	ldr	r2, [r2, #8]
 800306e:	f041 0101 	orr.w	r1, r1, #1
 8003072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e040      	b.n	800311c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d106      	bne.n	80030b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7fd fe1c 	bl	8000ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2224      	movs	r2, #36	; 0x24
 80030b4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0201 	bic.w	r2, r2, #1
 80030c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f8b0 	bl	800322c <UART_SetConfig>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d101      	bne.n	80030d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e022      	b.n	800311c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fb08 	bl	80036f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003102:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 fb8f 	bl	8003838 <UART_CheckIdleState>
 800311a:	4603      	mov	r3, r0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08a      	sub	sp, #40	; 0x28
 8003128:	af02      	add	r7, sp, #8
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	4613      	mov	r3, r2
 8003132:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003138:	2b20      	cmp	r3, #32
 800313a:	d171      	bne.n	8003220 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <HAL_UART_Transmit+0x24>
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e06a      	b.n	8003222 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2221      	movs	r2, #33	; 0x21
 8003158:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800315a:	f7fd ffe9 	bl	8001130 <HAL_GetTick>
 800315e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	88fa      	ldrh	r2, [r7, #6]
 8003164:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	88fa      	ldrh	r2, [r7, #6]
 800316c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003178:	d108      	bne.n	800318c <HAL_UART_Transmit+0x68>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d104      	bne.n	800318c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003182:	2300      	movs	r3, #0
 8003184:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	61bb      	str	r3, [r7, #24]
 800318a:	e003      	b.n	8003194 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003190:	2300      	movs	r3, #0
 8003192:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003194:	e02c      	b.n	80031f0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2200      	movs	r2, #0
 800319e:	2180      	movs	r1, #128	; 0x80
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 fb80 	bl	80038a6 <UART_WaitOnFlagUntilTimeout>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e038      	b.n	8003222 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10b      	bne.n	80031ce <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	3302      	adds	r3, #2
 80031ca:	61bb      	str	r3, [r7, #24]
 80031cc:	e007      	b.n	80031de <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	781a      	ldrb	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	3301      	adds	r3, #1
 80031dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1cc      	bne.n	8003196 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2200      	movs	r2, #0
 8003204:	2140      	movs	r1, #64	; 0x40
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 fb4d 	bl	80038a6 <UART_WaitOnFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e005      	b.n	8003222 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2220      	movs	r2, #32
 800321a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	e000      	b.n	8003222 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003220:	2302      	movs	r3, #2
  }
}
 8003222:	4618      	mov	r0, r3
 8003224:	3720      	adds	r7, #32
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	431a      	orrs	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	4313      	orrs	r3, r2
 800324e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	4ba6      	ldr	r3, [pc, #664]	; (80034f0 <UART_SetConfig+0x2c4>)
 8003258:	4013      	ands	r3, r2
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	6979      	ldr	r1, [r7, #20]
 8003260:	430b      	orrs	r3, r1
 8003262:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	4313      	orrs	r3, r2
 8003288:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	430a      	orrs	r2, r1
 800329c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a94      	ldr	r2, [pc, #592]	; (80034f4 <UART_SetConfig+0x2c8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d120      	bne.n	80032ea <UART_SetConfig+0xbe>
 80032a8:	4b93      	ldr	r3, [pc, #588]	; (80034f8 <UART_SetConfig+0x2cc>)
 80032aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d816      	bhi.n	80032e4 <UART_SetConfig+0xb8>
 80032b6:	a201      	add	r2, pc, #4	; (adr r2, 80032bc <UART_SetConfig+0x90>)
 80032b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032bc:	080032cd 	.word	0x080032cd
 80032c0:	080032d9 	.word	0x080032d9
 80032c4:	080032d3 	.word	0x080032d3
 80032c8:	080032df 	.word	0x080032df
 80032cc:	2301      	movs	r3, #1
 80032ce:	77fb      	strb	r3, [r7, #31]
 80032d0:	e150      	b.n	8003574 <UART_SetConfig+0x348>
 80032d2:	2302      	movs	r3, #2
 80032d4:	77fb      	strb	r3, [r7, #31]
 80032d6:	e14d      	b.n	8003574 <UART_SetConfig+0x348>
 80032d8:	2304      	movs	r3, #4
 80032da:	77fb      	strb	r3, [r7, #31]
 80032dc:	e14a      	b.n	8003574 <UART_SetConfig+0x348>
 80032de:	2308      	movs	r3, #8
 80032e0:	77fb      	strb	r3, [r7, #31]
 80032e2:	e147      	b.n	8003574 <UART_SetConfig+0x348>
 80032e4:	2310      	movs	r3, #16
 80032e6:	77fb      	strb	r3, [r7, #31]
 80032e8:	e144      	b.n	8003574 <UART_SetConfig+0x348>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a83      	ldr	r2, [pc, #524]	; (80034fc <UART_SetConfig+0x2d0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d132      	bne.n	800335a <UART_SetConfig+0x12e>
 80032f4:	4b80      	ldr	r3, [pc, #512]	; (80034f8 <UART_SetConfig+0x2cc>)
 80032f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	2b0c      	cmp	r3, #12
 8003300:	d828      	bhi.n	8003354 <UART_SetConfig+0x128>
 8003302:	a201      	add	r2, pc, #4	; (adr r2, 8003308 <UART_SetConfig+0xdc>)
 8003304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003308:	0800333d 	.word	0x0800333d
 800330c:	08003355 	.word	0x08003355
 8003310:	08003355 	.word	0x08003355
 8003314:	08003355 	.word	0x08003355
 8003318:	08003349 	.word	0x08003349
 800331c:	08003355 	.word	0x08003355
 8003320:	08003355 	.word	0x08003355
 8003324:	08003355 	.word	0x08003355
 8003328:	08003343 	.word	0x08003343
 800332c:	08003355 	.word	0x08003355
 8003330:	08003355 	.word	0x08003355
 8003334:	08003355 	.word	0x08003355
 8003338:	0800334f 	.word	0x0800334f
 800333c:	2300      	movs	r3, #0
 800333e:	77fb      	strb	r3, [r7, #31]
 8003340:	e118      	b.n	8003574 <UART_SetConfig+0x348>
 8003342:	2302      	movs	r3, #2
 8003344:	77fb      	strb	r3, [r7, #31]
 8003346:	e115      	b.n	8003574 <UART_SetConfig+0x348>
 8003348:	2304      	movs	r3, #4
 800334a:	77fb      	strb	r3, [r7, #31]
 800334c:	e112      	b.n	8003574 <UART_SetConfig+0x348>
 800334e:	2308      	movs	r3, #8
 8003350:	77fb      	strb	r3, [r7, #31]
 8003352:	e10f      	b.n	8003574 <UART_SetConfig+0x348>
 8003354:	2310      	movs	r3, #16
 8003356:	77fb      	strb	r3, [r7, #31]
 8003358:	e10c      	b.n	8003574 <UART_SetConfig+0x348>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a68      	ldr	r2, [pc, #416]	; (8003500 <UART_SetConfig+0x2d4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d120      	bne.n	80033a6 <UART_SetConfig+0x17a>
 8003364:	4b64      	ldr	r3, [pc, #400]	; (80034f8 <UART_SetConfig+0x2cc>)
 8003366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800336e:	2b30      	cmp	r3, #48	; 0x30
 8003370:	d013      	beq.n	800339a <UART_SetConfig+0x16e>
 8003372:	2b30      	cmp	r3, #48	; 0x30
 8003374:	d814      	bhi.n	80033a0 <UART_SetConfig+0x174>
 8003376:	2b20      	cmp	r3, #32
 8003378:	d009      	beq.n	800338e <UART_SetConfig+0x162>
 800337a:	2b20      	cmp	r3, #32
 800337c:	d810      	bhi.n	80033a0 <UART_SetConfig+0x174>
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <UART_SetConfig+0x15c>
 8003382:	2b10      	cmp	r3, #16
 8003384:	d006      	beq.n	8003394 <UART_SetConfig+0x168>
 8003386:	e00b      	b.n	80033a0 <UART_SetConfig+0x174>
 8003388:	2300      	movs	r3, #0
 800338a:	77fb      	strb	r3, [r7, #31]
 800338c:	e0f2      	b.n	8003574 <UART_SetConfig+0x348>
 800338e:	2302      	movs	r3, #2
 8003390:	77fb      	strb	r3, [r7, #31]
 8003392:	e0ef      	b.n	8003574 <UART_SetConfig+0x348>
 8003394:	2304      	movs	r3, #4
 8003396:	77fb      	strb	r3, [r7, #31]
 8003398:	e0ec      	b.n	8003574 <UART_SetConfig+0x348>
 800339a:	2308      	movs	r3, #8
 800339c:	77fb      	strb	r3, [r7, #31]
 800339e:	e0e9      	b.n	8003574 <UART_SetConfig+0x348>
 80033a0:	2310      	movs	r3, #16
 80033a2:	77fb      	strb	r3, [r7, #31]
 80033a4:	e0e6      	b.n	8003574 <UART_SetConfig+0x348>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a56      	ldr	r2, [pc, #344]	; (8003504 <UART_SetConfig+0x2d8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d120      	bne.n	80033f2 <UART_SetConfig+0x1c6>
 80033b0:	4b51      	ldr	r3, [pc, #324]	; (80034f8 <UART_SetConfig+0x2cc>)
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80033ba:	2bc0      	cmp	r3, #192	; 0xc0
 80033bc:	d013      	beq.n	80033e6 <UART_SetConfig+0x1ba>
 80033be:	2bc0      	cmp	r3, #192	; 0xc0
 80033c0:	d814      	bhi.n	80033ec <UART_SetConfig+0x1c0>
 80033c2:	2b80      	cmp	r3, #128	; 0x80
 80033c4:	d009      	beq.n	80033da <UART_SetConfig+0x1ae>
 80033c6:	2b80      	cmp	r3, #128	; 0x80
 80033c8:	d810      	bhi.n	80033ec <UART_SetConfig+0x1c0>
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <UART_SetConfig+0x1a8>
 80033ce:	2b40      	cmp	r3, #64	; 0x40
 80033d0:	d006      	beq.n	80033e0 <UART_SetConfig+0x1b4>
 80033d2:	e00b      	b.n	80033ec <UART_SetConfig+0x1c0>
 80033d4:	2300      	movs	r3, #0
 80033d6:	77fb      	strb	r3, [r7, #31]
 80033d8:	e0cc      	b.n	8003574 <UART_SetConfig+0x348>
 80033da:	2302      	movs	r3, #2
 80033dc:	77fb      	strb	r3, [r7, #31]
 80033de:	e0c9      	b.n	8003574 <UART_SetConfig+0x348>
 80033e0:	2304      	movs	r3, #4
 80033e2:	77fb      	strb	r3, [r7, #31]
 80033e4:	e0c6      	b.n	8003574 <UART_SetConfig+0x348>
 80033e6:	2308      	movs	r3, #8
 80033e8:	77fb      	strb	r3, [r7, #31]
 80033ea:	e0c3      	b.n	8003574 <UART_SetConfig+0x348>
 80033ec:	2310      	movs	r3, #16
 80033ee:	77fb      	strb	r3, [r7, #31]
 80033f0:	e0c0      	b.n	8003574 <UART_SetConfig+0x348>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a44      	ldr	r2, [pc, #272]	; (8003508 <UART_SetConfig+0x2dc>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d125      	bne.n	8003448 <UART_SetConfig+0x21c>
 80033fc:	4b3e      	ldr	r3, [pc, #248]	; (80034f8 <UART_SetConfig+0x2cc>)
 80033fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003406:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800340a:	d017      	beq.n	800343c <UART_SetConfig+0x210>
 800340c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003410:	d817      	bhi.n	8003442 <UART_SetConfig+0x216>
 8003412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003416:	d00b      	beq.n	8003430 <UART_SetConfig+0x204>
 8003418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800341c:	d811      	bhi.n	8003442 <UART_SetConfig+0x216>
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <UART_SetConfig+0x1fe>
 8003422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003426:	d006      	beq.n	8003436 <UART_SetConfig+0x20a>
 8003428:	e00b      	b.n	8003442 <UART_SetConfig+0x216>
 800342a:	2300      	movs	r3, #0
 800342c:	77fb      	strb	r3, [r7, #31]
 800342e:	e0a1      	b.n	8003574 <UART_SetConfig+0x348>
 8003430:	2302      	movs	r3, #2
 8003432:	77fb      	strb	r3, [r7, #31]
 8003434:	e09e      	b.n	8003574 <UART_SetConfig+0x348>
 8003436:	2304      	movs	r3, #4
 8003438:	77fb      	strb	r3, [r7, #31]
 800343a:	e09b      	b.n	8003574 <UART_SetConfig+0x348>
 800343c:	2308      	movs	r3, #8
 800343e:	77fb      	strb	r3, [r7, #31]
 8003440:	e098      	b.n	8003574 <UART_SetConfig+0x348>
 8003442:	2310      	movs	r3, #16
 8003444:	77fb      	strb	r3, [r7, #31]
 8003446:	e095      	b.n	8003574 <UART_SetConfig+0x348>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a2f      	ldr	r2, [pc, #188]	; (800350c <UART_SetConfig+0x2e0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d125      	bne.n	800349e <UART_SetConfig+0x272>
 8003452:	4b29      	ldr	r3, [pc, #164]	; (80034f8 <UART_SetConfig+0x2cc>)
 8003454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003458:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800345c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003460:	d017      	beq.n	8003492 <UART_SetConfig+0x266>
 8003462:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003466:	d817      	bhi.n	8003498 <UART_SetConfig+0x26c>
 8003468:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800346c:	d00b      	beq.n	8003486 <UART_SetConfig+0x25a>
 800346e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003472:	d811      	bhi.n	8003498 <UART_SetConfig+0x26c>
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <UART_SetConfig+0x254>
 8003478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800347c:	d006      	beq.n	800348c <UART_SetConfig+0x260>
 800347e:	e00b      	b.n	8003498 <UART_SetConfig+0x26c>
 8003480:	2301      	movs	r3, #1
 8003482:	77fb      	strb	r3, [r7, #31]
 8003484:	e076      	b.n	8003574 <UART_SetConfig+0x348>
 8003486:	2302      	movs	r3, #2
 8003488:	77fb      	strb	r3, [r7, #31]
 800348a:	e073      	b.n	8003574 <UART_SetConfig+0x348>
 800348c:	2304      	movs	r3, #4
 800348e:	77fb      	strb	r3, [r7, #31]
 8003490:	e070      	b.n	8003574 <UART_SetConfig+0x348>
 8003492:	2308      	movs	r3, #8
 8003494:	77fb      	strb	r3, [r7, #31]
 8003496:	e06d      	b.n	8003574 <UART_SetConfig+0x348>
 8003498:	2310      	movs	r3, #16
 800349a:	77fb      	strb	r3, [r7, #31]
 800349c:	e06a      	b.n	8003574 <UART_SetConfig+0x348>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a1b      	ldr	r2, [pc, #108]	; (8003510 <UART_SetConfig+0x2e4>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d138      	bne.n	800351a <UART_SetConfig+0x2ee>
 80034a8:	4b13      	ldr	r3, [pc, #76]	; (80034f8 <UART_SetConfig+0x2cc>)
 80034aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80034b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034b6:	d017      	beq.n	80034e8 <UART_SetConfig+0x2bc>
 80034b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034bc:	d82a      	bhi.n	8003514 <UART_SetConfig+0x2e8>
 80034be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c2:	d00b      	beq.n	80034dc <UART_SetConfig+0x2b0>
 80034c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c8:	d824      	bhi.n	8003514 <UART_SetConfig+0x2e8>
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <UART_SetConfig+0x2aa>
 80034ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d2:	d006      	beq.n	80034e2 <UART_SetConfig+0x2b6>
 80034d4:	e01e      	b.n	8003514 <UART_SetConfig+0x2e8>
 80034d6:	2300      	movs	r3, #0
 80034d8:	77fb      	strb	r3, [r7, #31]
 80034da:	e04b      	b.n	8003574 <UART_SetConfig+0x348>
 80034dc:	2302      	movs	r3, #2
 80034de:	77fb      	strb	r3, [r7, #31]
 80034e0:	e048      	b.n	8003574 <UART_SetConfig+0x348>
 80034e2:	2304      	movs	r3, #4
 80034e4:	77fb      	strb	r3, [r7, #31]
 80034e6:	e045      	b.n	8003574 <UART_SetConfig+0x348>
 80034e8:	2308      	movs	r3, #8
 80034ea:	77fb      	strb	r3, [r7, #31]
 80034ec:	e042      	b.n	8003574 <UART_SetConfig+0x348>
 80034ee:	bf00      	nop
 80034f0:	efff69f3 	.word	0xefff69f3
 80034f4:	40011000 	.word	0x40011000
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40004400 	.word	0x40004400
 8003500:	40004800 	.word	0x40004800
 8003504:	40004c00 	.word	0x40004c00
 8003508:	40005000 	.word	0x40005000
 800350c:	40011400 	.word	0x40011400
 8003510:	40007800 	.word	0x40007800
 8003514:	2310      	movs	r3, #16
 8003516:	77fb      	strb	r3, [r7, #31]
 8003518:	e02c      	b.n	8003574 <UART_SetConfig+0x348>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a72      	ldr	r2, [pc, #456]	; (80036e8 <UART_SetConfig+0x4bc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d125      	bne.n	8003570 <UART_SetConfig+0x344>
 8003524:	4b71      	ldr	r3, [pc, #452]	; (80036ec <UART_SetConfig+0x4c0>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800352e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003532:	d017      	beq.n	8003564 <UART_SetConfig+0x338>
 8003534:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003538:	d817      	bhi.n	800356a <UART_SetConfig+0x33e>
 800353a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800353e:	d00b      	beq.n	8003558 <UART_SetConfig+0x32c>
 8003540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003544:	d811      	bhi.n	800356a <UART_SetConfig+0x33e>
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <UART_SetConfig+0x326>
 800354a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800354e:	d006      	beq.n	800355e <UART_SetConfig+0x332>
 8003550:	e00b      	b.n	800356a <UART_SetConfig+0x33e>
 8003552:	2300      	movs	r3, #0
 8003554:	77fb      	strb	r3, [r7, #31]
 8003556:	e00d      	b.n	8003574 <UART_SetConfig+0x348>
 8003558:	2302      	movs	r3, #2
 800355a:	77fb      	strb	r3, [r7, #31]
 800355c:	e00a      	b.n	8003574 <UART_SetConfig+0x348>
 800355e:	2304      	movs	r3, #4
 8003560:	77fb      	strb	r3, [r7, #31]
 8003562:	e007      	b.n	8003574 <UART_SetConfig+0x348>
 8003564:	2308      	movs	r3, #8
 8003566:	77fb      	strb	r3, [r7, #31]
 8003568:	e004      	b.n	8003574 <UART_SetConfig+0x348>
 800356a:	2310      	movs	r3, #16
 800356c:	77fb      	strb	r3, [r7, #31]
 800356e:	e001      	b.n	8003574 <UART_SetConfig+0x348>
 8003570:	2310      	movs	r3, #16
 8003572:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800357c:	d15b      	bne.n	8003636 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800357e:	7ffb      	ldrb	r3, [r7, #31]
 8003580:	2b08      	cmp	r3, #8
 8003582:	d828      	bhi.n	80035d6 <UART_SetConfig+0x3aa>
 8003584:	a201      	add	r2, pc, #4	; (adr r2, 800358c <UART_SetConfig+0x360>)
 8003586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358a:	bf00      	nop
 800358c:	080035b1 	.word	0x080035b1
 8003590:	080035b9 	.word	0x080035b9
 8003594:	080035c1 	.word	0x080035c1
 8003598:	080035d7 	.word	0x080035d7
 800359c:	080035c7 	.word	0x080035c7
 80035a0:	080035d7 	.word	0x080035d7
 80035a4:	080035d7 	.word	0x080035d7
 80035a8:	080035d7 	.word	0x080035d7
 80035ac:	080035cf 	.word	0x080035cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035b0:	f7ff f9b0 	bl	8002914 <HAL_RCC_GetPCLK1Freq>
 80035b4:	61b8      	str	r0, [r7, #24]
        break;
 80035b6:	e013      	b.n	80035e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035b8:	f7ff f9c0 	bl	800293c <HAL_RCC_GetPCLK2Freq>
 80035bc:	61b8      	str	r0, [r7, #24]
        break;
 80035be:	e00f      	b.n	80035e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035c0:	4b4b      	ldr	r3, [pc, #300]	; (80036f0 <UART_SetConfig+0x4c4>)
 80035c2:	61bb      	str	r3, [r7, #24]
        break;
 80035c4:	e00c      	b.n	80035e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035c6:	f7ff f893 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 80035ca:	61b8      	str	r0, [r7, #24]
        break;
 80035cc:	e008      	b.n	80035e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035d2:	61bb      	str	r3, [r7, #24]
        break;
 80035d4:	e004      	b.n	80035e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	77bb      	strb	r3, [r7, #30]
        break;
 80035de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d074      	beq.n	80036d0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	005a      	lsls	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	085b      	lsrs	r3, r3, #1
 80035f0:	441a      	add	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	2b0f      	cmp	r3, #15
 8003600:	d916      	bls.n	8003630 <UART_SetConfig+0x404>
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003608:	d212      	bcs.n	8003630 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	b29b      	uxth	r3, r3
 800360e:	f023 030f 	bic.w	r3, r3, #15
 8003612:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	085b      	lsrs	r3, r3, #1
 8003618:	b29b      	uxth	r3, r3
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	b29a      	uxth	r2, r3
 8003620:	89fb      	ldrh	r3, [r7, #14]
 8003622:	4313      	orrs	r3, r2
 8003624:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	89fa      	ldrh	r2, [r7, #14]
 800362c:	60da      	str	r2, [r3, #12]
 800362e:	e04f      	b.n	80036d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	77bb      	strb	r3, [r7, #30]
 8003634:	e04c      	b.n	80036d0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003636:	7ffb      	ldrb	r3, [r7, #31]
 8003638:	2b08      	cmp	r3, #8
 800363a:	d828      	bhi.n	800368e <UART_SetConfig+0x462>
 800363c:	a201      	add	r2, pc, #4	; (adr r2, 8003644 <UART_SetConfig+0x418>)
 800363e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003642:	bf00      	nop
 8003644:	08003669 	.word	0x08003669
 8003648:	08003671 	.word	0x08003671
 800364c:	08003679 	.word	0x08003679
 8003650:	0800368f 	.word	0x0800368f
 8003654:	0800367f 	.word	0x0800367f
 8003658:	0800368f 	.word	0x0800368f
 800365c:	0800368f 	.word	0x0800368f
 8003660:	0800368f 	.word	0x0800368f
 8003664:	08003687 	.word	0x08003687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003668:	f7ff f954 	bl	8002914 <HAL_RCC_GetPCLK1Freq>
 800366c:	61b8      	str	r0, [r7, #24]
        break;
 800366e:	e013      	b.n	8003698 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003670:	f7ff f964 	bl	800293c <HAL_RCC_GetPCLK2Freq>
 8003674:	61b8      	str	r0, [r7, #24]
        break;
 8003676:	e00f      	b.n	8003698 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003678:	4b1d      	ldr	r3, [pc, #116]	; (80036f0 <UART_SetConfig+0x4c4>)
 800367a:	61bb      	str	r3, [r7, #24]
        break;
 800367c:	e00c      	b.n	8003698 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800367e:	f7ff f837 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 8003682:	61b8      	str	r0, [r7, #24]
        break;
 8003684:	e008      	b.n	8003698 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800368a:	61bb      	str	r3, [r7, #24]
        break;
 800368c:	e004      	b.n	8003698 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	77bb      	strb	r3, [r7, #30]
        break;
 8003696:	bf00      	nop
    }

    if (pclk != 0U)
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d018      	beq.n	80036d0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	085a      	lsrs	r2, r3, #1
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	441a      	add	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	2b0f      	cmp	r3, #15
 80036b6:	d909      	bls.n	80036cc <UART_SetConfig+0x4a0>
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036be:	d205      	bcs.n	80036cc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60da      	str	r2, [r3, #12]
 80036ca:	e001      	b.n	80036d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80036dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3720      	adds	r7, #32
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40007c00 	.word	0x40007c00
 80036ec:	40023800 	.word	0x40023800
 80036f0:	00f42400 	.word	0x00f42400

080036f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	f003 0310 	and.w	r3, r3, #16
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d01a      	beq.n	800380a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037f2:	d10a      	bne.n	800380a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00a      	beq.n	800382c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	605a      	str	r2, [r3, #4]
  }
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af02      	add	r7, sp, #8
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003848:	f7fd fc72 	bl	8001130 <HAL_GetTick>
 800384c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b08      	cmp	r3, #8
 800385a:	d10e      	bne.n	800387a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800385c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f81b 	bl	80038a6 <UART_WaitOnFlagUntilTimeout>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e011      	b.n	800389e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2220      	movs	r2, #32
 800387e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b09c      	sub	sp, #112	; 0x70
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	603b      	str	r3, [r7, #0]
 80038b2:	4613      	mov	r3, r2
 80038b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038b6:	e0a7      	b.n	8003a08 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038be:	f000 80a3 	beq.w	8003a08 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c2:	f7fd fc35 	bl	8001130 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d302      	bcc.n	80038d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80038d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d13f      	bne.n	8003958 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038e0:	e853 3f00 	ldrex	r3, [r3]
 80038e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80038e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038ec:	667b      	str	r3, [r7, #100]	; 0x64
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038f8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80038fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80038fe:	e841 2300 	strex	r3, r2, [r1]
 8003902:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1e6      	bne.n	80038d8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3308      	adds	r3, #8
 8003910:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003914:	e853 3f00 	ldrex	r3, [r3]
 8003918:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800391a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391c:	f023 0301 	bic.w	r3, r3, #1
 8003920:	663b      	str	r3, [r7, #96]	; 0x60
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	3308      	adds	r3, #8
 8003928:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800392a:	64ba      	str	r2, [r7, #72]	; 0x48
 800392c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003930:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003932:	e841 2300 	strex	r3, r2, [r1]
 8003936:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1e5      	bne.n	800390a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2220      	movs	r2, #32
 8003942:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2220      	movs	r2, #32
 8003948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e068      	b.n	8003a2a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b00      	cmp	r3, #0
 8003964:	d050      	beq.n	8003a08 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003970:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003974:	d148      	bne.n	8003a08 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800397e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003988:	e853 3f00 	ldrex	r3, [r3]
 800398c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003994:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399e:	637b      	str	r3, [r7, #52]	; 0x34
 80039a0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039a6:	e841 2300 	strex	r3, r2, [r1]
 80039aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1e6      	bne.n	8003980 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	3308      	adds	r3, #8
 80039b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	e853 3f00 	ldrex	r3, [r3]
 80039c0:	613b      	str	r3, [r7, #16]
   return(result);
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f023 0301 	bic.w	r3, r3, #1
 80039c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	3308      	adds	r3, #8
 80039d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80039d2:	623a      	str	r2, [r7, #32]
 80039d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d6:	69f9      	ldr	r1, [r7, #28]
 80039d8:	6a3a      	ldr	r2, [r7, #32]
 80039da:	e841 2300 	strex	r3, r2, [r1]
 80039de:	61bb      	str	r3, [r7, #24]
   return(result);
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1e5      	bne.n	80039b2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2220      	movs	r2, #32
 80039ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e010      	b.n	8003a2a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	69da      	ldr	r2, [r3, #28]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	4013      	ands	r3, r2
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	bf0c      	ite	eq
 8003a18:	2301      	moveq	r3, #1
 8003a1a:	2300      	movne	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	461a      	mov	r2, r3
 8003a20:	79fb      	ldrb	r3, [r7, #7]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	f43f af48 	beq.w	80038b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3770      	adds	r7, #112	; 0x70
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	6812      	ldr	r2, [r2, #0]
 8003a4c:	f023 0101 	bic.w	r1, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d102      	bne.n	8003a64 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8003a5e:	2340      	movs	r3, #64	; 0x40
 8003a60:	617b      	str	r3, [r7, #20]
 8003a62:	e001      	b.n	8003a68 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8003a64:	2300      	movs	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8003a74:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8003a7a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8003a80:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8003a86:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8003a8c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8003a92:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8003a98:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8003a9e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8003aa4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 8003acc:	4b20      	ldr	r3, [pc, #128]	; (8003b50 <FMC_NORSRAM_Init+0x11c>)
 8003ace:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ad6:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ade:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8003ae6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	43db      	mvns	r3, r3
 8003af6:	ea02 0103 	and.w	r1, r2, r3
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4319      	orrs	r1, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b10:	d10c      	bne.n	8003b2c <FMC_NORSRAM_Init+0xf8>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d008      	beq.n	8003b2c <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d006      	beq.n	8003b42 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	371c      	adds	r7, #28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	0008fb7f 	.word	0x0008fb7f

08003b54 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b6a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	021b      	lsls	r3, r3, #8
 8003b80:	431a      	orrs	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	041b      	lsls	r3, r3, #16
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	051b      	lsls	r3, r3, #20
 8003b92:	431a      	orrs	r2, r3
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	3b02      	subs	r3, #2
 8003b9a:	061b      	lsls	r3, r3, #24
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	3201      	adds	r2, #1
 8003ba8:	4319      	orrs	r1, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bbc:	d113      	bne.n	8003be6 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003bc6:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	051b      	lsls	r3, r3, #20
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	431a      	orrs	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	371c      	adds	r7, #28
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c08:	d11d      	bne.n	8003c46 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003c12:	4b13      	ldr	r3, [pc, #76]	; (8003c60 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	6811      	ldr	r1, [r2, #0]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	6852      	ldr	r2, [r2, #4]
 8003c1e:	0112      	lsls	r2, r2, #4
 8003c20:	4311      	orrs	r1, r2
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	6892      	ldr	r2, [r2, #8]
 8003c26:	0212      	lsls	r2, r2, #8
 8003c28:	4311      	orrs	r1, r2
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	6992      	ldr	r2, [r2, #24]
 8003c2e:	4311      	orrs	r1, r2
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	68d2      	ldr	r2, [r2, #12]
 8003c34:	0412      	lsls	r2, r2, #16
 8003c36:	430a      	orrs	r2, r1
 8003c38:	ea43 0102 	orr.w	r1, r3, r2
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003c44:	e005      	b.n	8003c52 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8003c4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	cff00000 	.word	0xcff00000

08003c64 <get_time_hour>:
//  {
//    ;
//  }
}

void get_time_hour(wiz_NetInfo *net_info){
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
	  int retval = 0;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61fb      	str	r3, [r7, #28]
	  int hour;
	  uint32_t start_msec = 0;
 8003c70:	2300      	movs	r3, #0
 8003c72:	61bb      	str	r3, [r7, #24]
	  datetime time;

	  wizchip_network_initialize(net_info);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f002 fc74 	bl	8006562 <wizchip_network_initialize>
	  wizchip_network_information(net_info);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f002 fc84 	bl	8006588 <wizchip_network_information>

	  SNTP_init(SOCKET_SNTP, g_sntp_server_ip, TIMEZONE, g_sntp_buf);
 8003c80:	4b17      	ldr	r3, [pc, #92]	; (8003ce0 <get_time_hour+0x7c>)
 8003c82:	2226      	movs	r2, #38	; 0x26
 8003c84:	4917      	ldr	r1, [pc, #92]	; (8003ce4 <get_time_hour+0x80>)
 8003c86:	2000      	movs	r0, #0
 8003c88:	f002 f886 	bl	8005d98 <SNTP_init>

	  start_msec = wizchip_get_msec_tick();
 8003c8c:	f002 fd60 	bl	8006750 <wizchip_get_msec_tick>
 8003c90:	61b8      	str	r0, [r7, #24]

	  /* Get time */
	  do
	  {
	    retval = SNTP_run(&time);
 8003c92:	f107 030c 	add.w	r3, r7, #12
 8003c96:	4618      	mov	r0, r3
 8003c98:	f002 f8fa 	bl	8005e90 <SNTP_run>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	61fb      	str	r3, [r7, #28]

	    if (retval == 1)
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d009      	beq.n	8003cba <get_time_hour+0x56>
	    {
	      break;
	    }
	  } while (wizchip_get_msec_tick() - start_msec < STNP_TIMEOUT);
 8003ca6:	f002 fd53 	bl	8006750 <wizchip_get_msec_tick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	f242 720f 	movw	r2, #9999	; 0x270f
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d9ec      	bls.n	8003c92 <get_time_hour+0x2e>
 8003cb8:	e000      	b.n	8003cbc <get_time_hour+0x58>
	      break;
 8003cba:	bf00      	nop

	  if (retval != 1)
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d003      	beq.n	8003cca <get_time_hour+0x66>
	  {
	    printf(" SNTP failed : %d\n", retval);
 8003cc2:	69f9      	ldr	r1, [r7, #28]
 8003cc4:	4808      	ldr	r0, [pc, #32]	; (8003ce8 <get_time_hour+0x84>)
 8003cc6:	f002 feab 	bl	8006a20 <iprintf>
	//      ;
	  }

//	  printf(" Current time : %d-%d-%d, %d:%d:%d\n", time.yy, time.mo, time.dd, time.hh, time.mm, time.ss);

	  hour = time.hh;
 8003cca:	7c3b      	ldrb	r3, [r7, #16]
 8003ccc:	617b      	str	r3, [r7, #20]
	  printf(" Current Hours : %d", hour);
 8003cce:	6979      	ldr	r1, [r7, #20]
 8003cd0:	4806      	ldr	r0, [pc, #24]	; (8003cec <get_time_hour+0x88>)
 8003cd2:	f002 fea5 	bl	8006a20 <iprintf>

	  return hour;
 8003cd6:	bf00      	nop
}
 8003cd8:	3720      	adds	r7, #32
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	200000c4 	.word	0x200000c4
 8003ce4:	2000000c 	.word	0x2000000c
 8003ce8:	080076a8 	.word	0x080076a8
 8003cec:	080076e0 	.word	0x080076e0

08003cf0 <get_time_minutes>:

void get_time_minutes(wiz_NetInfo *net_info){
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
	  int retval = 0;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61fb      	str	r3, [r7, #28]
	  int minutes;
	  uint32_t start_msec = 0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61bb      	str	r3, [r7, #24]
	  datetime time;

	  wizchip_network_initialize(net_info);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f002 fc2e 	bl	8006562 <wizchip_network_initialize>
	  wizchip_network_information(net_info);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f002 fc3e 	bl	8006588 <wizchip_network_information>

	  SNTP_init(SOCKET_SNTP, g_sntp_server_ip, TIMEZONE, g_sntp_buf);
 8003d0c:	4b17      	ldr	r3, [pc, #92]	; (8003d6c <get_time_minutes+0x7c>)
 8003d0e:	2226      	movs	r2, #38	; 0x26
 8003d10:	4917      	ldr	r1, [pc, #92]	; (8003d70 <get_time_minutes+0x80>)
 8003d12:	2000      	movs	r0, #0
 8003d14:	f002 f840 	bl	8005d98 <SNTP_init>

	  start_msec = wizchip_get_msec_tick();
 8003d18:	f002 fd1a 	bl	8006750 <wizchip_get_msec_tick>
 8003d1c:	61b8      	str	r0, [r7, #24]

	  /* Get time */
	  do
	  {
	    retval = SNTP_run(&time);
 8003d1e:	f107 030c 	add.w	r3, r7, #12
 8003d22:	4618      	mov	r0, r3
 8003d24:	f002 f8b4 	bl	8005e90 <SNTP_run>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	61fb      	str	r3, [r7, #28]

	    if (retval == 1)
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d009      	beq.n	8003d46 <get_time_minutes+0x56>
	    {
	      break;
	    }
	  } while (wizchip_get_msec_tick() - start_msec < STNP_TIMEOUT);
 8003d32:	f002 fd0d 	bl	8006750 <wizchip_get_msec_tick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d9ec      	bls.n	8003d1e <get_time_minutes+0x2e>
 8003d44:	e000      	b.n	8003d48 <get_time_minutes+0x58>
	      break;
 8003d46:	bf00      	nop

	  if (retval != 1)
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d003      	beq.n	8003d56 <get_time_minutes+0x66>
	  {
	    printf(" SNTP failed : %d\n", retval);
 8003d4e:	69f9      	ldr	r1, [r7, #28]
 8003d50:	4808      	ldr	r0, [pc, #32]	; (8003d74 <get_time_minutes+0x84>)
 8003d52:	f002 fe65 	bl	8006a20 <iprintf>
	//      ;
	  }

//	  printf(" Current time : %d-%d-%d, %d:%d:%d\n", time.yy, time.mo, time.dd, time.hh, time.mm, time.ss);

	  minutes = time.mm;
 8003d56:	7c7b      	ldrb	r3, [r7, #17]
 8003d58:	617b      	str	r3, [r7, #20]
	  printf(" Current minutes : %d", minutes);
 8003d5a:	6979      	ldr	r1, [r7, #20]
 8003d5c:	4806      	ldr	r0, [pc, #24]	; (8003d78 <get_time_minutes+0x88>)
 8003d5e:	f002 fe5f 	bl	8006a20 <iprintf>

	  return minutes;
 8003d62:	bf00      	nop
}
 8003d64:	3720      	adds	r7, #32
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	200000c4 	.word	0x200000c4
 8003d70:	2000000c 	.word	0x2000000c
 8003d74:	080076a8 	.word	0x080076a8
 8003d78:	080076f4 	.word	0x080076f4

08003d7c <WIZCHIP_WRITE>:
/***********************
 * Basic I/O  Function *
 ***********************/
 
void     WIZCHIP_WRITE(uint32_t AddrSel, uint16_t wb )
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	807b      	strh	r3, [r7, #2]
   WIZCHIP_CRITICAL_ENTER();
 8003d88:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <WIZCHIP_WRITE+0x38>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003d8e:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <WIZCHIP_WRITE+0x38>)
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	4798      	blx	r3
#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if(_WIZCHIP_IO_BUS_WIDTH_ == 8)
      WIZCHIP.IF.BUS._write_data(AddrSel,  (uint8_t)(wb>>8));
      WIZCHIP.IF.BUS._write_data(WIZCHIP_OFFSET_INC(AddrSel,1),(uint8_t)wb);
   #elif(_WIZCHIP_IO_BUS_WIDTH_ == 16)
      WIZCHIP.IF.BUS._write_data(AddrSel,  wb);   
 8003d94:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <WIZCHIP_WRITE+0x38>)
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	887a      	ldrh	r2, [r7, #2]
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	4798      	blx	r3
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 8003da0:	4b04      	ldr	r3, [pc, #16]	; (8003db4 <WIZCHIP_WRITE+0x38>)
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003da6:	4b03      	ldr	r3, [pc, #12]	; (8003db4 <WIZCHIP_WRITE+0x38>)
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	4798      	blx	r3
}
 8003dac:	bf00      	nop
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	20000014 	.word	0x20000014

08003db8 <WIZCHIP_READ>:

uint16_t WIZCHIP_READ(uint32_t AddrSel)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
   uint16_t ret;

   WIZCHIP_CRITICAL_ENTER();
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <WIZCHIP_READ+0x38>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003dc6:	4b0a      	ldr	r3, [pc, #40]	; (8003df0 <WIZCHIP_READ+0x38>)
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	4798      	blx	r3
#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if (_WIZCHIP_IO_BUS_WIDTH_ == 8)
      ret = (((uint16_t)WIZCHIP.IF.BUS._read_data(AddrSel)) << 8) | 
            (((uint16_t)WIZCHIP.IF.BUS._read_data(WIZCHIP_OFFSET_INC(AddrSel,1))) & 0x00FF) ;   
   #elif(_WIZCHIP_IO_BUS_WIDTH_ == 16)
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 8003dcc:	4b08      	ldr	r3, [pc, #32]	; (8003df0 <WIZCHIP_READ+0x38>)
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	4798      	blx	r3
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	81fb      	strh	r3, [r7, #14]
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 8003dd8:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <WIZCHIP_READ+0x38>)
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003dde:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <WIZCHIP_READ+0x38>)
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	4798      	blx	r3
   return ret;
 8003de4:	89fb      	ldrh	r3, [r7, #14]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	20000014 	.word	0x20000014

08003df4 <setTMSR>:


void setTMSR(uint8_t sn,uint8_t tmsr)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	460a      	mov	r2, r1
 8003dfe:	71fb      	strb	r3, [r7, #7]
 8003e00:	4613      	mov	r3, r2
 8003e02:	71bb      	strb	r3, [r7, #6]
   uint16_t tmem;
   tmem = WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)));
 8003e04:	79fb      	ldrb	r3, [r7, #7]
 8003e06:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003e0a:	3320      	adds	r3, #32
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff ffd3 	bl	8003db8 <WIZCHIP_READ>
 8003e12:	4603      	mov	r3, r0
 8003e14:	81fb      	strh	r3, [r7, #14]
   if(sn & 0x01)  tmem = (tmem & 0xFF00) | (((uint16_t)tmsr ) & 0x00FF) ;
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00a      	beq.n	8003e36 <setTMSR+0x42>
 8003e20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e24:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e28:	b21a      	sxth	r2, r3
 8003e2a:	79bb      	ldrb	r3, [r7, #6]
 8003e2c:	b21b      	sxth	r3, r3
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	b21b      	sxth	r3, r3
 8003e32:	81fb      	strh	r3, [r7, #14]
 8003e34:	e009      	b.n	8003e4a <setTMSR+0x56>
   else tmem =  (tmem & 0x00FF) | (((uint16_t)tmsr) << 8) ;
 8003e36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	b21a      	sxth	r2, r3
 8003e3e:	79bb      	ldrb	r3, [r7, #6]
 8003e40:	021b      	lsls	r3, r3, #8
 8003e42:	b21b      	sxth	r3, r3
 8003e44:	4313      	orrs	r3, r2
 8003e46:	b21b      	sxth	r3, r3
 8003e48:	81fb      	strh	r3, [r7, #14]
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)),tmem);
 8003e4a:	79fb      	ldrb	r3, [r7, #7]
 8003e4c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003e50:	3320      	adds	r3, #32
 8003e52:	461a      	mov	r2, r3
 8003e54:	89fb      	ldrh	r3, [r7, #14]
 8003e56:	4619      	mov	r1, r3
 8003e58:	4610      	mov	r0, r2
 8003e5a:	f7ff ff8f 	bl	8003d7c <WIZCHIP_WRITE>
}
 8003e5e:	bf00      	nop
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <getTMSR>:
   
uint8_t getTMSR(uint8_t sn)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b082      	sub	sp, #8
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	71fb      	strb	r3, [r7, #7]
   if(sn & 0x01)
 8003e70:	79fb      	ldrb	r3, [r7, #7]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d009      	beq.n	8003e8e <getTMSR+0x28>
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) & 0x00FF);
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003e80:	3320      	adds	r3, #32
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff ff98 	bl	8003db8 <WIZCHIP_READ>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	e00a      	b.n	8003ea4 <getTMSR+0x3e>
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) >> 8);
 8003e8e:	79fb      	ldrb	r3, [r7, #7]
 8003e90:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003e94:	3320      	adds	r3, #32
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff ff8e 	bl	8003db8 <WIZCHIP_READ>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	0a1b      	lsrs	r3, r3, #8
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	b2db      	uxtb	r3, r3
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <setRMSR>:

void setRMSR(uint8_t sn,uint8_t rmsr)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	460a      	mov	r2, r1
 8003eb6:	71fb      	strb	r3, [r7, #7]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	71bb      	strb	r3, [r7, #6]
   uint16_t rmem;
   rmem = WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)));
 8003ebc:	79fb      	ldrb	r3, [r7, #7]
 8003ebe:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003ec2:	3328      	adds	r3, #40	; 0x28
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff ff77 	bl	8003db8 <WIZCHIP_READ>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	81fb      	strh	r3, [r7, #14]
   if(sn & 0x01)  rmem = (rmem & 0xFF00) | (((uint16_t)rmsr ) & 0x00FF) ;
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <setRMSR+0x42>
 8003ed8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003edc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ee0:	b21a      	sxth	r2, r3
 8003ee2:	79bb      	ldrb	r3, [r7, #6]
 8003ee4:	b21b      	sxth	r3, r3
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	b21b      	sxth	r3, r3
 8003eea:	81fb      	strh	r3, [r7, #14]
 8003eec:	e009      	b.n	8003f02 <setRMSR+0x56>
   else rmem =  (rmem & 0x00FF) | (((uint16_t)rmsr) << 8) ;
 8003eee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	b21a      	sxth	r2, r3
 8003ef6:	79bb      	ldrb	r3, [r7, #6]
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	b21b      	sxth	r3, r3
 8003efc:	4313      	orrs	r3, r2
 8003efe:	b21b      	sxth	r3, r3
 8003f00:	81fb      	strh	r3, [r7, #14]
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)),rmem);
 8003f02:	79fb      	ldrb	r3, [r7, #7]
 8003f04:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003f08:	3328      	adds	r3, #40	; 0x28
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	89fb      	ldrh	r3, [r7, #14]
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4610      	mov	r0, r2
 8003f12:	f7ff ff33 	bl	8003d7c <WIZCHIP_WRITE>
}
 8003f16:	bf00      	nop
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <getSn_TX_FSR>:
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) & 0x00FF);
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) >> 8);
}

uint32_t getSn_TX_FSR(uint8_t sn)
{
 8003f1e:	b590      	push	{r4, r7, lr}
 8003f20:	b085      	sub	sp, #20
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	4603      	mov	r3, r0
 8003f26:	71fb      	strb	r3, [r7, #7]
   uint32_t free_tx_size=0;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	60bb      	str	r3, [r7, #8]
   uint32_t free_tx_size1=1;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	60fb      	str	r3, [r7, #12]
   while(1)
   {
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 8003f30:	79fb      	ldrb	r3, [r7, #7]
 8003f32:	3308      	adds	r3, #8
 8003f34:	019b      	lsls	r3, r3, #6
 8003f36:	3324      	adds	r3, #36	; 0x24
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff ff3d 	bl	8003db8 <WIZCHIP_READ>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	041c      	lsls	r4, r3, #16
                     (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),2))) & 0x0000FFFF);                           // read
 8003f42:	79fb      	ldrb	r3, [r7, #7]
 8003f44:	3308      	adds	r3, #8
 8003f46:	019b      	lsls	r3, r3, #6
 8003f48:	3326      	adds	r3, #38	; 0x26
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff ff34 	bl	8003db8 <WIZCHIP_READ>
 8003f50:	4603      	mov	r3, r0
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 8003f52:	4323      	orrs	r3, r4
 8003f54:	60bb      	str	r3, [r7, #8]
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d002      	beq.n	8003f64 <getSn_TX_FSR+0x46>
      free_tx_size1 = free_tx_size;             // save second value into first                                                   
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	60fb      	str	r3, [r7, #12]
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 8003f62:	e7e5      	b.n	8003f30 <getSn_TX_FSR+0x12>
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 8003f64:	bf00      	nop
   }                                                                       
   return free_tx_size;                                                    
 8003f66:	68bb      	ldr	r3, [r7, #8]
}                                                                          
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd90      	pop	{r4, r7, pc}

08003f70 <getSn_RX_RSR>:

uint32_t getSn_RX_RSR(uint8_t sn)
{
 8003f70:	b590      	push	{r4, r7, lr}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	4603      	mov	r3, r0
 8003f78:	71fb      	strb	r3, [r7, #7]
   uint32_t received_rx_size=0;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60bb      	str	r3, [r7, #8]
   uint32_t received_rx_size1=1;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	60fb      	str	r3, [r7, #12]
   while(1)
   {
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8003f82:	79fb      	ldrb	r3, [r7, #7]
 8003f84:	3308      	adds	r3, #8
 8003f86:	019b      	lsls	r3, r3, #6
 8003f88:	3328      	adds	r3, #40	; 0x28
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff ff14 	bl	8003db8 <WIZCHIP_READ>
 8003f90:	4603      	mov	r3, r0
 8003f92:	041c      	lsls	r4, r3, #16
                         (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),2))) & 0x0000FFFF);
 8003f94:	79fb      	ldrb	r3, [r7, #7]
 8003f96:	3308      	adds	r3, #8
 8003f98:	019b      	lsls	r3, r3, #6
 8003f9a:	332a      	adds	r3, #42	; 0x2a
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff ff0b 	bl	8003db8 <WIZCHIP_READ>
 8003fa2:	4603      	mov	r3, r0
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8003fa4:	4323      	orrs	r3, r4
 8003fa6:	60bb      	str	r3, [r7, #8]
      if(received_rx_size == received_rx_size1) break;                                                                         
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d002      	beq.n	8003fb6 <getSn_RX_RSR+0x46>
      received_rx_size1 = received_rx_size;                                      // if first == sencond, Sn_RX_RSR value is valid.
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	60fb      	str	r3, [r7, #12]
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8003fb4:	e7e5      	b.n	8003f82 <getSn_RX_RSR+0x12>
      if(received_rx_size == received_rx_size1) break;                                                                         
 8003fb6:	bf00      	nop
   }                                                                             // save second value into first                
   return received_rx_size + (uint32_t)((sock_pack_info[sn] & 0x02) ? 1 : 0);   
 8003fb8:	79fb      	ldrb	r3, [r7, #7]
 8003fba:	4a05      	ldr	r2, [pc, #20]	; (8003fd0 <getSn_RX_RSR+0x60>)
 8003fbc:	5cd3      	ldrb	r3, [r2, r3]
 8003fbe:	105b      	asrs	r3, r3, #1
 8003fc0:	f003 0201 	and.w	r2, r3, #1
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	4413      	add	r3, r2
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd90      	pop	{r4, r7, pc}
 8003fd0:	200008d8 	.word	0x200008d8

08003fd4 <wiz_send_data>:


void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
 8003fe0:	73fb      	strb	r3, [r7, #15]
   uint32_t i = 0;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
   if(len == 0)  return;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d021      	beq.n	8004030 <wiz_send_data+0x5c>
   
   for(i = 0; i < len ; i += 2)
 8003fec:	2300      	movs	r3, #0
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	e019      	b.n	8004026 <wiz_send_data+0x52>
      setSn_TX_FIFOR(sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
 8003ff4:	3308      	adds	r3, #8
 8003ff6:	019b      	lsls	r3, r3, #6
 8003ff8:	332e      	adds	r3, #46	; 0x2e
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	4413      	add	r3, r2
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	021b      	lsls	r3, r3, #8
 8004006:	b21a      	sxth	r2, r3
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	3301      	adds	r3, #1
 800400c:	68b9      	ldr	r1, [r7, #8]
 800400e:	440b      	add	r3, r1
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	b21b      	sxth	r3, r3
 8004014:	4313      	orrs	r3, r2
 8004016:	b21b      	sxth	r3, r3
 8004018:	b29b      	uxth	r3, r3
 800401a:	4619      	mov	r1, r3
 800401c:	f7ff feae 	bl	8003d7c <WIZCHIP_WRITE>
   for(i = 0; i < len ; i += 2)
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	3302      	adds	r3, #2
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	429a      	cmp	r2, r3
 800402c:	d3e1      	bcc.n	8003ff2 <wiz_send_data+0x1e>
 800402e:	e000      	b.n	8004032 <wiz_send_data+0x5e>
   if(len == 0)  return;
 8004030:	bf00      	nop
}
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	4603      	mov	r3, r0
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
 8004044:	73fb      	strb	r3, [r7, #15]
   uint16_t rd = 0;
 8004046:	2300      	movs	r3, #0
 8004048:	82fb      	strh	r3, [r7, #22]
   uint32_t i = 0;
 800404a:	2300      	movs	r3, #0
 800404c:	613b      	str	r3, [r7, #16]
   
   if(len == 0) return;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d02c      	beq.n	80040ae <wiz_recv_data+0x76>
      
   for(i = 0; i < len; i++)
 8004054:	2300      	movs	r3, #0
 8004056:	613b      	str	r3, [r7, #16]
 8004058:	e01f      	b.n	800409a <wiz_recv_data+0x62>
   {
      if((i & 0x01)==0)
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d111      	bne.n	8004088 <wiz_recv_data+0x50>
      {
         rd = getSn_RX_FIFOR(sn);
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	3308      	adds	r3, #8
 8004068:	019b      	lsls	r3, r3, #6
 800406a:	3330      	adds	r3, #48	; 0x30
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff fea3 	bl	8003db8 <WIZCHIP_READ>
 8004072:	4603      	mov	r3, r0
 8004074:	82fb      	strh	r3, [r7, #22]
         wizdata[i]   = (uint8_t)(rd >> 8);
 8004076:	8afb      	ldrh	r3, [r7, #22]
 8004078:	0a1b      	lsrs	r3, r3, #8
 800407a:	b299      	uxth	r1, r3
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	4413      	add	r3, r2
 8004082:	b2ca      	uxtb	r2, r1
 8004084:	701a      	strb	r2, [r3, #0]
 8004086:	e005      	b.n	8004094 <wiz_recv_data+0x5c>
      }
      else  wizdata[i] = (uint8_t)rd;  // For checking the memory access violation
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	4413      	add	r3, r2
 800408e:	8afa      	ldrh	r2, [r7, #22]
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < len; i++)
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	3301      	adds	r3, #1
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d3db      	bcc.n	800405a <wiz_recv_data+0x22>
   }
   sock_remained_byte[sn] = (uint8_t)rd; // back up the remaind fifo byte.
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
 80040a4:	8afa      	ldrh	r2, [r7, #22]
 80040a6:	b2d1      	uxtb	r1, r2
 80040a8:	4a03      	ldr	r2, [pc, #12]	; (80040b8 <wiz_recv_data+0x80>)
 80040aa:	54d1      	strb	r1, [r2, r3]
 80040ac:	e000      	b.n	80040b0 <wiz_recv_data+0x78>
   if(len == 0) return;
 80040ae:	bf00      	nop
}
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	200008e0 	.word	0x200008e0

080040bc <wiz_recv_ignore>:

void wiz_recv_ignore(uint8_t sn, uint32_t len)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	4603      	mov	r3, r0
 80040c4:	6039      	str	r1, [r7, #0]
 80040c6:	71fb      	strb	r3, [r7, #7]
   uint32_t i = 0;
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]
   for(i = 0; i < len ; i += 2) getSn_RX_FIFOR(sn);
 80040cc:	2300      	movs	r3, #0
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	e009      	b.n	80040e6 <wiz_recv_ignore+0x2a>
 80040d2:	79fb      	ldrb	r3, [r7, #7]
 80040d4:	3308      	adds	r3, #8
 80040d6:	019b      	lsls	r3, r3, #6
 80040d8:	3330      	adds	r3, #48	; 0x30
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff fe6c 	bl	8003db8 <WIZCHIP_READ>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3302      	adds	r3, #2
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d3f1      	bcc.n	80040d2 <wiz_recv_ignore+0x16>
}
 80040ee:	bf00      	nop
 80040f0:	bf00      	nop
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80040f8:	b590      	push	{r4, r7, lr}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	4604      	mov	r4, r0
 8004100:	4608      	mov	r0, r1
 8004102:	4611      	mov	r1, r2
 8004104:	461a      	mov	r2, r3
 8004106:	4623      	mov	r3, r4
 8004108:	71fb      	strb	r3, [r7, #7]
 800410a:	4603      	mov	r3, r0
 800410c:	71bb      	strb	r3, [r7, #6]
 800410e:	460b      	mov	r3, r1
 8004110:	80bb      	strh	r3, [r7, #4]
 8004112:	4613      	mov	r3, r2
 8004114:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8004116:	79fb      	ldrb	r3, [r7, #7]
 8004118:	2b08      	cmp	r3, #8
 800411a:	d902      	bls.n	8004122 <socket+0x2a>
 800411c:	f04f 33ff 	mov.w	r3, #4294967295
 8004120:	e0f6      	b.n	8004310 <socket+0x218>
	switch(protocol)
 8004122:	79bb      	ldrb	r3, [r7, #6]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d005      	beq.n	8004134 <socket+0x3c>
 8004128:	2b00      	cmp	r3, #0
 800412a:	dd32      	ble.n	8004192 <socket+0x9a>
 800412c:	3b02      	subs	r3, #2
 800412e:	2b02      	cmp	r3, #2
 8004130:	d82f      	bhi.n	8004192 <socket+0x9a>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8004132:	e032      	b.n	800419a <socket+0xa2>
            getSIPR((uint8_t*)&taddr);
 8004134:	2018      	movs	r0, #24
 8004136:	f7ff fe3f 	bl	8003db8 <WIZCHIP_READ>
 800413a:	4603      	mov	r3, r0
 800413c:	0a1b      	lsrs	r3, r3, #8
 800413e:	b29a      	uxth	r2, r3
 8004140:	f107 030c 	add.w	r3, r7, #12
 8004144:	b2d2      	uxtb	r2, r2
 8004146:	701a      	strb	r2, [r3, #0]
 8004148:	2018      	movs	r0, #24
 800414a:	f7ff fe35 	bl	8003db8 <WIZCHIP_READ>
 800414e:	4603      	mov	r3, r0
 8004150:	461a      	mov	r2, r3
 8004152:	f107 030c 	add.w	r3, r7, #12
 8004156:	3301      	adds	r3, #1
 8004158:	b2d2      	uxtb	r2, r2
 800415a:	701a      	strb	r2, [r3, #0]
 800415c:	201a      	movs	r0, #26
 800415e:	f7ff fe2b 	bl	8003db8 <WIZCHIP_READ>
 8004162:	4603      	mov	r3, r0
 8004164:	0a1b      	lsrs	r3, r3, #8
 8004166:	b29a      	uxth	r2, r3
 8004168:	f107 030c 	add.w	r3, r7, #12
 800416c:	3302      	adds	r3, #2
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	701a      	strb	r2, [r3, #0]
 8004172:	201a      	movs	r0, #26
 8004174:	f7ff fe20 	bl	8003db8 <WIZCHIP_READ>
 8004178:	4603      	mov	r3, r0
 800417a:	461a      	mov	r2, r3
 800417c:	f107 030c 	add.w	r3, r7, #12
 8004180:	3303      	adds	r3, #3
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	701a      	strb	r2, [r3, #0]
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d105      	bne.n	8004198 <socket+0xa0>
 800418c:	f06f 0302 	mvn.w	r3, #2
 8004190:	e0be      	b.n	8004310 <socket+0x218>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8004192:	f06f 0304 	mvn.w	r3, #4
 8004196:	e0bb      	b.n	8004310 <socket+0x218>
	    break;
 8004198:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800419a:	78fb      	ldrb	r3, [r7, #3]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <socket+0xb2>
 80041a4:	f06f 0305 	mvn.w	r3, #5
 80041a8:	e0b2      	b.n	8004310 <socket+0x218>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80041aa:	78fb      	ldrb	r3, [r7, #3]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d01c      	beq.n	80041ea <socket+0xf2>
	{
   	switch(protocol)
 80041b0:	79bb      	ldrb	r3, [r7, #6]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d002      	beq.n	80041bc <socket+0xc4>
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d008      	beq.n	80041cc <socket+0xd4>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80041ba:	e016      	b.n	80041ea <socket+0xf2>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK|SF_TCP_ALIGN))==0) return SOCKERR_SOCKFLAG;
 80041bc:	78fb      	ldrb	r3, [r7, #3]
 80041be:	f003 0323 	and.w	r3, r3, #35	; 0x23
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10e      	bne.n	80041e4 <socket+0xec>
 80041c6:	f06f 0305 	mvn.w	r3, #5
 80041ca:	e0a1      	b.n	8004310 <socket+0x218>
   	      if(flag & SF_IGMP_VER2)
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	f003 0320 	and.w	r3, r3, #32
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d008      	beq.n	80041e8 <socket+0xf0>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80041d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	db04      	blt.n	80041e8 <socket+0xf0>
 80041de:	f06f 0305 	mvn.w	r3, #5
 80041e2:	e095      	b.n	8004310 <socket+0x218>
   	      break;
 80041e4:	bf00      	nop
 80041e6:	e000      	b.n	80041ea <socket+0xf2>
   	      break;
 80041e8:	bf00      	nop
   	}
   }
	close(sn);
 80041ea:	79fb      	ldrb	r3, [r7, #7]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 f89d 	bl	800432c <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
 80041f2:	79fb      	ldrb	r3, [r7, #7]
 80041f4:	3308      	adds	r3, #8
 80041f6:	019b      	lsls	r3, r3, #6
 80041f8:	4618      	mov	r0, r3
 80041fa:	79bb      	ldrb	r3, [r7, #6]
 80041fc:	b21a      	sxth	r2, r3
 80041fe:	78fb      	ldrb	r3, [r7, #3]
 8004200:	b21b      	sxth	r3, r3
 8004202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004206:	b21b      	sxth	r3, r3
 8004208:	4313      	orrs	r3, r2
 800420a:	b21a      	sxth	r2, r3
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	01db      	lsls	r3, r3, #7
 8004210:	b21b      	sxth	r3, r3
 8004212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004216:	b21b      	sxth	r3, r3
 8004218:	4313      	orrs	r3, r2
 800421a:	b21b      	sxth	r3, r3
 800421c:	b29b      	uxth	r3, r3
 800421e:	4619      	mov	r1, r3
 8004220:	f7ff fdac 	bl	8003d7c <WIZCHIP_WRITE>
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
    #endif
	if(!port)
 8004224:	88bb      	ldrh	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d110      	bne.n	800424c <socket+0x154>
	{
	   port = sock_any_port++;
 800422a:	4b3b      	ldr	r3, [pc, #236]	; (8004318 <socket+0x220>)
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	b291      	uxth	r1, r2
 8004232:	4a39      	ldr	r2, [pc, #228]	; (8004318 <socket+0x220>)
 8004234:	8011      	strh	r1, [r2, #0]
 8004236:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8004238:	4b37      	ldr	r3, [pc, #220]	; (8004318 <socket+0x220>)
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8004240:	4293      	cmp	r3, r2
 8004242:	d103      	bne.n	800424c <socket+0x154>
 8004244:	4b34      	ldr	r3, [pc, #208]	; (8004318 <socket+0x220>)
 8004246:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800424a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	3308      	adds	r3, #8
 8004250:	019b      	lsls	r3, r3, #6
 8004252:	330a      	adds	r3, #10
 8004254:	461a      	mov	r2, r3
 8004256:	88bb      	ldrh	r3, [r7, #4]
 8004258:	4619      	mov	r1, r3
 800425a:	4610      	mov	r0, r2
 800425c:	f7ff fd8e 	bl	8003d7c <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8004260:	79fb      	ldrb	r3, [r7, #7]
 8004262:	3308      	adds	r3, #8
 8004264:	019b      	lsls	r3, r3, #6
 8004266:	3302      	adds	r3, #2
 8004268:	2101      	movs	r1, #1
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff fd86 	bl	8003d7c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004270:	bf00      	nop
 8004272:	79fb      	ldrb	r3, [r7, #7]
 8004274:	3308      	adds	r3, #8
 8004276:	019b      	lsls	r3, r3, #6
 8004278:	3302      	adds	r3, #2
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff fd9c 	bl	8003db8 <WIZCHIP_READ>
 8004280:	4603      	mov	r3, r0
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1f4      	bne.n	8004272 <socket+0x17a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8004288:	79fb      	ldrb	r3, [r7, #7]
 800428a:	2201      	movs	r2, #1
 800428c:	fa02 f303 	lsl.w	r3, r2, r3
 8004290:	b21b      	sxth	r3, r3
 8004292:	43db      	mvns	r3, r3
 8004294:	b21a      	sxth	r2, r3
 8004296:	4b21      	ldr	r3, [pc, #132]	; (800431c <socket+0x224>)
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	b21b      	sxth	r3, r3
 800429c:	4013      	ands	r3, r2
 800429e:	b21b      	sxth	r3, r3
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	4b1e      	ldr	r3, [pc, #120]	; (800431c <socket+0x224>)
 80042a4:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80042a6:	78fb      	ldrb	r3, [r7, #3]
 80042a8:	f003 0201 	and.w	r2, r3, #1
 80042ac:	79fb      	ldrb	r3, [r7, #7]
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	b21a      	sxth	r2, r3
 80042b4:	4b19      	ldr	r3, [pc, #100]	; (800431c <socket+0x224>)
 80042b6:	881b      	ldrh	r3, [r3, #0]
 80042b8:	b21b      	sxth	r3, r3
 80042ba:	4313      	orrs	r3, r2
 80042bc:	b21b      	sxth	r3, r3
 80042be:	b29a      	uxth	r2, r3
 80042c0:	4b16      	ldr	r3, [pc, #88]	; (800431c <socket+0x224>)
 80042c2:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80042c4:	79fb      	ldrb	r3, [r7, #7]
 80042c6:	2201      	movs	r2, #1
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	b21b      	sxth	r3, r3
 80042ce:	43db      	mvns	r3, r3
 80042d0:	b21a      	sxth	r2, r3
 80042d2:	4b13      	ldr	r3, [pc, #76]	; (8004320 <socket+0x228>)
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	b21b      	sxth	r3, r3
 80042d8:	4013      	ands	r3, r2
 80042da:	b21b      	sxth	r3, r3
 80042dc:	b29a      	uxth	r2, r3
 80042de:	4b10      	ldr	r3, [pc, #64]	; (8004320 <socket+0x228>)
 80042e0:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	4a0f      	ldr	r2, [pc, #60]	; (8004324 <socket+0x22c>)
 80042e6:	2100      	movs	r1, #0
 80042e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80042ec:	79fb      	ldrb	r3, [r7, #7]
 80042ee:	4a0e      	ldr	r2, [pc, #56]	; (8004328 <socket+0x230>)
 80042f0:	2100      	movs	r1, #0
 80042f2:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80042f4:	bf00      	nop
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	3308      	adds	r3, #8
 80042fa:	019b      	lsls	r3, r3, #6
 80042fc:	3308      	adds	r3, #8
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fd5a 	bl	8003db8 <WIZCHIP_READ>
 8004304:	4603      	mov	r3, r0
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0f4      	beq.n	80042f6 <socket+0x1fe>
   return (int8_t)sn;
 800430c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8004310:	4618      	mov	r0, r3
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	bd90      	pop	{r4, r7, pc}
 8004318:	20000010 	.word	0x20000010
 800431c:	200008c4 	.word	0x200008c4
 8004320:	200008c6 	.word	0x200008c6
 8004324:	200008c8 	.word	0x200008c8
 8004328:	200008d8 	.word	0x200008d8

0800432c <close>:

int8_t close(uint8_t sn)
{
 800432c:	b590      	push	{r4, r7, lr}
 800432e:	b087      	sub	sp, #28
 8004330:	af02      	add	r7, sp, #8
 8004332:	4603      	mov	r3, r0
 8004334:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8004336:	79fb      	ldrb	r3, [r7, #7]
 8004338:	2b08      	cmp	r3, #8
 800433a:	d902      	bls.n	8004342 <close+0x16>
 800433c:	f04f 33ff 	mov.w	r3, #4294967295
 8004340:	e0a5      	b.n	800448e <close+0x162>
//A20160426 : Applied the erratum 1 of W5300
#if   (_WIZCHIP_ == 5300) 
   //M20160503 : Wrong socket parameter. s -> sn 
   //if( ((getSn_MR(s)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(s) != getSn_TxMAX(s)) ) 
   if( ((getSn_MR(sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(sn) != getSn_TxMAX(sn)) ) 
 8004342:	79fb      	ldrb	r3, [r7, #7]
 8004344:	3308      	adds	r3, #8
 8004346:	019b      	lsls	r3, r3, #6
 8004348:	4618      	mov	r0, r3
 800434a:	f7ff fd35 	bl	8003db8 <WIZCHIP_READ>
 800434e:	4603      	mov	r3, r0
 8004350:	f003 030f 	and.w	r3, r3, #15
 8004354:	2b01      	cmp	r3, #1
 8004356:	d14a      	bne.n	80043ee <close+0xc2>
 8004358:	79fb      	ldrb	r3, [r7, #7]
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff fddf 	bl	8003f1e <getSn_TX_FSR>
 8004360:	4604      	mov	r4, r0
 8004362:	79fb      	ldrb	r3, [r7, #7]
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff fd7e 	bl	8003e66 <getTMSR>
 800436a:	4603      	mov	r3, r0
 800436c:	029b      	lsls	r3, r3, #10
 800436e:	429c      	cmp	r4, r3
 8004370:	d03d      	beq.n	80043ee <close+0xc2>
   { 
      uint8_t destip[4] = {0, 0, 0, 1};
 8004372:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004376:	60fb      	str	r3, [r7, #12]
      //     if (getSn_TX_FSR(s) == getSn_TxMAX(s)) continue;
      // 
      //M20160503 : The socket() of close() calls close() itself again. It occures a infinite loop - close()->socket()->close()->socket()-> ~
      //socket(s,Sn_MR_UDP,0x3000,0);
      //sendto(s,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
      setSn_MR(sn,Sn_MR_UDP);
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	3308      	adds	r3, #8
 800437c:	019b      	lsls	r3, r3, #6
 800437e:	2102      	movs	r1, #2
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff fcfb 	bl	8003d7c <WIZCHIP_WRITE>
      setSn_PORTR(sn, 0x3000);
 8004386:	79fb      	ldrb	r3, [r7, #7]
 8004388:	3308      	adds	r3, #8
 800438a:	019b      	lsls	r3, r3, #6
 800438c:	330a      	adds	r3, #10
 800438e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff fcf2 	bl	8003d7c <WIZCHIP_WRITE>
      setSn_CR(sn,Sn_CR_OPEN);
 8004398:	79fb      	ldrb	r3, [r7, #7]
 800439a:	3308      	adds	r3, #8
 800439c:	019b      	lsls	r3, r3, #6
 800439e:	3302      	adds	r3, #2
 80043a0:	2101      	movs	r1, #1
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff fcea 	bl	8003d7c <WIZCHIP_WRITE>
      while(getSn_CR(sn) != 0);
 80043a8:	bf00      	nop
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	3308      	adds	r3, #8
 80043ae:	019b      	lsls	r3, r3, #6
 80043b0:	3302      	adds	r3, #2
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7ff fd00 	bl	8003db8 <WIZCHIP_READ>
 80043b8:	4603      	mov	r3, r0
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1f4      	bne.n	80043aa <close+0x7e>
      while(getSn_SR(sn) != SOCK_UDP);
 80043c0:	bf00      	nop
 80043c2:	79fb      	ldrb	r3, [r7, #7]
 80043c4:	3308      	adds	r3, #8
 80043c6:	019b      	lsls	r3, r3, #6
 80043c8:	3308      	adds	r3, #8
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff fcf4 	bl	8003db8 <WIZCHIP_READ>
 80043d0:	4603      	mov	r3, r0
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b22      	cmp	r3, #34	; 0x22
 80043d6:	d1f4      	bne.n	80043c2 <close+0x96>
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
 80043d8:	f107 030c 	add.w	r3, r7, #12
 80043dc:	f107 010c 	add.w	r1, r7, #12
 80043e0:	79f8      	ldrb	r0, [r7, #7]
 80043e2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80043e6:	9200      	str	r2, [sp, #0]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f000 f85d 	bl	80044a8 <sendto>
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80043ee:	79fb      	ldrb	r3, [r7, #7]
 80043f0:	3308      	adds	r3, #8
 80043f2:	019b      	lsls	r3, r3, #6
 80043f4:	3302      	adds	r3, #2
 80043f6:	2110      	movs	r1, #16
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff fcbf 	bl	8003d7c <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80043fe:	bf00      	nop
 8004400:	79fb      	ldrb	r3, [r7, #7]
 8004402:	3308      	adds	r3, #8
 8004404:	019b      	lsls	r3, r3, #6
 8004406:	3302      	adds	r3, #2
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff fcd5 	bl	8003db8 <WIZCHIP_READ>
 800440e:	4603      	mov	r3, r0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f4      	bne.n	8004400 <close+0xd4>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	3308      	adds	r3, #8
 800441a:	019b      	lsls	r3, r3, #6
 800441c:	3306      	adds	r3, #6
 800441e:	21ff      	movs	r1, #255	; 0xff
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff fcab 	bl	8003d7c <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8004426:	79fb      	ldrb	r3, [r7, #7]
 8004428:	2201      	movs	r2, #1
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	b21b      	sxth	r3, r3
 8004430:	43db      	mvns	r3, r3
 8004432:	b21a      	sxth	r2, r3
 8004434:	4b18      	ldr	r3, [pc, #96]	; (8004498 <close+0x16c>)
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	b21b      	sxth	r3, r3
 800443a:	4013      	ands	r3, r2
 800443c:	b21b      	sxth	r3, r3
 800443e:	b29a      	uxth	r2, r3
 8004440:	4b15      	ldr	r3, [pc, #84]	; (8004498 <close+0x16c>)
 8004442:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8004444:	79fb      	ldrb	r3, [r7, #7]
 8004446:	2201      	movs	r2, #1
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	b21b      	sxth	r3, r3
 800444e:	43db      	mvns	r3, r3
 8004450:	b21a      	sxth	r2, r3
 8004452:	4b12      	ldr	r3, [pc, #72]	; (800449c <close+0x170>)
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	b21b      	sxth	r3, r3
 8004458:	4013      	ands	r3, r2
 800445a:	b21b      	sxth	r3, r3
 800445c:	b29a      	uxth	r2, r3
 800445e:	4b0f      	ldr	r3, [pc, #60]	; (800449c <close+0x170>)
 8004460:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8004462:	79fb      	ldrb	r3, [r7, #7]
 8004464:	4a0e      	ldr	r2, [pc, #56]	; (80044a0 <close+0x174>)
 8004466:	2100      	movs	r1, #0
 8004468:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800446c:	79fb      	ldrb	r3, [r7, #7]
 800446e:	4a0d      	ldr	r2, [pc, #52]	; (80044a4 <close+0x178>)
 8004470:	2100      	movs	r1, #0
 8004472:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8004474:	bf00      	nop
 8004476:	79fb      	ldrb	r3, [r7, #7]
 8004478:	3308      	adds	r3, #8
 800447a:	019b      	lsls	r3, r3, #6
 800447c:	3308      	adds	r3, #8
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff fc9a 	bl	8003db8 <WIZCHIP_READ>
 8004484:	4603      	mov	r3, r0
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1f4      	bne.n	8004476 <close+0x14a>
	return SOCK_OK;
 800448c:	2301      	movs	r3, #1
}
 800448e:	4618      	mov	r0, r3
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	bd90      	pop	{r4, r7, pc}
 8004496:	bf00      	nop
 8004498:	200008c4 	.word	0x200008c4
 800449c:	200008c6 	.word	0x200008c6
 80044a0:	200008c8 	.word	0x200008c8
 80044a4:	200008d8 	.word	0x200008d8

080044a8 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	607b      	str	r3, [r7, #4]
 80044b2:	4603      	mov	r3, r0
 80044b4:	73fb      	strb	r3, [r7, #15]
 80044b6:	4613      	mov	r3, r2
 80044b8:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 80044ba:	2300      	movs	r3, #0
 80044bc:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 80044be:	2300      	movs	r3, #0
 80044c0:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 80044c2:	7bfb      	ldrb	r3, [r7, #15]
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	d902      	bls.n	80044ce <sendto+0x26>
 80044c8:	f04f 33ff 	mov.w	r3, #4294967295
 80044cc:	e1e6      	b.n	800489c <sendto+0x3f4>
   switch(getSn_MR(sn) & 0x0F)
 80044ce:	7bfb      	ldrb	r3, [r7, #15]
 80044d0:	3308      	adds	r3, #8
 80044d2:	019b      	lsls	r3, r3, #6
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff fc6f 	bl	8003db8 <WIZCHIP_READ>
 80044da:	4603      	mov	r3, r0
 80044dc:	f003 030f 	and.w	r3, r3, #15
 80044e0:	3b02      	subs	r3, #2
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d902      	bls.n	80044ec <sendto+0x44>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 80044e6:	f06f 0304 	mvn.w	r3, #4
 80044ea:	e1d7      	b.n	800489c <sendto+0x3f4>
         break;
 80044ec:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80044ee:	89bb      	ldrh	r3, [r7, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d102      	bne.n	80044fa <sendto+0x52>
 80044f4:	f06f 030d 	mvn.w	r3, #13
 80044f8:	e1d0      	b.n	800489c <sendto+0x3f4>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	021b      	lsls	r3, r3, #8
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	3201      	adds	r2, #1
 8004508:	7812      	ldrb	r2, [r2, #0]
 800450a:	4413      	add	r3, r2
 800450c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	021b      	lsls	r3, r3, #8
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	3202      	adds	r2, #2
 8004516:	7812      	ldrb	r2, [r2, #0]
 8004518:	4413      	add	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	021b      	lsls	r3, r3, #8
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	3203      	adds	r2, #3
 8004524:	7812      	ldrb	r2, [r2, #0]
 8004526:	4413      	add	r3, r2
 8004528:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10d      	bne.n	800454c <sendto+0xa4>
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	3308      	adds	r3, #8
 8004534:	019b      	lsls	r3, r3, #6
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff fc3e 	bl	8003db8 <WIZCHIP_READ>
 800453c:	4603      	mov	r3, r0
 800453e:	f003 0304 	and.w	r3, r3, #4
 8004542:	2b04      	cmp	r3, #4
 8004544:	d002      	beq.n	800454c <sendto+0xa4>
 8004546:	f06f 030b 	mvn.w	r3, #11
 800454a:	e1a7      	b.n	800489c <sendto+0x3f4>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 800454c:	8c3b      	ldrh	r3, [r7, #32]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10d      	bne.n	800456e <sendto+0xc6>
 8004552:	7bfb      	ldrb	r3, [r7, #15]
 8004554:	3308      	adds	r3, #8
 8004556:	019b      	lsls	r3, r3, #6
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff fc2d 	bl	8003db8 <WIZCHIP_READ>
 800455e:	4603      	mov	r3, r0
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b04      	cmp	r3, #4
 8004566:	d002      	beq.n	800456e <sendto+0xc6>
 8004568:	f06f 030a 	mvn.w	r3, #10
 800456c:	e196      	b.n	800489c <sendto+0x3f4>
   tmp = getSn_SR(sn);
 800456e:	7bfb      	ldrb	r3, [r7, #15]
 8004570:	3308      	adds	r3, #8
 8004572:	019b      	lsls	r3, r3, #6
 8004574:	3308      	adds	r3, #8
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff fc1e 	bl	8003db8 <WIZCHIP_READ>
 800457c:	4603      	mov	r3, r0
 800457e:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8004580:	7dfb      	ldrb	r3, [r7, #23]
 8004582:	2b42      	cmp	r3, #66	; 0x42
 8004584:	d008      	beq.n	8004598 <sendto+0xf0>
 8004586:	7dfb      	ldrb	r3, [r7, #23]
 8004588:	2b22      	cmp	r3, #34	; 0x22
 800458a:	d005      	beq.n	8004598 <sendto+0xf0>
 800458c:	7dfb      	ldrb	r3, [r7, #23]
 800458e:	2b32      	cmp	r3, #50	; 0x32
 8004590:	d002      	beq.n	8004598 <sendto+0xf0>
 8004592:	f06f 0306 	mvn.w	r3, #6
 8004596:	e181      	b.n	800489c <sendto+0x3f4>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8004598:	7bfb      	ldrb	r3, [r7, #15]
 800459a:	3308      	adds	r3, #8
 800459c:	019b      	lsls	r3, r3, #6
 800459e:	3314      	adds	r3, #20
 80045a0:	4618      	mov	r0, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	021b      	lsls	r3, r3, #8
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3301      	adds	r3, #1
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	4413      	add	r3, r2
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	4619      	mov	r1, r3
 80045ba:	f7ff fbdf 	bl	8003d7c <WIZCHIP_WRITE>
 80045be:	7bfb      	ldrb	r3, [r7, #15]
 80045c0:	3308      	adds	r3, #8
 80045c2:	019b      	lsls	r3, r3, #6
 80045c4:	3316      	adds	r3, #22
 80045c6:	4618      	mov	r0, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3302      	adds	r3, #2
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	021b      	lsls	r3, r3, #8
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3303      	adds	r3, #3
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	4413      	add	r3, r2
 80045de:	b29b      	uxth	r3, r3
 80045e0:	4619      	mov	r1, r3
 80045e2:	f7ff fbcb 	bl	8003d7c <WIZCHIP_WRITE>
   setSn_DPORT(sn,port);      
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
 80045e8:	3308      	adds	r3, #8
 80045ea:	019b      	lsls	r3, r3, #6
 80045ec:	3312      	adds	r3, #18
 80045ee:	461a      	mov	r2, r3
 80045f0:	8c3b      	ldrh	r3, [r7, #32]
 80045f2:	4619      	mov	r1, r3
 80045f4:	4610      	mov	r0, r2
 80045f6:	f7ff fbc1 	bl	8003d7c <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff fc32 	bl	8003e66 <getTMSR>
 8004602:	4603      	mov	r3, r0
 8004604:	b29b      	uxth	r3, r3
 8004606:	029b      	lsls	r3, r3, #10
 8004608:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800460a:	89ba      	ldrh	r2, [r7, #12]
 800460c:	8abb      	ldrh	r3, [r7, #20]
 800460e:	429a      	cmp	r2, r3
 8004610:	d901      	bls.n	8004616 <sendto+0x16e>
 8004612:	8abb      	ldrh	r3, [r7, #20]
 8004614:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8004616:	7bfb      	ldrb	r3, [r7, #15]
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff fc80 	bl	8003f1e <getSn_TX_FSR>
 800461e:	4603      	mov	r3, r0
 8004620:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8004622:	7bfb      	ldrb	r3, [r7, #15]
 8004624:	3308      	adds	r3, #8
 8004626:	019b      	lsls	r3, r3, #6
 8004628:	3308      	adds	r3, #8
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff fbc4 	bl	8003db8 <WIZCHIP_READ>
 8004630:	4603      	mov	r3, r0
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d102      	bne.n	800463e <sendto+0x196>
 8004638:	f06f 0303 	mvn.w	r3, #3
 800463c:	e12e      	b.n	800489c <sendto+0x3f4>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800463e:	4b99      	ldr	r3, [pc, #612]	; (80048a4 <sendto+0x3fc>)
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	461a      	mov	r2, r3
 8004644:	7bfb      	ldrb	r3, [r7, #15]
 8004646:	fa42 f303 	asr.w	r3, r2, r3
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <sendto+0x1b6>
 8004652:	89ba      	ldrh	r2, [r7, #12]
 8004654:	8abb      	ldrh	r3, [r7, #20]
 8004656:	429a      	cmp	r2, r3
 8004658:	d901      	bls.n	800465e <sendto+0x1b6>
 800465a:	2300      	movs	r3, #0
 800465c:	e11e      	b.n	800489c <sendto+0x3f4>
      if(len <= freesize) break;
 800465e:	89ba      	ldrh	r2, [r7, #12]
 8004660:	8abb      	ldrh	r3, [r7, #20]
 8004662:	429a      	cmp	r2, r3
 8004664:	d900      	bls.n	8004668 <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 8004666:	e7d6      	b.n	8004616 <sendto+0x16e>
      if(len <= freesize) break;
 8004668:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 800466a:	89ba      	ldrh	r2, [r7, #12]
 800466c:	7bfb      	ldrb	r3, [r7, #15]
 800466e:	68b9      	ldr	r1, [r7, #8]
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff fcaf 	bl	8003fd4 <wiz_send_data>

   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      getSIPR((uint8_t*)&taddr);
 8004676:	2018      	movs	r0, #24
 8004678:	f7ff fb9e 	bl	8003db8 <WIZCHIP_READ>
 800467c:	4603      	mov	r3, r0
 800467e:	0a1b      	lsrs	r3, r3, #8
 8004680:	b29a      	uxth	r2, r3
 8004682:	f107 0310 	add.w	r3, r7, #16
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	701a      	strb	r2, [r3, #0]
 800468a:	2018      	movs	r0, #24
 800468c:	f7ff fb94 	bl	8003db8 <WIZCHIP_READ>
 8004690:	4603      	mov	r3, r0
 8004692:	461a      	mov	r2, r3
 8004694:	f107 0310 	add.w	r3, r7, #16
 8004698:	3301      	adds	r3, #1
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	701a      	strb	r2, [r3, #0]
 800469e:	201a      	movs	r0, #26
 80046a0:	f7ff fb8a 	bl	8003db8 <WIZCHIP_READ>
 80046a4:	4603      	mov	r3, r0
 80046a6:	0a1b      	lsrs	r3, r3, #8
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	f107 0310 	add.w	r3, r7, #16
 80046ae:	3302      	adds	r3, #2
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	701a      	strb	r2, [r3, #0]
 80046b4:	201a      	movs	r0, #26
 80046b6:	f7ff fb7f 	bl	8003db8 <WIZCHIP_READ>
 80046ba:	4603      	mov	r3, r0
 80046bc:	461a      	mov	r2, r3
 80046be:	f107 0310 	add.w	r3, r7, #16
 80046c2:	3303      	adds	r3, #3
 80046c4:	b2d2      	uxtb	r2, r2
 80046c6:	701a      	strb	r2, [r3, #0]
      if(taddr == 0)
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d145      	bne.n	800475a <sendto+0x2b2>
      {
         getSUBR((uint8_t*)&taddr);
 80046ce:	2014      	movs	r0, #20
 80046d0:	f7ff fb72 	bl	8003db8 <WIZCHIP_READ>
 80046d4:	4603      	mov	r3, r0
 80046d6:	0a1b      	lsrs	r3, r3, #8
 80046d8:	b29a      	uxth	r2, r3
 80046da:	f107 0310 	add.w	r3, r7, #16
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	701a      	strb	r2, [r3, #0]
 80046e2:	2014      	movs	r0, #20
 80046e4:	f7ff fb68 	bl	8003db8 <WIZCHIP_READ>
 80046e8:	4603      	mov	r3, r0
 80046ea:	461a      	mov	r2, r3
 80046ec:	f107 0310 	add.w	r3, r7, #16
 80046f0:	3301      	adds	r3, #1
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	701a      	strb	r2, [r3, #0]
 80046f6:	2016      	movs	r0, #22
 80046f8:	f7ff fb5e 	bl	8003db8 <WIZCHIP_READ>
 80046fc:	4603      	mov	r3, r0
 80046fe:	0a1b      	lsrs	r3, r3, #8
 8004700:	b29a      	uxth	r2, r3
 8004702:	f107 0310 	add.w	r3, r7, #16
 8004706:	3302      	adds	r3, #2
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	701a      	strb	r2, [r3, #0]
 800470c:	2016      	movs	r0, #22
 800470e:	f7ff fb53 	bl	8003db8 <WIZCHIP_READ>
 8004712:	4603      	mov	r3, r0
 8004714:	461a      	mov	r2, r3
 8004716:	f107 0310 	add.w	r3, r7, #16
 800471a:	3303      	adds	r3, #3
 800471c:	b2d2      	uxtb	r2, r2
 800471e:	701a      	strb	r2, [r3, #0]
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 8004720:	4b61      	ldr	r3, [pc, #388]	; (80048a8 <sendto+0x400>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	b29b      	uxth	r3, r3
 8004726:	021b      	lsls	r3, r3, #8
 8004728:	b29a      	uxth	r2, r3
 800472a:	4b60      	ldr	r3, [pc, #384]	; (80048ac <sendto+0x404>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	b29b      	uxth	r3, r3
 8004730:	4413      	add	r3, r2
 8004732:	b29b      	uxth	r3, r3
 8004734:	4619      	mov	r1, r3
 8004736:	2014      	movs	r0, #20
 8004738:	f7ff fb20 	bl	8003d7c <WIZCHIP_WRITE>
 800473c:	4b5c      	ldr	r3, [pc, #368]	; (80048b0 <sendto+0x408>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	b29b      	uxth	r3, r3
 8004742:	021b      	lsls	r3, r3, #8
 8004744:	b29a      	uxth	r2, r3
 8004746:	4b5b      	ldr	r3, [pc, #364]	; (80048b4 <sendto+0x40c>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	b29b      	uxth	r3, r3
 800474c:	4413      	add	r3, r2
 800474e:	b29b      	uxth	r3, r3
 8004750:	4619      	mov	r1, r3
 8004752:	2016      	movs	r0, #22
 8004754:	f7ff fb12 	bl	8003d7c <WIZCHIP_WRITE>
 8004758:	e001      	b.n	800475e <sendto+0x2b6>
      }
      else taddr = 0;
 800475a:	2300      	movs	r3, #0
 800475c:	613b      	str	r3, [r7, #16]
   #endif

//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
 800475e:	7bfb      	ldrb	r3, [r7, #15]
 8004760:	3308      	adds	r3, #8
 8004762:	019b      	lsls	r3, r3, #6
 8004764:	3320      	adds	r3, #32
 8004766:	461a      	mov	r2, r3
 8004768:	89bb      	ldrh	r3, [r7, #12]
 800476a:	0c1b      	lsrs	r3, r3, #16
 800476c:	b29b      	uxth	r3, r3
 800476e:	4619      	mov	r1, r3
 8004770:	4610      	mov	r0, r2
 8004772:	f7ff fb03 	bl	8003d7c <WIZCHIP_WRITE>
 8004776:	7bfb      	ldrb	r3, [r7, #15]
 8004778:	3308      	adds	r3, #8
 800477a:	019b      	lsls	r3, r3, #6
 800477c:	3322      	adds	r3, #34	; 0x22
 800477e:	461a      	mov	r2, r3
 8004780:	89bb      	ldrh	r3, [r7, #12]
 8004782:	4619      	mov	r1, r3
 8004784:	4610      	mov	r0, r2
 8004786:	f7ff faf9 	bl	8003d7c <WIZCHIP_WRITE>
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 800478a:	7bfb      	ldrb	r3, [r7, #15]
 800478c:	3308      	adds	r3, #8
 800478e:	019b      	lsls	r3, r3, #6
 8004790:	3302      	adds	r3, #2
 8004792:	2120      	movs	r1, #32
 8004794:	4618      	mov	r0, r3
 8004796:	f7ff faf1 	bl	8003d7c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800479a:	bf00      	nop
 800479c:	7bfb      	ldrb	r3, [r7, #15]
 800479e:	3308      	adds	r3, #8
 80047a0:	019b      	lsls	r3, r3, #6
 80047a2:	3302      	adds	r3, #2
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff fb07 	bl	8003db8 <WIZCHIP_READ>
 80047aa:	4603      	mov	r3, r0
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1f4      	bne.n	800479c <sendto+0x2f4>
   while(1)
   {
      tmp = getSn_IR(sn);
 80047b2:	7bfb      	ldrb	r3, [r7, #15]
 80047b4:	3308      	adds	r3, #8
 80047b6:	019b      	lsls	r3, r3, #6
 80047b8:	3306      	adds	r3, #6
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff fafc 	bl	8003db8 <WIZCHIP_READ>
 80047c0:	4603      	mov	r3, r0
 80047c2:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 80047c4:	7dfb      	ldrb	r3, [r7, #23]
 80047c6:	f003 0310 	and.w	r3, r3, #16
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00c      	beq.n	80047e8 <sendto+0x340>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80047ce:	7bfb      	ldrb	r3, [r7, #15]
 80047d0:	3308      	adds	r3, #8
 80047d2:	019b      	lsls	r3, r3, #6
 80047d4:	3306      	adds	r3, #6
 80047d6:	2110      	movs	r1, #16
 80047d8:	4618      	mov	r0, r3
 80047da:	f7ff facf 	bl	8003d7c <WIZCHIP_WRITE>
         break;
 80047de:	bf00      	nop
         return SOCKERR_TIMEOUT;
      }
      ////////////
   }
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d059      	beq.n	800489a <sendto+0x3f2>
 80047e6:	e035      	b.n	8004854 <sendto+0x3ac>
      else if(tmp & Sn_IR_TIMEOUT)
 80047e8:	7dfb      	ldrb	r3, [r7, #23]
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0df      	beq.n	80047b2 <sendto+0x30a>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
 80047f4:	3308      	adds	r3, #8
 80047f6:	019b      	lsls	r3, r3, #6
 80047f8:	3306      	adds	r3, #6
 80047fa:	2108      	movs	r1, #8
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff fabd 	bl	8003d7c <WIZCHIP_WRITE>
            if(taddr) setSUBR((uint8_t*)&taddr);
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d022      	beq.n	800484e <sendto+0x3a6>
 8004808:	f107 0310 	add.w	r3, r7, #16
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	b29b      	uxth	r3, r3
 8004810:	021b      	lsls	r3, r3, #8
 8004812:	b29a      	uxth	r2, r3
 8004814:	f107 0310 	add.w	r3, r7, #16
 8004818:	3301      	adds	r3, #1
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	b29b      	uxth	r3, r3
 800481e:	4413      	add	r3, r2
 8004820:	b29b      	uxth	r3, r3
 8004822:	4619      	mov	r1, r3
 8004824:	2014      	movs	r0, #20
 8004826:	f7ff faa9 	bl	8003d7c <WIZCHIP_WRITE>
 800482a:	f107 0310 	add.w	r3, r7, #16
 800482e:	3302      	adds	r3, #2
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	b29b      	uxth	r3, r3
 8004834:	021b      	lsls	r3, r3, #8
 8004836:	b29a      	uxth	r2, r3
 8004838:	f107 0310 	add.w	r3, r7, #16
 800483c:	3303      	adds	r3, #3
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	b29b      	uxth	r3, r3
 8004842:	4413      	add	r3, r2
 8004844:	b29b      	uxth	r3, r3
 8004846:	4619      	mov	r1, r3
 8004848:	2016      	movs	r0, #22
 800484a:	f7ff fa97 	bl	8003d7c <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 800484e:	f06f 030c 	mvn.w	r3, #12
 8004852:	e023      	b.n	800489c <sendto+0x3f4>
      if(taddr) setSUBR((uint8_t*)&taddr);
 8004854:	f107 0310 	add.w	r3, r7, #16
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	b29b      	uxth	r3, r3
 800485c:	021b      	lsls	r3, r3, #8
 800485e:	b29a      	uxth	r2, r3
 8004860:	f107 0310 	add.w	r3, r7, #16
 8004864:	3301      	adds	r3, #1
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	b29b      	uxth	r3, r3
 800486a:	4413      	add	r3, r2
 800486c:	b29b      	uxth	r3, r3
 800486e:	4619      	mov	r1, r3
 8004870:	2014      	movs	r0, #20
 8004872:	f7ff fa83 	bl	8003d7c <WIZCHIP_WRITE>
 8004876:	f107 0310 	add.w	r3, r7, #16
 800487a:	3302      	adds	r3, #2
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	b29b      	uxth	r3, r3
 8004880:	021b      	lsls	r3, r3, #8
 8004882:	b29a      	uxth	r2, r3
 8004884:	f107 0310 	add.w	r3, r7, #16
 8004888:	3303      	adds	r3, #3
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	b29b      	uxth	r3, r3
 800488e:	4413      	add	r3, r2
 8004890:	b29b      	uxth	r3, r3
 8004892:	4619      	mov	r1, r3
 8004894:	2016      	movs	r0, #22
 8004896:	f7ff fa71 	bl	8003d7c <WIZCHIP_WRITE>
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800489a:	89bb      	ldrh	r3, [r7, #12]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	200008c4 	.word	0x200008c4
 80048a8:	0800770c 	.word	0x0800770c
 80048ac:	0800770d 	.word	0x0800770d
 80048b0:	0800770e 	.word	0x0800770e
 80048b4:	0800770f 	.word	0x0800770f

080048b8 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b088      	sub	sp, #32
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60b9      	str	r1, [r7, #8]
 80048c0:	607b      	str	r3, [r7, #4]
 80048c2:	4603      	mov	r3, r0
 80048c4:	73fb      	strb	r3, [r7, #15]
 80048c6:	4613      	mov	r3, r2
 80048c8:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 80048ca:	2300      	movs	r3, #0
 80048cc:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d902      	bls.n	80048da <recvfrom+0x22>
 80048d4:	f04f 33ff 	mov.w	r3, #4294967295
 80048d8:	e257      	b.n	8004d8a <recvfrom+0x4d2>
   //CHECK_SOCKMODE(Sn_MR_UDP);
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
 80048da:	2000      	movs	r0, #0
 80048dc:	f7ff fa6c 	bl	8003db8 <WIZCHIP_READ>
 80048e0:	4603      	mov	r3, r0
 80048e2:	83bb      	strh	r3, [r7, #28]
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
 80048e6:	3308      	adds	r3, #8
 80048e8:	019b      	lsls	r3, r3, #6
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff fa64 	bl	8003db8 <WIZCHIP_READ>
 80048f0:	4603      	mov	r3, r0
 80048f2:	837b      	strh	r3, [r7, #26]
 80048f4:	8b7b      	ldrh	r3, [r7, #26]
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	3b02      	subs	r3, #2
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d902      	bls.n	8004906 <recvfrom+0x4e>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8004900:	f06f 0304 	mvn.w	r3, #4
 8004904:	e241      	b.n	8004d8a <recvfrom+0x4d2>
         break;
 8004906:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8004908:	89bb      	ldrh	r3, [r7, #12]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d102      	bne.n	8004914 <recvfrom+0x5c>
 800490e:	f06f 030d 	mvn.w	r3, #13
 8004912:	e23a      	b.n	8004d8a <recvfrom+0x4d2>
   if(sock_remained_size[sn] == 0)
 8004914:	7bfb      	ldrb	r3, [r7, #15]
 8004916:	4a83      	ldr	r2, [pc, #524]	; (8004b24 <recvfrom+0x26c>)
 8004918:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d127      	bne.n	8004970 <recvfrom+0xb8>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff fb24 	bl	8003f70 <getSn_RX_RSR>
 8004928:	4603      	mov	r3, r0
 800492a:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800492c:	7bfb      	ldrb	r3, [r7, #15]
 800492e:	3308      	adds	r3, #8
 8004930:	019b      	lsls	r3, r3, #6
 8004932:	3308      	adds	r3, #8
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff fa3f 	bl	8003db8 <WIZCHIP_READ>
 800493a:	4603      	mov	r3, r0
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d102      	bne.n	8004948 <recvfrom+0x90>
 8004942:	f06f 0303 	mvn.w	r3, #3
 8004946:	e220      	b.n	8004d8a <recvfrom+0x4d2>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8004948:	4b77      	ldr	r3, [pc, #476]	; (8004b28 <recvfrom+0x270>)
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	461a      	mov	r2, r3
 800494e:	7bfb      	ldrb	r3, [r7, #15]
 8004950:	fa42 f303 	asr.w	r3, r2, r3
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b00      	cmp	r3, #0
 800495a:	d004      	beq.n	8004966 <recvfrom+0xae>
 800495c:	8bfb      	ldrh	r3, [r7, #30]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <recvfrom+0xae>
 8004962:	2300      	movs	r3, #0
 8004964:	e211      	b.n	8004d8a <recvfrom+0x4d2>
         if(pack_len != 0) break;
 8004966:	8bfb      	ldrh	r3, [r7, #30]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d100      	bne.n	800496e <recvfrom+0xb6>
         pack_len = getSn_RX_RSR(sn);
 800496c:	e7d8      	b.n	8004920 <recvfrom+0x68>
         if(pack_len != 0) break;
 800496e:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8004970:	8b7b      	ldrh	r3, [r7, #26]
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	2b04      	cmp	r3, #4
 8004978:	f000 80dc 	beq.w	8004b34 <recvfrom+0x27c>
 800497c:	2b04      	cmp	r3, #4
 800497e:	f300 81b4 	bgt.w	8004cea <recvfrom+0x432>
 8004982:	2b02      	cmp	r3, #2
 8004984:	d003      	beq.n	800498e <recvfrom+0xd6>
 8004986:	2b03      	cmp	r3, #3
 8004988:	f000 8151 	beq.w	8004c2e <recvfrom+0x376>
 800498c:	e1ad      	b.n	8004cea <recvfrom+0x432>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 800498e:	7bfb      	ldrb	r3, [r7, #15]
 8004990:	4a64      	ldr	r2, [pc, #400]	; (8004b24 <recvfrom+0x26c>)
 8004992:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004996:	2b00      	cmp	r3, #0
 8004998:	f040 8087 	bne.w	8004aaa <recvfrom+0x1f2>
	      {
   			wiz_recv_data(sn, head, 8);
 800499c:	f107 0110 	add.w	r1, r7, #16
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	2208      	movs	r2, #8
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff fb47 	bl	8004038 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80049aa:	7bfb      	ldrb	r3, [r7, #15]
 80049ac:	3308      	adds	r3, #8
 80049ae:	019b      	lsls	r3, r3, #6
 80049b0:	3302      	adds	r3, #2
 80049b2:	2140      	movs	r1, #64	; 0x40
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff f9e1 	bl	8003d7c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80049ba:	bf00      	nop
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	3308      	adds	r3, #8
 80049c0:	019b      	lsls	r3, r3, #6
 80049c2:	3302      	adds	r3, #2
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7ff f9f7 	bl	8003db8 <WIZCHIP_READ>
 80049ca:	4603      	mov	r3, r0
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f4      	bne.n	80049bc <recvfrom+0x104>
   			// read peer's IP address, port number & packet length
   	   //A20150601 : For W5300
   		#if _WIZCHIP_ == 5300
   		   if(mr1 & MR_FS)
 80049d2:	8bbb      	ldrh	r3, [r7, #28]
 80049d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d031      	beq.n	8004a40 <recvfrom+0x188>
   		   {
   		      addr[0] = head[1];
 80049dc:	7c7a      	ldrb	r2, [r7, #17]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	701a      	strb	r2, [r3, #0]
   		      addr[1] = head[0];
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3301      	adds	r3, #1
 80049e6:	7c3a      	ldrb	r2, [r7, #16]
 80049e8:	701a      	strb	r2, [r3, #0]
   		      addr[2] = head[3];
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3302      	adds	r3, #2
 80049ee:	7cfa      	ldrb	r2, [r7, #19]
 80049f0:	701a      	strb	r2, [r3, #0]
   		      addr[3] = head[2];
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3303      	adds	r3, #3
 80049f6:	7cba      	ldrb	r2, [r7, #18]
 80049f8:	701a      	strb	r2, [r3, #0]
   		      *port = head[5];
 80049fa:	7d7b      	ldrb	r3, [r7, #21]
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a00:	801a      	strh	r2, [r3, #0]
   		      *port = (*port << 8) + head[4];
 8004a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	021b      	lsls	r3, r3, #8
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	7d3b      	ldrb	r3, [r7, #20]
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	4413      	add	r3, r2
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a14:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[7];
 8004a16:	7dfa      	ldrb	r2, [r7, #23]
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
 8004a1a:	b291      	uxth	r1, r2
 8004a1c:	4a41      	ldr	r2, [pc, #260]	; (8004b24 <recvfrom+0x26c>)
 8004a1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	4a3f      	ldr	r2, [pc, #252]	; (8004b24 <recvfrom+0x26c>)
 8004a26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a2a:	021b      	lsls	r3, r3, #8
 8004a2c:	b299      	uxth	r1, r3
 8004a2e:	7dbb      	ldrb	r3, [r7, #22]
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
 8004a34:	440a      	add	r2, r1
 8004a36:	b291      	uxth	r1, r2
 8004a38:	4a3a      	ldr	r2, [pc, #232]	; (8004b24 <recvfrom+0x26c>)
 8004a3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004a3e:	e030      	b.n	8004aa2 <recvfrom+0x1ea>
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8004a40:	7c3a      	ldrb	r2, [r7, #16]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	7c7a      	ldrb	r2, [r7, #17]
 8004a4c:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	3302      	adds	r3, #2
 8004a52:	7cba      	ldrb	r2, [r7, #18]
 8004a54:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	3303      	adds	r3, #3
 8004a5a:	7cfa      	ldrb	r2, [r7, #19]
 8004a5c:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8004a5e:	7d3b      	ldrb	r3, [r7, #20]
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a64:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8004a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	021b      	lsls	r3, r3, #8
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	7d7b      	ldrb	r3, [r7, #21]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	4413      	add	r3, r2
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a78:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8004a7a:	7dba      	ldrb	r2, [r7, #22]
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	b291      	uxth	r1, r2
 8004a80:	4a28      	ldr	r2, [pc, #160]	; (8004b24 <recvfrom+0x26c>)
 8004a82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8004a86:	7bfb      	ldrb	r3, [r7, #15]
 8004a88:	4a26      	ldr	r2, [pc, #152]	; (8004b24 <recvfrom+0x26c>)
 8004a8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a8e:	021b      	lsls	r3, r3, #8
 8004a90:	b299      	uxth	r1, r3
 8004a92:	7dfb      	ldrb	r3, [r7, #23]
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
 8004a98:	440a      	add	r2, r1
 8004a9a:	b291      	uxth	r1, r2
 8004a9c:	4a21      	ldr	r2, [pc, #132]	; (8004b24 <recvfrom+0x26c>)
 8004a9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
 8004aa4:	4a21      	ldr	r2, [pc, #132]	; (8004b2c <recvfrom+0x274>)
 8004aa6:	2180      	movs	r1, #128	; 0x80
 8004aa8:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
 8004aac:	4a1d      	ldr	r2, [pc, #116]	; (8004b24 <recvfrom+0x26c>)
 8004aae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ab2:	89ba      	ldrh	r2, [r7, #12]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d202      	bcs.n	8004abe <recvfrom+0x206>
 8004ab8:	89bb      	ldrh	r3, [r7, #12]
 8004aba:	83fb      	strh	r3, [r7, #30]
 8004abc:	e004      	b.n	8004ac8 <recvfrom+0x210>
			else pack_len = sock_remained_size[sn];
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
 8004ac0:	4a18      	ldr	r2, [pc, #96]	; (8004b24 <recvfrom+0x26c>)
 8004ac2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ac6:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8004ac8:	8bfb      	ldrh	r3, [r7, #30]
 8004aca:	81bb      	strh	r3, [r7, #12]
			#if _WIZCHIP_ == 5300
			   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	4a17      	ldr	r2, [pc, #92]	; (8004b2c <recvfrom+0x274>)
 8004ad0:	5cd3      	ldrb	r3, [r2, r3]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d01c      	beq.n	8004b14 <recvfrom+0x25c>
			   {
			      *buf++ = sock_remained_byte[sn];
 8004ada:	7bfa      	ldrb	r2, [r7, #15]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	1c59      	adds	r1, r3, #1
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	4913      	ldr	r1, [pc, #76]	; (8004b30 <recvfrom+0x278>)
 8004ae4:	5c8a      	ldrb	r2, [r1, r2]
 8004ae6:	701a      	strb	r2, [r3, #0]
			      pack_len -= 1;
 8004ae8:	8bfb      	ldrh	r3, [r7, #30]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	83fb      	strh	r3, [r7, #30]
			      sock_remained_size[sn] -= 1;
 8004aee:	7bfb      	ldrb	r3, [r7, #15]
 8004af0:	4a0c      	ldr	r2, [pc, #48]	; (8004b24 <recvfrom+0x26c>)
 8004af2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004af6:	7bfb      	ldrb	r3, [r7, #15]
 8004af8:	3a01      	subs	r2, #1
 8004afa:	b291      	uxth	r1, r2
 8004afc:	4a09      	ldr	r2, [pc, #36]	; (8004b24 <recvfrom+0x26c>)
 8004afe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			      sock_pack_info[sn] &= ~PACK_FIFOBYTE;
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
 8004b04:	4a09      	ldr	r2, [pc, #36]	; (8004b2c <recvfrom+0x274>)
 8004b06:	5cd2      	ldrb	r2, [r2, r3]
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
 8004b0a:	f022 0202 	bic.w	r2, r2, #2
 8004b0e:	b2d1      	uxtb	r1, r2
 8004b10:	4a06      	ldr	r2, [pc, #24]	; (8004b2c <recvfrom+0x274>)
 8004b12:	54d1      	strb	r1, [r2, r3]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8004b14:	8bfa      	ldrh	r2, [r7, #30]
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7ff fa8c 	bl	8004038 <wiz_recv_data>
			break;
 8004b20:	e0ef      	b.n	8004d02 <recvfrom+0x44a>
 8004b22:	bf00      	nop
 8004b24:	200008c8 	.word	0x200008c8
 8004b28:	200008c4 	.word	0x200008c4
 8004b2c:	200008d8 	.word	0x200008d8
 8004b30:	200008e0 	.word	0x200008e0
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
 8004b36:	4a97      	ldr	r2, [pc, #604]	; (8004d94 <recvfrom+0x4dc>)
 8004b38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d160      	bne.n	8004c02 <recvfrom+0x34a>
	      {
   			wiz_recv_data(sn, head, 2);
 8004b40:	f107 0110 	add.w	r1, r7, #16
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	2202      	movs	r2, #2
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7ff fa75 	bl	8004038 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8004b4e:	7bfb      	ldrb	r3, [r7, #15]
 8004b50:	3308      	adds	r3, #8
 8004b52:	019b      	lsls	r3, r3, #6
 8004b54:	3302      	adds	r3, #2
 8004b56:	2140      	movs	r1, #64	; 0x40
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7ff f90f 	bl	8003d7c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8004b5e:	bf00      	nop
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
 8004b62:	3308      	adds	r3, #8
 8004b64:	019b      	lsls	r3, r3, #6
 8004b66:	3302      	adds	r3, #2
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7ff f925 	bl	8003db8 <WIZCHIP_READ>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1f4      	bne.n	8004b60 <recvfrom+0x2a8>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8004b76:	7c3a      	ldrb	r2, [r7, #16]
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
 8004b7a:	b291      	uxth	r1, r2
 8004b7c:	4a85      	ldr	r2, [pc, #532]	; (8004d94 <recvfrom+0x4dc>)
 8004b7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
 8004b84:	4a83      	ldr	r2, [pc, #524]	; (8004d94 <recvfrom+0x4dc>)
 8004b86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b8a:	021b      	lsls	r3, r3, #8
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	7c7b      	ldrb	r3, [r7, #17]
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	4413      	add	r3, r2
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
 8004b98:	3a02      	subs	r2, #2
 8004b9a:	b291      	uxth	r1, r2
 8004b9c:	4a7d      	ldr	r2, [pc, #500]	; (8004d94 <recvfrom+0x4dc>)
 8004b9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			#if _WIZCHIP_ == W5300
   			if(sock_remained_size[sn] & 0x01)
 8004ba2:	7bfb      	ldrb	r3, [r7, #15]
 8004ba4:	4a7b      	ldr	r2, [pc, #492]	; (8004d94 <recvfrom+0x4dc>)
 8004ba6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <recvfrom+0x310>
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
 8004bb4:	4a77      	ldr	r2, [pc, #476]	; (8004d94 <recvfrom+0x4dc>)
 8004bb6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
 8004bbc:	3a03      	subs	r2, #3
 8004bbe:	b291      	uxth	r1, r2
 8004bc0:	4a74      	ldr	r2, [pc, #464]	; (8004d94 <recvfrom+0x4dc>)
 8004bc2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004bc6:	e009      	b.n	8004bdc <recvfrom+0x324>
   			else
   				sock_remained_size[sn] -= 4;
 8004bc8:	7bfb      	ldrb	r3, [r7, #15]
 8004bca:	4a72      	ldr	r2, [pc, #456]	; (8004d94 <recvfrom+0x4dc>)
 8004bcc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
 8004bd2:	3a04      	subs	r2, #4
 8004bd4:	b291      	uxth	r1, r2
 8004bd6:	4a6f      	ldr	r2, [pc, #444]	; (8004d94 <recvfrom+0x4dc>)
 8004bd8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
 8004bde:	4a6d      	ldr	r2, [pc, #436]	; (8004d94 <recvfrom+0x4dc>)
 8004be0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004be4:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d906      	bls.n	8004bfa <recvfrom+0x342>
   			{
   			   close(sn);
 8004bec:	7bfb      	ldrb	r3, [r7, #15]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7ff fb9c 	bl	800432c <close>
   			   return SOCKFATAL_PACKLEN;
 8004bf4:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8004bf8:	e0c7      	b.n	8004d8a <recvfrom+0x4d2>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
 8004bfc:	4a66      	ldr	r2, [pc, #408]	; (8004d98 <recvfrom+0x4e0>)
 8004bfe:	2180      	movs	r1, #128	; 0x80
 8004c00:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8004c02:	7bfb      	ldrb	r3, [r7, #15]
 8004c04:	4a63      	ldr	r2, [pc, #396]	; (8004d94 <recvfrom+0x4dc>)
 8004c06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c0a:	89ba      	ldrh	r2, [r7, #12]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d202      	bcs.n	8004c16 <recvfrom+0x35e>
 8004c10:	89bb      	ldrh	r3, [r7, #12]
 8004c12:	83fb      	strh	r3, [r7, #30]
 8004c14:	e004      	b.n	8004c20 <recvfrom+0x368>
			else pack_len = sock_remained_size[sn];
 8004c16:	7bfb      	ldrb	r3, [r7, #15]
 8004c18:	4a5e      	ldr	r2, [pc, #376]	; (8004d94 <recvfrom+0x4dc>)
 8004c1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c1e:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8004c20:	8bfa      	ldrh	r2, [r7, #30]
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
 8004c24:	68b9      	ldr	r1, [r7, #8]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7ff fa06 	bl	8004038 <wiz_recv_data>
		   break;
 8004c2c:	e069      	b.n	8004d02 <recvfrom+0x44a>
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
 8004c30:	4a58      	ldr	r2, [pc, #352]	; (8004d94 <recvfrom+0x4dc>)
 8004c32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d141      	bne.n	8004cbe <recvfrom+0x406>
		   {
   			wiz_recv_data(sn, head, 6);
 8004c3a:	f107 0110 	add.w	r1, r7, #16
 8004c3e:	7bfb      	ldrb	r3, [r7, #15]
 8004c40:	2206      	movs	r2, #6
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7ff f9f8 	bl	8004038 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
 8004c4a:	3308      	adds	r3, #8
 8004c4c:	019b      	lsls	r3, r3, #6
 8004c4e:	3302      	adds	r3, #2
 8004c50:	2140      	movs	r1, #64	; 0x40
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7ff f892 	bl	8003d7c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8004c58:	bf00      	nop
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
 8004c5c:	3308      	adds	r3, #8
 8004c5e:	019b      	lsls	r3, r3, #6
 8004c60:	3302      	adds	r3, #2
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7ff f8a8 	bl	8003db8 <WIZCHIP_READ>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1f4      	bne.n	8004c5a <recvfrom+0x3a2>
   			addr[0] = head[0];
 8004c70:	7c3a      	ldrb	r2, [r7, #16]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	7c7a      	ldrb	r2, [r7, #17]
 8004c7c:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	3302      	adds	r3, #2
 8004c82:	7cba      	ldrb	r2, [r7, #18]
 8004c84:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	3303      	adds	r3, #3
 8004c8a:	7cfa      	ldrb	r2, [r7, #19]
 8004c8c:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8004c8e:	7d3a      	ldrb	r2, [r7, #20]
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	b291      	uxth	r1, r2
 8004c94:	4a3f      	ldr	r2, [pc, #252]	; (8004d94 <recvfrom+0x4dc>)
 8004c96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8004c9a:	7bfb      	ldrb	r3, [r7, #15]
 8004c9c:	4a3d      	ldr	r2, [pc, #244]	; (8004d94 <recvfrom+0x4dc>)
 8004c9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ca2:	021b      	lsls	r3, r3, #8
 8004ca4:	b299      	uxth	r1, r3
 8004ca6:	7d7b      	ldrb	r3, [r7, #21]
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	7bfb      	ldrb	r3, [r7, #15]
 8004cac:	440a      	add	r2, r1
 8004cae:	b291      	uxth	r1, r2
 8004cb0:	4a38      	ldr	r2, [pc, #224]	; (8004d94 <recvfrom+0x4dc>)
 8004cb2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
 8004cb8:	4a37      	ldr	r2, [pc, #220]	; (8004d98 <recvfrom+0x4e0>)
 8004cba:	2180      	movs	r1, #128	; 0x80
 8004cbc:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8004cbe:	7bfb      	ldrb	r3, [r7, #15]
 8004cc0:	4a34      	ldr	r2, [pc, #208]	; (8004d94 <recvfrom+0x4dc>)
 8004cc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cc6:	89ba      	ldrh	r2, [r7, #12]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d202      	bcs.n	8004cd2 <recvfrom+0x41a>
 8004ccc:	89bb      	ldrh	r3, [r7, #12]
 8004cce:	83fb      	strh	r3, [r7, #30]
 8004cd0:	e004      	b.n	8004cdc <recvfrom+0x424>
			else pack_len = sock_remained_size[sn];
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	4a2f      	ldr	r2, [pc, #188]	; (8004d94 <recvfrom+0x4dc>)
 8004cd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cda:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8004cdc:	8bfa      	ldrh	r2, [r7, #30]
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
 8004ce0:	68b9      	ldr	r1, [r7, #8]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7ff f9a8 	bl	8004038 <wiz_recv_data>
			break;
 8004ce8:	e00b      	b.n	8004d02 <recvfrom+0x44a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8004cea:	8bfa      	ldrh	r2, [r7, #30]
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
 8004cee:	4611      	mov	r1, r2
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff f9e3 	bl	80040bc <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
 8004cf8:	4926      	ldr	r1, [pc, #152]	; (8004d94 <recvfrom+0x4dc>)
 8004cfa:	8bfa      	ldrh	r2, [r7, #30]
 8004cfc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8004d00:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8004d02:	7bfb      	ldrb	r3, [r7, #15]
 8004d04:	3308      	adds	r3, #8
 8004d06:	019b      	lsls	r3, r3, #6
 8004d08:	3302      	adds	r3, #2
 8004d0a:	2140      	movs	r1, #64	; 0x40
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7ff f835 	bl	8003d7c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8004d12:	bf00      	nop
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
 8004d16:	3308      	adds	r3, #8
 8004d18:	019b      	lsls	r3, r3, #6
 8004d1a:	3302      	adds	r3, #2
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff f84b 	bl	8003db8 <WIZCHIP_READ>
 8004d22:	4603      	mov	r3, r0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1f4      	bne.n	8004d14 <recvfrom+0x45c>
	sock_remained_size[sn] -= pack_len;
 8004d2a:	7bfb      	ldrb	r3, [r7, #15]
 8004d2c:	4a19      	ldr	r2, [pc, #100]	; (8004d94 <recvfrom+0x4dc>)
 8004d2e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
 8004d34:	8bfa      	ldrh	r2, [r7, #30]
 8004d36:	1a8a      	subs	r2, r1, r2
 8004d38:	b291      	uxth	r1, r2
 8004d3a:	4a16      	ldr	r2, [pc, #88]	; (8004d94 <recvfrom+0x4dc>)
 8004d3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
 8004d42:	4a14      	ldr	r2, [pc, #80]	; (8004d94 <recvfrom+0x4dc>)
 8004d44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d017      	beq.n	8004d7c <recvfrom+0x4c4>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
 8004d4e:	4a12      	ldr	r2, [pc, #72]	; (8004d98 <recvfrom+0x4e0>)
 8004d50:	5cd2      	ldrb	r2, [r2, r3]
 8004d52:	7bfb      	ldrb	r3, [r7, #15]
 8004d54:	f042 0201 	orr.w	r2, r2, #1
 8004d58:	b2d1      	uxtb	r1, r2
 8004d5a:	4a0f      	ldr	r2, [pc, #60]	; (8004d98 <recvfrom+0x4e0>)
 8004d5c:	54d1      	strb	r1, [r2, r3]
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
 8004d5e:	8bfb      	ldrh	r3, [r7, #30]
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00d      	beq.n	8004d84 <recvfrom+0x4cc>
 8004d68:	7bfb      	ldrb	r3, [r7, #15]
 8004d6a:	4a0b      	ldr	r2, [pc, #44]	; (8004d98 <recvfrom+0x4e0>)
 8004d6c:	5cd2      	ldrb	r2, [r2, r3]
 8004d6e:	7bfb      	ldrb	r3, [r7, #15]
 8004d70:	f042 0202 	orr.w	r2, r2, #2
 8004d74:	b2d1      	uxtb	r1, r2
 8004d76:	4a08      	ldr	r2, [pc, #32]	; (8004d98 <recvfrom+0x4e0>)
 8004d78:	54d1      	strb	r1, [r2, r3]
 8004d7a:	e003      	b.n	8004d84 <recvfrom+0x4cc>
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
 8004d7e:	4a06      	ldr	r2, [pc, #24]	; (8004d98 <recvfrom+0x4e0>)
 8004d80:	2100      	movs	r1, #0
 8004d82:	54d1      	strb	r1, [r2, r3]
#if _WIZCHIP_ == 5300	   
   pack_len = len;
 8004d84:	89bb      	ldrh	r3, [r7, #12]
 8004d86:	83fb      	strh	r3, [r7, #30]
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8004d88:	8bfb      	ldrh	r3, [r7, #30]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3720      	adds	r7, #32
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	200008c8 	.word	0x200008c8
 8004d98:	200008d8 	.word	0x200008d8

08004d9c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	bf00      	nop
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8004daa:	b480      	push	{r7}
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	bf00      	nop
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8004db8:	b480      	push	{r7}
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	bf00      	nop
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8004dc6:	b480      	push	{r7}
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	bf00      	nop
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	4618      	mov	r0, r3
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8004dee:	b480      	push	{r7}
 8004df0:	b083      	sub	sp, #12
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	460b      	mov	r3, r1
 8004df8:	807b      	strh	r3, [r7, #2]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	887a      	ldrh	r2, [r7, #2]
 8004dfe:	801a      	strh	r2, [r3, #0]
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <reg_wizchip_cs_cbfunc+0x16>
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d106      	bne.n	8004e30 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8004e22:	4b0a      	ldr	r3, [pc, #40]	; (8004e4c <reg_wizchip_cs_cbfunc+0x40>)
 8004e24:	4a0a      	ldr	r2, [pc, #40]	; (8004e50 <reg_wizchip_cs_cbfunc+0x44>)
 8004e26:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8004e28:	4b08      	ldr	r3, [pc, #32]	; (8004e4c <reg_wizchip_cs_cbfunc+0x40>)
 8004e2a:	4a0a      	ldr	r2, [pc, #40]	; (8004e54 <reg_wizchip_cs_cbfunc+0x48>)
 8004e2c:	619a      	str	r2, [r3, #24]
 8004e2e:	e006      	b.n	8004e3e <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8004e30:	4a06      	ldr	r2, [pc, #24]	; (8004e4c <reg_wizchip_cs_cbfunc+0x40>)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8004e36:	4a05      	ldr	r2, [pc, #20]	; (8004e4c <reg_wizchip_cs_cbfunc+0x40>)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	6193      	str	r3, [r2, #24]
   }
}
 8004e3c:	bf00      	nop
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	20000014 	.word	0x20000014
 8004e50:	08004db9 	.word	0x08004db9
 8004e54:	08004dc7 	.word	0x08004dc7

08004e58 <reg_wizchip_bus_cbfunc>:

//M20150515 : For integrating with W5300
//void reg_wizchip_bus_cbfunc(uint8_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, uint8_t wb))
void reg_wizchip_bus_cbfunc(iodata_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, iodata_t wb))
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_BUS_));
 8004e62:	bf00      	nop
 8004e64:	4b0f      	ldr	r3, [pc, #60]	; (8004ea4 <reg_wizchip_bus_cbfunc+0x4c>)
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d0f9      	beq.n	8004e64 <reg_wizchip_bus_cbfunc+0xc>
   {
      WIZCHIP.IF.BUS._read_byte   = bus_rb;
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
   */
   if(!bus_rb || !bus_wb)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <reg_wizchip_bus_cbfunc+0x24>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d106      	bne.n	8004e8a <reg_wizchip_bus_cbfunc+0x32>
   {
      WIZCHIP.IF.BUS._read_data   = wizchip_bus_readdata;
 8004e7c:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <reg_wizchip_bus_cbfunc+0x4c>)
 8004e7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ea8 <reg_wizchip_bus_cbfunc+0x50>)
 8004e80:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.BUS._write_data  = wizchip_bus_writedata;
 8004e82:	4b08      	ldr	r3, [pc, #32]	; (8004ea4 <reg_wizchip_bus_cbfunc+0x4c>)
 8004e84:	4a09      	ldr	r2, [pc, #36]	; (8004eac <reg_wizchip_bus_cbfunc+0x54>)
 8004e86:	621a      	str	r2, [r3, #32]
 8004e88:	e006      	b.n	8004e98 <reg_wizchip_bus_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.BUS._read_data   = bus_rb;
 8004e8a:	4a06      	ldr	r2, [pc, #24]	; (8004ea4 <reg_wizchip_bus_cbfunc+0x4c>)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.BUS._write_data  = bus_wb;
 8004e90:	4a04      	ldr	r2, [pc, #16]	; (8004ea4 <reg_wizchip_bus_cbfunc+0x4c>)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	6213      	str	r3, [r2, #32]
   }
}
 8004e96:	bf00      	nop
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	20000014 	.word	0x20000014
 8004ea8:	08004dd5 	.word	0x08004dd5
 8004eac:	08004def 	.word	0x08004def

08004eb0 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	6039      	str	r1, [r7, #0]
 8004eba:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
#endif
   uint8_t* ptmp[2] = {0,0};
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60bb      	str	r3, [r7, #8]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60fb      	str	r3, [r7, #12]
   switch(cwtype)
 8004ec4:	79fb      	ldrb	r3, [r7, #7]
 8004ec6:	2b08      	cmp	r3, #8
 8004ec8:	d863      	bhi.n	8004f92 <ctlwizchip+0xe2>
 8004eca:	a201      	add	r2, pc, #4	; (adr r2, 8004ed0 <ctlwizchip+0x20>)
 8004ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed0:	08004ef5 	.word	0x08004ef5
 8004ed4:	08004efb 	.word	0x08004efb
 8004ed8:	08004f27 	.word	0x08004f27
 8004edc:	08004f1b 	.word	0x08004f1b
 8004ee0:	08004f35 	.word	0x08004f35
 8004ee4:	08004f41 	.word	0x08004f41
 8004ee8:	08004f93 	.word	0x08004f93
 8004eec:	08004f93 	.word	0x08004f93
 8004ef0:	08004f4f 	.word	0x08004f4f
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8004ef4:	f000 f896 	bl	8005024 <wizchip_sw_reset>
         break;
 8004ef8:	e04e      	b.n	8004f98 <ctlwizchip+0xe8>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d004      	beq.n	8004f0a <ctlwizchip+0x5a>
         {
            ptmp[0] = (uint8_t*)arg;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	60bb      	str	r3, [r7, #8]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	3308      	adds	r3, #8
 8004f08:	60fb      	str	r3, [r7, #12]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	4611      	mov	r1, r2
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 f97f 	bl	8005214 <wizchip_init>
 8004f16:	4603      	mov	r3, r0
 8004f18:	e03f      	b.n	8004f9a <ctlwizchip+0xea>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fa0e 	bl	8005340 <wizchip_clrinterrupt>
         break;
 8004f24:	e038      	b.n	8004f98 <ctlwizchip+0xe8>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8004f26:	f000 fa2d 	bl	8005384 <wizchip_getinterrupt>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	801a      	strh	r2, [r3, #0]
         break;
 8004f32:	e031      	b.n	8004f98 <ctlwizchip+0xe8>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 fa47 	bl	80053cc <wizchip_setinterruptmask>
         break;         
 8004f3e:	e02b      	b.n	8004f98 <ctlwizchip+0xe8>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8004f40:	f000 fa66 	bl	8005410 <wizchip_getinterruptmask>
 8004f44:	4603      	mov	r3, r0
 8004f46:	461a      	mov	r2, r3
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	801a      	strh	r2, [r3, #0]
         break;
 8004f4c:	e024      	b.n	8004f98 <ctlwizchip+0xe8>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
         break;
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8004f4e:	4b15      	ldr	r3, [pc, #84]	; (8004fa4 <ctlwizchip+0xf4>)
 8004f50:	789a      	ldrb	r2, [r3, #2]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	4a12      	ldr	r2, [pc, #72]	; (8004fa4 <ctlwizchip+0xf4>)
 8004f5c:	78d2      	ldrb	r2, [r2, #3]
 8004f5e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	3302      	adds	r3, #2
 8004f64:	4a0f      	ldr	r2, [pc, #60]	; (8004fa4 <ctlwizchip+0xf4>)
 8004f66:	7912      	ldrb	r2, [r2, #4]
 8004f68:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	3303      	adds	r3, #3
 8004f6e:	4a0d      	ldr	r2, [pc, #52]	; (8004fa4 <ctlwizchip+0xf4>)
 8004f70:	7952      	ldrb	r2, [r2, #5]
 8004f72:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	3304      	adds	r3, #4
 8004f78:	4a0a      	ldr	r2, [pc, #40]	; (8004fa4 <ctlwizchip+0xf4>)
 8004f7a:	7992      	ldrb	r2, [r2, #6]
 8004f7c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	3305      	adds	r3, #5
 8004f82:	4a08      	ldr	r2, [pc, #32]	; (8004fa4 <ctlwizchip+0xf4>)
 8004f84:	79d2      	ldrb	r2, [r2, #7]
 8004f86:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	3306      	adds	r3, #6
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	701a      	strb	r2, [r3, #0]
         break;
 8004f90:	e002      	b.n	8004f98 <ctlwizchip+0xe8>
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
   #endif      
      default:
         return -1;
 8004f92:	f04f 33ff 	mov.w	r3, #4294967295
 8004f96:	e000      	b.n	8004f9a <ctlwizchip+0xea>
   }
   return 0;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20000014 	.word	0x20000014

08004fa8 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	4603      	mov	r3, r0
 8004fb0:	6039      	str	r1, [r7, #0]
 8004fb2:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
 8004fb6:	2b05      	cmp	r3, #5
 8004fb8:	d82c      	bhi.n	8005014 <ctlnetwork+0x6c>
 8004fba:	a201      	add	r2, pc, #4	; (adr r2, 8004fc0 <ctlnetwork+0x18>)
 8004fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc0:	08004fd9 	.word	0x08004fd9
 8004fc4:	08004fe1 	.word	0x08004fe1
 8004fc8:	08004fe9 	.word	0x08004fe9
 8004fcc:	08004ff7 	.word	0x08004ff7
 8004fd0:	08005005 	.word	0x08005005
 8004fd4:	0800500d 	.word	0x0800500d
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8004fd8:	6838      	ldr	r0, [r7, #0]
 8004fda:	f000 fa41 	bl	8005460 <wizchip_setnetinfo>
         break;
 8004fde:	e01c      	b.n	800501a <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8004fe0:	6838      	ldr	r0, [r7, #0]
 8004fe2:	f000 fadb 	bl	800559c <wizchip_getnetinfo>
         break;
 8004fe6:	e018      	b.n	800501a <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fb85 	bl	80056fc <wizchip_setnetmode>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	e012      	b.n	800501c <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8004ff6:	f000 fba4 	bl	8005742 <wizchip_getnetmode>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	701a      	strb	r2, [r3, #0]
         break;
 8005002:	e00a      	b.n	800501a <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8005004:	6838      	ldr	r0, [r7, #0]
 8005006:	f000 fba5 	bl	8005754 <wizchip_settimeout>
         break;
 800500a:	e006      	b.n	800501a <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 800500c:	6838      	ldr	r0, [r7, #0]
 800500e:	f000 fbb6 	bl	800577e <wizchip_gettimeout>
         break;
 8005012:	e002      	b.n	800501a <ctlnetwork+0x72>
      default:
         return -1;
 8005014:	f04f 33ff 	mov.w	r3, #4294967295
 8005018:	e000      	b.n	800501c <ctlnetwork+0x74>
   }
   return 0;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800502a:	2008      	movs	r0, #8
 800502c:	f7fe fec4 	bl	8003db8 <WIZCHIP_READ>
 8005030:	4603      	mov	r3, r0
 8005032:	0a1b      	lsrs	r3, r3, #8
 8005034:	b29b      	uxth	r3, r3
 8005036:	b2db      	uxtb	r3, r3
 8005038:	713b      	strb	r3, [r7, #4]
 800503a:	2008      	movs	r0, #8
 800503c:	f7fe febc 	bl	8003db8 <WIZCHIP_READ>
 8005040:	4603      	mov	r3, r0
 8005042:	b2db      	uxtb	r3, r3
 8005044:	717b      	strb	r3, [r7, #5]
 8005046:	200a      	movs	r0, #10
 8005048:	f7fe feb6 	bl	8003db8 <WIZCHIP_READ>
 800504c:	4603      	mov	r3, r0
 800504e:	0a1b      	lsrs	r3, r3, #8
 8005050:	b29b      	uxth	r3, r3
 8005052:	b2db      	uxtb	r3, r3
 8005054:	71bb      	strb	r3, [r7, #6]
 8005056:	200a      	movs	r0, #10
 8005058:	f7fe feae 	bl	8003db8 <WIZCHIP_READ>
 800505c:	4603      	mov	r3, r0
 800505e:	b2db      	uxtb	r3, r3
 8005060:	71fb      	strb	r3, [r7, #7]
 8005062:	200c      	movs	r0, #12
 8005064:	f7fe fea8 	bl	8003db8 <WIZCHIP_READ>
 8005068:	4603      	mov	r3, r0
 800506a:	0a1b      	lsrs	r3, r3, #8
 800506c:	b29b      	uxth	r3, r3
 800506e:	b2db      	uxtb	r3, r3
 8005070:	723b      	strb	r3, [r7, #8]
 8005072:	200c      	movs	r0, #12
 8005074:	f7fe fea0 	bl	8003db8 <WIZCHIP_READ>
 8005078:	4603      	mov	r3, r0
 800507a:	b2db      	uxtb	r3, r3
 800507c:	727b      	strb	r3, [r7, #9]
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800507e:	2010      	movs	r0, #16
 8005080:	f7fe fe9a 	bl	8003db8 <WIZCHIP_READ>
 8005084:	4603      	mov	r3, r0
 8005086:	0a1b      	lsrs	r3, r3, #8
 8005088:	b29b      	uxth	r3, r3
 800508a:	b2db      	uxtb	r3, r3
 800508c:	753b      	strb	r3, [r7, #20]
 800508e:	2010      	movs	r0, #16
 8005090:	f7fe fe92 	bl	8003db8 <WIZCHIP_READ>
 8005094:	4603      	mov	r3, r0
 8005096:	b2db      	uxtb	r3, r3
 8005098:	757b      	strb	r3, [r7, #21]
 800509a:	2012      	movs	r0, #18
 800509c:	f7fe fe8c 	bl	8003db8 <WIZCHIP_READ>
 80050a0:	4603      	mov	r3, r0
 80050a2:	0a1b      	lsrs	r3, r3, #8
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	75bb      	strb	r3, [r7, #22]
 80050aa:	2012      	movs	r0, #18
 80050ac:	f7fe fe84 	bl	8003db8 <WIZCHIP_READ>
 80050b0:	4603      	mov	r3, r0
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	75fb      	strb	r3, [r7, #23]
 80050b6:	2014      	movs	r0, #20
 80050b8:	f7fe fe7e 	bl	8003db8 <WIZCHIP_READ>
 80050bc:	4603      	mov	r3, r0
 80050be:	0a1b      	lsrs	r3, r3, #8
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	743b      	strb	r3, [r7, #16]
 80050c6:	2014      	movs	r0, #20
 80050c8:	f7fe fe76 	bl	8003db8 <WIZCHIP_READ>
 80050cc:	4603      	mov	r3, r0
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	747b      	strb	r3, [r7, #17]
 80050d2:	2016      	movs	r0, #22
 80050d4:	f7fe fe70 	bl	8003db8 <WIZCHIP_READ>
 80050d8:	4603      	mov	r3, r0
 80050da:	0a1b      	lsrs	r3, r3, #8
 80050dc:	b29b      	uxth	r3, r3
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	74bb      	strb	r3, [r7, #18]
 80050e2:	2016      	movs	r0, #22
 80050e4:	f7fe fe68 	bl	8003db8 <WIZCHIP_READ>
 80050e8:	4603      	mov	r3, r0
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	74fb      	strb	r3, [r7, #19]
 80050ee:	2018      	movs	r0, #24
 80050f0:	f7fe fe62 	bl	8003db8 <WIZCHIP_READ>
 80050f4:	4603      	mov	r3, r0
 80050f6:	0a1b      	lsrs	r3, r3, #8
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	733b      	strb	r3, [r7, #12]
 80050fe:	2018      	movs	r0, #24
 8005100:	f7fe fe5a 	bl	8003db8 <WIZCHIP_READ>
 8005104:	4603      	mov	r3, r0
 8005106:	b2db      	uxtb	r3, r3
 8005108:	737b      	strb	r3, [r7, #13]
 800510a:	201a      	movs	r0, #26
 800510c:	f7fe fe54 	bl	8003db8 <WIZCHIP_READ>
 8005110:	4603      	mov	r3, r0
 8005112:	0a1b      	lsrs	r3, r3, #8
 8005114:	b29b      	uxth	r3, r3
 8005116:	b2db      	uxtb	r3, r3
 8005118:	73bb      	strb	r3, [r7, #14]
 800511a:	201a      	movs	r0, #26
 800511c:	f7fe fe4c 	bl	8003db8 <WIZCHIP_READ>
 8005120:	4603      	mov	r3, r0
 8005122:	b2db      	uxtb	r3, r3
 8005124:	73fb      	strb	r3, [r7, #15]
   setMR(MR_RST);
 8005126:	2180      	movs	r1, #128	; 0x80
 8005128:	2000      	movs	r0, #0
 800512a:	f7fe fe27 	bl	8003d7c <WIZCHIP_WRITE>
   getMR(); // for delay
 800512e:	2000      	movs	r0, #0
 8005130:	f7fe fe42 	bl	8003db8 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8005134:	793b      	ldrb	r3, [r7, #4]
 8005136:	b29b      	uxth	r3, r3
 8005138:	021b      	lsls	r3, r3, #8
 800513a:	b29a      	uxth	r2, r3
 800513c:	797b      	ldrb	r3, [r7, #5]
 800513e:	b29b      	uxth	r3, r3
 8005140:	4413      	add	r3, r2
 8005142:	b29b      	uxth	r3, r3
 8005144:	4619      	mov	r1, r3
 8005146:	2008      	movs	r0, #8
 8005148:	f7fe fe18 	bl	8003d7c <WIZCHIP_WRITE>
 800514c:	79bb      	ldrb	r3, [r7, #6]
 800514e:	b29b      	uxth	r3, r3
 8005150:	021b      	lsls	r3, r3, #8
 8005152:	b29a      	uxth	r2, r3
 8005154:	79fb      	ldrb	r3, [r7, #7]
 8005156:	b29b      	uxth	r3, r3
 8005158:	4413      	add	r3, r2
 800515a:	b29b      	uxth	r3, r3
 800515c:	4619      	mov	r1, r3
 800515e:	200a      	movs	r0, #10
 8005160:	f7fe fe0c 	bl	8003d7c <WIZCHIP_WRITE>
 8005164:	7a3b      	ldrb	r3, [r7, #8]
 8005166:	b29b      	uxth	r3, r3
 8005168:	021b      	lsls	r3, r3, #8
 800516a:	b29a      	uxth	r2, r3
 800516c:	7a7b      	ldrb	r3, [r7, #9]
 800516e:	b29b      	uxth	r3, r3
 8005170:	4413      	add	r3, r2
 8005172:	b29b      	uxth	r3, r3
 8005174:	4619      	mov	r1, r3
 8005176:	200c      	movs	r0, #12
 8005178:	f7fe fe00 	bl	8003d7c <WIZCHIP_WRITE>
   setGAR(gw);
 800517c:	7d3b      	ldrb	r3, [r7, #20]
 800517e:	b29b      	uxth	r3, r3
 8005180:	021b      	lsls	r3, r3, #8
 8005182:	b29a      	uxth	r2, r3
 8005184:	7d7b      	ldrb	r3, [r7, #21]
 8005186:	b29b      	uxth	r3, r3
 8005188:	4413      	add	r3, r2
 800518a:	b29b      	uxth	r3, r3
 800518c:	4619      	mov	r1, r3
 800518e:	2010      	movs	r0, #16
 8005190:	f7fe fdf4 	bl	8003d7c <WIZCHIP_WRITE>
 8005194:	7dbb      	ldrb	r3, [r7, #22]
 8005196:	b29b      	uxth	r3, r3
 8005198:	021b      	lsls	r3, r3, #8
 800519a:	b29a      	uxth	r2, r3
 800519c:	7dfb      	ldrb	r3, [r7, #23]
 800519e:	b29b      	uxth	r3, r3
 80051a0:	4413      	add	r3, r2
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	4619      	mov	r1, r3
 80051a6:	2012      	movs	r0, #18
 80051a8:	f7fe fde8 	bl	8003d7c <WIZCHIP_WRITE>
   setSUBR(sn);
 80051ac:	7c3b      	ldrb	r3, [r7, #16]
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	021b      	lsls	r3, r3, #8
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	7c7b      	ldrb	r3, [r7, #17]
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	4413      	add	r3, r2
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	4619      	mov	r1, r3
 80051be:	2014      	movs	r0, #20
 80051c0:	f7fe fddc 	bl	8003d7c <WIZCHIP_WRITE>
 80051c4:	7cbb      	ldrb	r3, [r7, #18]
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	021b      	lsls	r3, r3, #8
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	7cfb      	ldrb	r3, [r7, #19]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	4413      	add	r3, r2
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	4619      	mov	r1, r3
 80051d6:	2016      	movs	r0, #22
 80051d8:	f7fe fdd0 	bl	8003d7c <WIZCHIP_WRITE>
   setSIPR(sip);
 80051dc:	7b3b      	ldrb	r3, [r7, #12]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	021b      	lsls	r3, r3, #8
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	7b7b      	ldrb	r3, [r7, #13]
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	4413      	add	r3, r2
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	4619      	mov	r1, r3
 80051ee:	2018      	movs	r0, #24
 80051f0:	f7fe fdc4 	bl	8003d7c <WIZCHIP_WRITE>
 80051f4:	7bbb      	ldrb	r3, [r7, #14]
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	021b      	lsls	r3, r3, #8
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	4413      	add	r3, r2
 8005202:	b29b      	uxth	r3, r3
 8005204:	4619      	mov	r1, r3
 8005206:	201a      	movs	r0, #26
 8005208:	f7fe fdb8 	bl	8003d7c <WIZCHIP_WRITE>
}
 800520c:	bf00      	nop
 800520e:	3718      	adds	r7, #24
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800521e:	2300      	movs	r3, #0
 8005220:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8005222:	f7ff feff 	bl	8005024 <wizchip_sw_reset>
   if(txsize)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d040      	beq.n	80052ae <wizchip_init+0x9a>
   {
      tmp = 0;
 800522c:	2300      	movs	r3, #0
 800522e:	73bb      	strb	r3, [r7, #14]
//M20150601 : For integrating with W5300
#if _WIZCHIP_ == W5300
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005230:	2300      	movs	r3, #0
 8005232:	73fb      	strb	r3, [r7, #15]
 8005234:	e018      	b.n	8005268 <wizchip_init+0x54>
		{
			if(txsize[i] > 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8005236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	4413      	add	r3, r2
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b40      	cmp	r3, #64	; 0x40
 8005242:	d902      	bls.n	800524a <wizchip_init+0x36>
 8005244:	f04f 33ff 	mov.w	r3, #4294967295
 8005248:	e076      	b.n	8005338 <wizchip_init+0x124>
			tmp += txsize[i];
 800524a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	4413      	add	r3, r2
 8005252:	781a      	ldrb	r2, [r3, #0]
 8005254:	7bbb      	ldrb	r3, [r7, #14]
 8005256:	4413      	add	r3, r2
 8005258:	b2db      	uxtb	r3, r3
 800525a:	73bb      	strb	r3, [r7, #14]
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800525c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005260:	b2db      	uxtb	r3, r3
 8005262:	3301      	adds	r3, #1
 8005264:	b2db      	uxtb	r3, r3
 8005266:	73fb      	strb	r3, [r7, #15]
 8005268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800526c:	2b07      	cmp	r3, #7
 800526e:	dde2      	ble.n	8005236 <wizchip_init+0x22>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 8005270:	7bbb      	ldrb	r3, [r7, #14]
 8005272:	f003 0307 	and.w	r3, r3, #7
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	d002      	beq.n	8005282 <wizchip_init+0x6e>
 800527c:	f04f 33ff 	mov.w	r3, #4294967295
 8005280:	e05a      	b.n	8005338 <wizchip_init+0x124>
#else
			if(tmp > 16) return -1;
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005282:	2300      	movs	r3, #0
 8005284:	73fb      	strb	r3, [r7, #15]
 8005286:	e00e      	b.n	80052a6 <wizchip_init+0x92>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8005288:	7bf8      	ldrb	r0, [r7, #15]
 800528a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	4413      	add	r3, r2
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	4619      	mov	r1, r3
 8005296:	f7fe fdad 	bl	8003df4 <setTMSR>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800529a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	3301      	adds	r3, #1
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	73fb      	strb	r3, [r7, #15]
 80052a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052aa:	2b07      	cmp	r3, #7
 80052ac:	ddec      	ble.n	8005288 <wizchip_init+0x74>
#endif
		}	
   }

   if(rxsize)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d040      	beq.n	8005336 <wizchip_init+0x122>
   {
      tmp = 0;
 80052b4:	2300      	movs	r3, #0
 80052b6:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ == W5300
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80052b8:	2300      	movs	r3, #0
 80052ba:	73fb      	strb	r3, [r7, #15]
 80052bc:	e018      	b.n	80052f0 <wizchip_init+0xdc>
		{
			if(rxsize[i] > 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80052be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	4413      	add	r3, r2
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	2b40      	cmp	r3, #64	; 0x40
 80052ca:	d902      	bls.n	80052d2 <wizchip_init+0xbe>
 80052cc:	f04f 33ff 	mov.w	r3, #4294967295
 80052d0:	e032      	b.n	8005338 <wizchip_init+0x124>
			tmp += rxsize[i];
 80052d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	4413      	add	r3, r2
 80052da:	781a      	ldrb	r2, [r3, #0]
 80052dc:	7bbb      	ldrb	r3, [r7, #14]
 80052de:	4413      	add	r3, r2
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80052e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	3301      	adds	r3, #1
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	73fb      	strb	r3, [r7, #15]
 80052f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052f4:	2b07      	cmp	r3, #7
 80052f6:	dde2      	ble.n	80052be <wizchip_init+0xaa>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 80052f8:	7bbb      	ldrb	r3, [r7, #14]
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <wizchip_init+0xf6>
 8005304:	f04f 33ff 	mov.w	r3, #4294967295
 8005308:	e016      	b.n	8005338 <wizchip_init+0x124>
#else
			if(tmp > 16) return -1;
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800530a:	2300      	movs	r3, #0
 800530c:	73fb      	strb	r3, [r7, #15]
 800530e:	e00e      	b.n	800532e <wizchip_init+0x11a>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8005310:	7bf8      	ldrb	r0, [r7, #15]
 8005312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	4413      	add	r3, r2
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	4619      	mov	r1, r3
 800531e:	f7fe fdc5 	bl	8003eac <setRMSR>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005326:	b2db      	uxtb	r3, r3
 8005328:	3301      	adds	r3, #1
 800532a:	b2db      	uxtb	r3, r3
 800532c:	73fb      	strb	r3, [r7, #15]
 800532e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005332:	2b07      	cmp	r3, #7
 8005334:	ddec      	ble.n	8005310 <wizchip_init+0xfc>
#endif
		}
   }
   return 0;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	4603      	mov	r3, r0
 8005348:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 800534a:	88fb      	ldrh	r3, [r7, #6]
 800534c:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800534e:	88fb      	ldrh	r3, [r7, #6]
 8005350:	0a1b      	lsrs	r3, r3, #8
 8005352:	b29b      	uxth	r3, r3
 8005354:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   ir |= (1<<4); // IK_WOL
 8005356:	7bfb      	ldrb	r3, [r7, #15]
 8005358:	f043 0310 	orr.w	r3, r3, #16
 800535c:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ <= W5100S
   ir |= sir;
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
 800535e:	7bfb      	ldrb	r3, [r7, #15]
 8005360:	021b      	lsls	r3, r3, #8
 8005362:	b21a      	sxth	r2, r3
 8005364:	7bbb      	ldrb	r3, [r7, #14]
 8005366:	b21b      	sxth	r3, r3
 8005368:	4313      	orrs	r3, r2
 800536a:	b21b      	sxth	r3, r3
 800536c:	b29b      	uxth	r3, r3
 800536e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005372:	b29b      	uxth	r3, r3
 8005374:	4619      	mov	r1, r3
 8005376:	2002      	movs	r0, #2
 8005378:	f7fe fd00 	bl	8003d7c <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
   }

#endif   
}
 800537c:	bf00      	nop
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 800538a:	2300      	movs	r3, #0
 800538c:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 800538e:	2300      	movs	r3, #0
 8005390:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8005392:	2300      	movs	r3, #0
 8005394:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ <= W5100S
   ir = getIR();
   sir = ir & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_  == W5300
   ret = getIR();
 8005396:	2002      	movs	r0, #2
 8005398:	f7fe fd0e 	bl	8003db8 <WIZCHIP_READ>
 800539c:	4603      	mov	r3, r0
 800539e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80053a2:	80bb      	strh	r3, [r7, #4]
   ir = (uint8_t)(ret >> 8);
 80053a4:	88bb      	ldrh	r3, [r7, #4]
 80053a6:	0a1b      	lsrs	r3, r3, #8
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	71fb      	strb	r3, [r7, #7]
   sir = (uint8_t)ret;
 80053ac:	88bb      	ldrh	r3, [r7, #4]
 80053ae:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80053b0:	79bb      	ldrb	r3, [r7, #6]
 80053b2:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80053b4:	88bb      	ldrh	r3, [r7, #4]
 80053b6:	021b      	lsls	r3, r3, #8
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	79fb      	ldrb	r3, [r7, #7]
 80053bc:	b29b      	uxth	r3, r3
 80053be:	4413      	add	r3, r2
 80053c0:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80053c2:	88bb      	ldrh	r3, [r7, #4]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	4603      	mov	r3, r0
 80053d4:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 80053d6:	88fb      	ldrh	r3, [r7, #6]
 80053d8:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80053da:	88fb      	ldrh	r3, [r7, #6]
 80053dc:	0a1b      	lsrs	r3, r3, #8
 80053de:	b29b      	uxth	r3, r3
 80053e0:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 80053e2:	7bfb      	ldrb	r3, [r7, #15]
 80053e4:	f023 0310 	bic.w	r3, r3, #16
 80053e8:	73fb      	strb	r3, [r7, #15]
   simr &= 0x0F;
   imr |= simr;
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
 80053ec:	021b      	lsls	r3, r3, #8
 80053ee:	b21a      	sxth	r2, r3
 80053f0:	7bbb      	ldrb	r3, [r7, #14]
 80053f2:	b21b      	sxth	r3, r3
 80053f4:	4313      	orrs	r3, r2
 80053f6:	b21b      	sxth	r3, r3
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80053fe:	b29b      	uxth	r3, r3
 8005400:	4619      	mov	r1, r3
 8005402:	2004      	movs	r0, #4
 8005404:	f7fe fcba 	bl	8003d7c <WIZCHIP_WRITE>
#else
   setIMR(imr);
   setSIMR(simr);
#endif   
}
 8005408:	bf00      	nop
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8005416:	2300      	movs	r3, #0
 8005418:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800541a:	2300      	movs	r3, #0
 800541c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800541e:	2300      	movs	r3, #0
 8005420:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ < W5200
   imr  = getIMR();
   simr = imr & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   ret = getIMR();
 8005422:	2004      	movs	r0, #4
 8005424:	f7fe fcc8 	bl	8003db8 <WIZCHIP_READ>
 8005428:	4603      	mov	r3, r0
 800542a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800542e:	80bb      	strh	r3, [r7, #4]
   imr = (uint8_t)(ret >> 8);
 8005430:	88bb      	ldrh	r3, [r7, #4]
 8005432:	0a1b      	lsrs	r3, r3, #8
 8005434:	b29b      	uxth	r3, r3
 8005436:	71fb      	strb	r3, [r7, #7]
   simr = (uint8_t)ret;
 8005438:	88bb      	ldrh	r3, [r7, #4]
 800543a:	71bb      	strb	r3, [r7, #6]
   imr  = getIMR();
   simr = getSIMR();
#endif         

#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 800543c:	79fb      	ldrb	r3, [r7, #7]
 800543e:	f023 0310 	bic.w	r3, r3, #16
 8005442:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8005444:	79bb      	ldrb	r3, [r7, #6]
 8005446:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8005448:	88bb      	ldrh	r3, [r7, #4]
 800544a:	021b      	lsls	r3, r3, #8
 800544c:	b29a      	uxth	r2, r3
 800544e:	79fb      	ldrb	r3, [r7, #7]
 8005450:	b29b      	uxth	r3, r3
 8005452:	4413      	add	r3, r2
 8005454:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8005456:	88bb      	ldrh	r3, [r7, #4]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	b29b      	uxth	r3, r3
 800546e:	021b      	lsls	r3, r3, #8
 8005470:	b29a      	uxth	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	785b      	ldrb	r3, [r3, #1]
 8005476:	b29b      	uxth	r3, r3
 8005478:	4413      	add	r3, r2
 800547a:	b29b      	uxth	r3, r3
 800547c:	4619      	mov	r1, r3
 800547e:	2008      	movs	r0, #8
 8005480:	f7fe fc7c 	bl	8003d7c <WIZCHIP_WRITE>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	789b      	ldrb	r3, [r3, #2]
 8005488:	b29b      	uxth	r3, r3
 800548a:	021b      	lsls	r3, r3, #8
 800548c:	b29a      	uxth	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	78db      	ldrb	r3, [r3, #3]
 8005492:	b29b      	uxth	r3, r3
 8005494:	4413      	add	r3, r2
 8005496:	b29b      	uxth	r3, r3
 8005498:	4619      	mov	r1, r3
 800549a:	200a      	movs	r0, #10
 800549c:	f7fe fc6e 	bl	8003d7c <WIZCHIP_WRITE>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	791b      	ldrb	r3, [r3, #4]
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	021b      	lsls	r3, r3, #8
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	795b      	ldrb	r3, [r3, #5]
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	4413      	add	r3, r2
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	4619      	mov	r1, r3
 80054b6:	200c      	movs	r0, #12
 80054b8:	f7fe fc60 	bl	8003d7c <WIZCHIP_WRITE>
   setGAR(pnetinfo->gw);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	7b9b      	ldrb	r3, [r3, #14]
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	021b      	lsls	r3, r3, #8
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	7bdb      	ldrb	r3, [r3, #15]
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	4413      	add	r3, r2
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	4619      	mov	r1, r3
 80054d2:	2010      	movs	r0, #16
 80054d4:	f7fe fc52 	bl	8003d7c <WIZCHIP_WRITE>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	7c1b      	ldrb	r3, [r3, #16]
 80054dc:	b29b      	uxth	r3, r3
 80054de:	021b      	lsls	r3, r3, #8
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	7c5b      	ldrb	r3, [r3, #17]
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	4413      	add	r3, r2
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	4619      	mov	r1, r3
 80054ee:	2012      	movs	r0, #18
 80054f0:	f7fe fc44 	bl	8003d7c <WIZCHIP_WRITE>
   setSUBR(pnetinfo->sn);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	7a9b      	ldrb	r3, [r3, #10]
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	021b      	lsls	r3, r3, #8
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	7adb      	ldrb	r3, [r3, #11]
 8005502:	b29b      	uxth	r3, r3
 8005504:	4413      	add	r3, r2
 8005506:	b29b      	uxth	r3, r3
 8005508:	4619      	mov	r1, r3
 800550a:	2014      	movs	r0, #20
 800550c:	f7fe fc36 	bl	8003d7c <WIZCHIP_WRITE>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	7b1b      	ldrb	r3, [r3, #12]
 8005514:	b29b      	uxth	r3, r3
 8005516:	021b      	lsls	r3, r3, #8
 8005518:	b29a      	uxth	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	7b5b      	ldrb	r3, [r3, #13]
 800551e:	b29b      	uxth	r3, r3
 8005520:	4413      	add	r3, r2
 8005522:	b29b      	uxth	r3, r3
 8005524:	4619      	mov	r1, r3
 8005526:	2016      	movs	r0, #22
 8005528:	f7fe fc28 	bl	8003d7c <WIZCHIP_WRITE>
   setSIPR(pnetinfo->ip);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	799b      	ldrb	r3, [r3, #6]
 8005530:	b29b      	uxth	r3, r3
 8005532:	021b      	lsls	r3, r3, #8
 8005534:	b29a      	uxth	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	79db      	ldrb	r3, [r3, #7]
 800553a:	b29b      	uxth	r3, r3
 800553c:	4413      	add	r3, r2
 800553e:	b29b      	uxth	r3, r3
 8005540:	4619      	mov	r1, r3
 8005542:	2018      	movs	r0, #24
 8005544:	f7fe fc1a 	bl	8003d7c <WIZCHIP_WRITE>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	7a1b      	ldrb	r3, [r3, #8]
 800554c:	b29b      	uxth	r3, r3
 800554e:	021b      	lsls	r3, r3, #8
 8005550:	b29a      	uxth	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	7a5b      	ldrb	r3, [r3, #9]
 8005556:	b29b      	uxth	r3, r3
 8005558:	4413      	add	r3, r2
 800555a:	b29b      	uxth	r3, r3
 800555c:	4619      	mov	r1, r3
 800555e:	201a      	movs	r0, #26
 8005560:	f7fe fc0c 	bl	8003d7c <WIZCHIP_WRITE>
   _DNS_[0] = pnetinfo->dns[0];
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	7c9a      	ldrb	r2, [r3, #18]
 8005568:	4b0a      	ldr	r3, [pc, #40]	; (8005594 <wizchip_setnetinfo+0x134>)
 800556a:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	7cda      	ldrb	r2, [r3, #19]
 8005570:	4b08      	ldr	r3, [pc, #32]	; (8005594 <wizchip_setnetinfo+0x134>)
 8005572:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	7d1a      	ldrb	r2, [r3, #20]
 8005578:	4b06      	ldr	r3, [pc, #24]	; (8005594 <wizchip_setnetinfo+0x134>)
 800557a:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	7d5a      	ldrb	r2, [r3, #21]
 8005580:	4b04      	ldr	r3, [pc, #16]	; (8005594 <wizchip_setnetinfo+0x134>)
 8005582:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	7d9a      	ldrb	r2, [r3, #22]
 8005588:	4b03      	ldr	r3, [pc, #12]	; (8005598 <wizchip_setnetinfo+0x138>)
 800558a:	701a      	strb	r2, [r3, #0]
}
 800558c:	bf00      	nop
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	200008e8 	.word	0x200008e8
 8005598:	200008ec 	.word	0x200008ec

0800559c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80055a4:	2008      	movs	r0, #8
 80055a6:	f7fe fc07 	bl	8003db8 <WIZCHIP_READ>
 80055aa:	4603      	mov	r3, r0
 80055ac:	0a1b      	lsrs	r3, r3, #8
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	2008      	movs	r0, #8
 80055b8:	f7fe fbfe 	bl	8003db8 <WIZCHIP_READ>
 80055bc:	4603      	mov	r3, r0
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	705a      	strb	r2, [r3, #1]
 80055c4:	200a      	movs	r0, #10
 80055c6:	f7fe fbf7 	bl	8003db8 <WIZCHIP_READ>
 80055ca:	4603      	mov	r3, r0
 80055cc:	0a1b      	lsrs	r3, r3, #8
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	709a      	strb	r2, [r3, #2]
 80055d6:	200a      	movs	r0, #10
 80055d8:	f7fe fbee 	bl	8003db8 <WIZCHIP_READ>
 80055dc:	4603      	mov	r3, r0
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	70da      	strb	r2, [r3, #3]
 80055e4:	200c      	movs	r0, #12
 80055e6:	f7fe fbe7 	bl	8003db8 <WIZCHIP_READ>
 80055ea:	4603      	mov	r3, r0
 80055ec:	0a1b      	lsrs	r3, r3, #8
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	711a      	strb	r2, [r3, #4]
 80055f6:	200c      	movs	r0, #12
 80055f8:	f7fe fbde 	bl	8003db8 <WIZCHIP_READ>
 80055fc:	4603      	mov	r3, r0
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	715a      	strb	r2, [r3, #5]
   getGAR(pnetinfo->gw);
 8005604:	2010      	movs	r0, #16
 8005606:	f7fe fbd7 	bl	8003db8 <WIZCHIP_READ>
 800560a:	4603      	mov	r3, r0
 800560c:	0a1b      	lsrs	r3, r3, #8
 800560e:	b29b      	uxth	r3, r3
 8005610:	b2da      	uxtb	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	739a      	strb	r2, [r3, #14]
 8005616:	2010      	movs	r0, #16
 8005618:	f7fe fbce 	bl	8003db8 <WIZCHIP_READ>
 800561c:	4603      	mov	r3, r0
 800561e:	b2da      	uxtb	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	73da      	strb	r2, [r3, #15]
 8005624:	2012      	movs	r0, #18
 8005626:	f7fe fbc7 	bl	8003db8 <WIZCHIP_READ>
 800562a:	4603      	mov	r3, r0
 800562c:	0a1b      	lsrs	r3, r3, #8
 800562e:	b29b      	uxth	r3, r3
 8005630:	b2da      	uxtb	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	741a      	strb	r2, [r3, #16]
 8005636:	2012      	movs	r0, #18
 8005638:	f7fe fbbe 	bl	8003db8 <WIZCHIP_READ>
 800563c:	4603      	mov	r3, r0
 800563e:	b2da      	uxtb	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	745a      	strb	r2, [r3, #17]
   getSUBR(pnetinfo->sn);
 8005644:	2014      	movs	r0, #20
 8005646:	f7fe fbb7 	bl	8003db8 <WIZCHIP_READ>
 800564a:	4603      	mov	r3, r0
 800564c:	0a1b      	lsrs	r3, r3, #8
 800564e:	b29b      	uxth	r3, r3
 8005650:	b2da      	uxtb	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	729a      	strb	r2, [r3, #10]
 8005656:	2014      	movs	r0, #20
 8005658:	f7fe fbae 	bl	8003db8 <WIZCHIP_READ>
 800565c:	4603      	mov	r3, r0
 800565e:	b2da      	uxtb	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	72da      	strb	r2, [r3, #11]
 8005664:	2016      	movs	r0, #22
 8005666:	f7fe fba7 	bl	8003db8 <WIZCHIP_READ>
 800566a:	4603      	mov	r3, r0
 800566c:	0a1b      	lsrs	r3, r3, #8
 800566e:	b29b      	uxth	r3, r3
 8005670:	b2da      	uxtb	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	731a      	strb	r2, [r3, #12]
 8005676:	2016      	movs	r0, #22
 8005678:	f7fe fb9e 	bl	8003db8 <WIZCHIP_READ>
 800567c:	4603      	mov	r3, r0
 800567e:	b2da      	uxtb	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	735a      	strb	r2, [r3, #13]
   getSIPR(pnetinfo->ip);
 8005684:	2018      	movs	r0, #24
 8005686:	f7fe fb97 	bl	8003db8 <WIZCHIP_READ>
 800568a:	4603      	mov	r3, r0
 800568c:	0a1b      	lsrs	r3, r3, #8
 800568e:	b29b      	uxth	r3, r3
 8005690:	b2da      	uxtb	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	719a      	strb	r2, [r3, #6]
 8005696:	2018      	movs	r0, #24
 8005698:	f7fe fb8e 	bl	8003db8 <WIZCHIP_READ>
 800569c:	4603      	mov	r3, r0
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	71da      	strb	r2, [r3, #7]
 80056a4:	201a      	movs	r0, #26
 80056a6:	f7fe fb87 	bl	8003db8 <WIZCHIP_READ>
 80056aa:	4603      	mov	r3, r0
 80056ac:	0a1b      	lsrs	r3, r3, #8
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	721a      	strb	r2, [r3, #8]
 80056b6:	201a      	movs	r0, #26
 80056b8:	f7fe fb7e 	bl	8003db8 <WIZCHIP_READ>
 80056bc:	4603      	mov	r3, r0
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	725a      	strb	r2, [r3, #9]
   pnetinfo->dns[0]= _DNS_[0];
 80056c4:	4b0b      	ldr	r3, [pc, #44]	; (80056f4 <wizchip_getnetinfo+0x158>)
 80056c6:	781a      	ldrb	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80056cc:	4b09      	ldr	r3, [pc, #36]	; (80056f4 <wizchip_getnetinfo+0x158>)
 80056ce:	785a      	ldrb	r2, [r3, #1]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80056d4:	4b07      	ldr	r3, [pc, #28]	; (80056f4 <wizchip_getnetinfo+0x158>)
 80056d6:	789a      	ldrb	r2, [r3, #2]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80056dc:	4b05      	ldr	r3, [pc, #20]	; (80056f4 <wizchip_getnetinfo+0x158>)
 80056de:	78da      	ldrb	r2, [r3, #3]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80056e4:	4b04      	ldr	r3, [pc, #16]	; (80056f8 <wizchip_getnetinfo+0x15c>)
 80056e6:	781a      	ldrb	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	759a      	strb	r2, [r3, #22]
}
 80056ec:	bf00      	nop
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	200008e8 	.word	0x200008e8
 80056f8:	200008ec 	.word	0x200008ec

080056fc <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	4603      	mov	r3, r0
 8005704:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8005706:	2300      	movs	r3, #0
 8005708:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
 800570a:	79fb      	ldrb	r3, [r7, #7]
 800570c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <wizchip_setnetmode+0x1e>
 8005714:	f04f 33ff 	mov.w	r3, #4294967295
 8005718:	e00f      	b.n	800573a <wizchip_setnetmode+0x3e>
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
#endif      
   tmp = getMR();
 800571a:	2000      	movs	r0, #0
 800571c:	f7fe fb4c 	bl	8003db8 <WIZCHIP_READ>
 8005720:	4603      	mov	r3, r0
 8005722:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8005724:	7bfa      	ldrb	r2, [r7, #15]
 8005726:	79fb      	ldrb	r3, [r7, #7]
 8005728:	4313      	orrs	r3, r2
 800572a:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 800572c:	7bfb      	ldrb	r3, [r7, #15]
 800572e:	b29b      	uxth	r3, r3
 8005730:	4619      	mov	r1, r3
 8005732:	2000      	movs	r0, #0
 8005734:	f7fe fb22 	bl	8003d7c <WIZCHIP_WRITE>
   return 0;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8005746:	2000      	movs	r0, #0
 8005748:	f7fe fb36 	bl	8003db8 <WIZCHIP_READ>
 800574c:	4603      	mov	r3, r0
 800574e:	b2db      	uxtb	r3, r3
}
 8005750:	4618      	mov	r0, r3
 8005752:	bd80      	pop	{r7, pc}

08005754 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	b29b      	uxth	r3, r3
 8005762:	4619      	mov	r1, r3
 8005764:	201e      	movs	r0, #30
 8005766:	f7fe fb09 	bl	8003d7c <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	885b      	ldrh	r3, [r3, #2]
 800576e:	4619      	mov	r1, r3
 8005770:	201c      	movs	r0, #28
 8005772:	f7fe fb03 	bl	8003d7c <WIZCHIP_WRITE>
}
 8005776:	bf00      	nop
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b082      	sub	sp, #8
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8005786:	201e      	movs	r0, #30
 8005788:	f7fe fb16 	bl	8003db8 <WIZCHIP_READ>
 800578c:	4603      	mov	r3, r0
 800578e:	b2da      	uxtb	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8005794:	201c      	movs	r0, #28
 8005796:	f7fe fb0f 	bl	8003db8 <WIZCHIP_READ>
 800579a:	4603      	mov	r3, r0
 800579c:	461a      	mov	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	805a      	strh	r2, [r3, #2]
}
 80057a2:	bf00      	nop
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
	...

080057ac <get_seconds_from_ntp_server>:
47) UTC+12:45 (Summer)New Zealand
48) UTC+13:00 Tonga
49) UTC+14:00 Kiribati (Line Islands)
*/
void get_seconds_from_ntp_server(uint8_t *buf, uint16_t idx)
{
 80057ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057b0:	b0d0      	sub	sp, #320	; 0x140
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
 80057b8:	460b      	mov	r3, r1
 80057ba:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
	tstamp seconds = 0;
 80057be:	f04f 0200 	mov.w	r2, #0
 80057c2:	f04f 0300 	mov.w	r3, #0
 80057c6:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	uint8_t i=0;
 80057ca:	2300      	movs	r3, #0
 80057cc:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	for (i = 0; i < 4; i++)
 80057d0:	2300      	movs	r3, #0
 80057d2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80057d6:	e028      	b.n	800582a <get_seconds_from_ntp_server+0x7e>
	{
		seconds = (seconds << 8) | buf[idx + i];
 80057d8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80057dc:	f04f 0000 	mov.w	r0, #0
 80057e0:	f04f 0100 	mov.w	r1, #0
 80057e4:	0219      	lsls	r1, r3, #8
 80057e6:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80057ea:	0210      	lsls	r0, r2, #8
 80057ec:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 80057f0:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80057f4:	4413      	add	r3, r2
 80057f6:	461a      	mov	r2, r3
 80057f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057fc:	4413      	add	r3, r2
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2200      	movs	r2, #0
 8005804:	461c      	mov	r4, r3
 8005806:	4615      	mov	r5, r2
 8005808:	ea40 0304 	orr.w	r3, r0, r4
 800580c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005810:	ea41 0305 	orr.w	r3, r1, r5
 8005814:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005818:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800581c:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	for (i = 0; i < 4; i++)
 8005820:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8005824:	3301      	adds	r3, #1
 8005826:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800582a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800582e:	2b03      	cmp	r3, #3
 8005830:	d9d2      	bls.n	80057d8 <get_seconds_from_ntp_server+0x2c>
	}
	switch (time_zone)
 8005832:	4be2      	ldr	r3, [pc, #904]	; (8005bbc <get_seconds_from_ntp_server+0x410>)
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	2b31      	cmp	r3, #49	; 0x31
 8005838:	f200 82a3 	bhi.w	8005d82 <get_seconds_from_ntp_server+0x5d6>
 800583c:	a201      	add	r2, pc, #4	; (adr r2, 8005844 <get_seconds_from_ntp_server+0x98>)
 800583e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005842:	bf00      	nop
 8005844:	0800590d 	.word	0x0800590d
 8005848:	0800592b 	.word	0x0800592b
 800584c:	08005949 	.word	0x08005949
 8005850:	08005967 	.word	0x08005967
 8005854:	08005985 	.word	0x08005985
 8005858:	080059a3 	.word	0x080059a3
 800585c:	080059a3 	.word	0x080059a3
 8005860:	080059c1 	.word	0x080059c1
 8005864:	080059c1 	.word	0x080059c1
 8005868:	080059df 	.word	0x080059df
 800586c:	080059df 	.word	0x080059df
 8005870:	080059fd 	.word	0x080059fd
 8005874:	080059fd 	.word	0x080059fd
 8005878:	080059fd 	.word	0x080059fd
 800587c:	08005a1b 	.word	0x08005a1b
 8005880:	08005a39 	.word	0x08005a39
 8005884:	08005a39 	.word	0x08005a39
 8005888:	08005a57 	.word	0x08005a57
 800588c:	08005a75 	.word	0x08005a75
 8005890:	08005a93 	.word	0x08005a93
 8005894:	08005ab1 	.word	0x08005ab1
 8005898:	08005d83 	.word	0x08005d83
 800589c:	08005d83 	.word	0x08005d83
 80058a0:	08005acf 	.word	0x08005acf
 80058a4:	08005acf 	.word	0x08005acf
 80058a8:	08005acf 	.word	0x08005acf
 80058ac:	08005aed 	.word	0x08005aed
 80058b0:	08005aed 	.word	0x08005aed
 80058b4:	08005b0b 	.word	0x08005b0b
 80058b8:	08005b0b 	.word	0x08005b0b
 80058bc:	08005b2b 	.word	0x08005b2b
 80058c0:	08005b4b 	.word	0x08005b4b
 80058c4:	08005b69 	.word	0x08005b69
 80058c8:	08005b85 	.word	0x08005b85
 80058cc:	08005ba1 	.word	0x08005ba1
 80058d0:	08005bed 	.word	0x08005bed
 80058d4:	08005c09 	.word	0x08005c09
 80058d8:	08005c25 	.word	0x08005c25
 80058dc:	08005c41 	.word	0x08005c41
 80058e0:	08005c5d 	.word	0x08005c5d
 80058e4:	08005c77 	.word	0x08005c77
 80058e8:	08005c93 	.word	0x08005c93
 80058ec:	08005caf 	.word	0x08005caf
 80058f0:	08005ccb 	.word	0x08005ccb
 80058f4:	08005ce7 	.word	0x08005ce7
 80058f8:	08005d03 	.word	0x08005d03
 80058fc:	08005d1f 	.word	0x08005d1f
 8005900:	08005d3b 	.word	0x08005d3b
 8005904:	08005d57 	.word	0x08005d57
 8005908:	08005d6d 	.word	0x08005d6d
	{
	case 0:
		seconds -=  12*3600;
 800590c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005910:	49ab      	ldr	r1, [pc, #684]	; (8005bc0 <get_seconds_from_ntp_server+0x414>)
 8005912:	1851      	adds	r1, r2, r1
 8005914:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8005918:	f143 33ff 	adc.w	r3, r3, #4294967295
 800591c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005920:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 8005924:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005928:	e22b      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 1:
		seconds -=  11*3600;
 800592a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800592e:	49a5      	ldr	r1, [pc, #660]	; (8005bc4 <get_seconds_from_ntp_server+0x418>)
 8005930:	1851      	adds	r1, r2, r1
 8005932:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8005936:	f143 33ff 	adc.w	r3, r3, #4294967295
 800593a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800593e:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8005942:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005946:	e21c      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 2:
		seconds -=  10*3600;
 8005948:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800594c:	499e      	ldr	r1, [pc, #632]	; (8005bc8 <get_seconds_from_ntp_server+0x41c>)
 800594e:	1851      	adds	r1, r2, r1
 8005950:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8005954:	f143 33ff 	adc.w	r3, r3, #4294967295
 8005958:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800595c:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8005960:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005964:	e20d      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 3:
		seconds -=  (9*3600+30*60);
 8005966:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800596a:	4998      	ldr	r1, [pc, #608]	; (8005bcc <get_seconds_from_ntp_server+0x420>)
 800596c:	1851      	adds	r1, r2, r1
 800596e:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8005972:	f143 33ff 	adc.w	r3, r3, #4294967295
 8005976:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800597a:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800597e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005982:	e1fe      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 4:
		seconds -=  9*3600;
 8005984:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005988:	4991      	ldr	r1, [pc, #580]	; (8005bd0 <get_seconds_from_ntp_server+0x424>)
 800598a:	1851      	adds	r1, r2, r1
 800598c:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8005990:	f143 33ff 	adc.w	r3, r3, #4294967295
 8005994:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005998:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 800599c:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 80059a0:	e1ef      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 5:
	case 6:
		seconds -=  8*3600;
 80059a2:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80059a6:	f5b2 41e1 	subs.w	r1, r2, #28800	; 0x7080
 80059aa:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80059ae:	f143 33ff 	adc.w	r3, r3, #4294967295
 80059b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80059b6:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80059ba:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 80059be:	e1e0      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 7:
	case 8:
		seconds -=  7*3600;
 80059c0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80059c4:	4983      	ldr	r1, [pc, #524]	; (8005bd4 <get_seconds_from_ntp_server+0x428>)
 80059c6:	1851      	adds	r1, r2, r1
 80059c8:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 80059cc:	f143 33ff 	adc.w	r3, r3, #4294967295
 80059d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80059d4:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 80059d8:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 80059dc:	e1d1      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 9:
	case 10:
		seconds -=  6*3600;
 80059de:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80059e2:	497d      	ldr	r1, [pc, #500]	; (8005bd8 <get_seconds_from_ntp_server+0x42c>)
 80059e4:	1851      	adds	r1, r2, r1
 80059e6:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 80059ea:	f143 33ff 	adc.w	r3, r3, #4294967295
 80059ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059f2:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80059f6:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 80059fa:	e1c2      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 11:
	case 12:
	case 13:
		seconds -= 5*3600;
 80059fc:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005a00:	4976      	ldr	r1, [pc, #472]	; (8005bdc <get_seconds_from_ntp_server+0x430>)
 8005a02:	1851      	adds	r1, r2, r1
 8005a04:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8005a08:	f143 33ff 	adc.w	r3, r3, #4294967295
 8005a0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005a10:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8005a14:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005a18:	e1b3      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 14:
		seconds -=  (4*3600+30*60);
 8005a1a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005a1e:	4970      	ldr	r1, [pc, #448]	; (8005be0 <get_seconds_from_ntp_server+0x434>)
 8005a20:	1851      	adds	r1, r2, r1
 8005a22:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8005a26:	f143 33ff 	adc.w	r3, r3, #4294967295
 8005a2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005a2e:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8005a32:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005a36:	e1a4      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 15:
	case 16:
		seconds -=  4*3600;
 8005a38:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005a3c:	f5b2 5161 	subs.w	r1, r2, #14400	; 0x3840
 8005a40:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8005a44:	f143 33ff 	adc.w	r3, r3, #4294967295
 8005a48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a4c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8005a50:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005a54:	e195      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 17:
		seconds -=  (3*3600+30*60);
 8005a56:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005a5a:	4962      	ldr	r1, [pc, #392]	; (8005be4 <get_seconds_from_ntp_server+0x438>)
 8005a5c:	1851      	adds	r1, r2, r1
 8005a5e:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8005a62:	f143 33ff 	adc.w	r3, r3, #4294967295
 8005a66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a6a:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8005a6e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005a72:	e186      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 18:
		seconds -=  3*3600;
 8005a74:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005a78:	495b      	ldr	r1, [pc, #364]	; (8005be8 <get_seconds_from_ntp_server+0x43c>)
 8005a7a:	1851      	adds	r1, r2, r1
 8005a7c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8005a80:	f143 33ff 	adc.w	r3, r3, #4294967295
 8005a84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005a88:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8005a8c:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005a90:	e177      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 19:
		seconds -=  2*3600;
 8005a92:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005a96:	f5b2 51e1 	subs.w	r1, r2, #7200	; 0x1c20
 8005a9a:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8005a9e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8005aa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005aa6:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8005aaa:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005aae:	e168      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 20:
		seconds -=  1*3600;
 8005ab0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005ab4:	f5b2 6161 	subs.w	r1, r2, #3600	; 0xe10
 8005ab8:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8005abc:	f143 33ff 	adc.w	r3, r3, #4294967295
 8005ac0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ac4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8005ac8:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005acc:	e159      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 22:
		break;
	case 23:
	case 24:
	case 25:
		seconds +=  1*3600;
 8005ace:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005ad2:	f512 6161 	adds.w	r1, r2, #3600	; 0xe10
 8005ad6:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8005ada:	f143 0300 	adc.w	r3, r3, #0
 8005ade:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005ae2:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8005ae6:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005aea:	e14a      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 26:
	case 27:
		seconds +=  2*3600;
 8005aec:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005af0:	f512 51e1 	adds.w	r1, r2, #7200	; 0x1c20
 8005af4:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8005af8:	f143 0300 	adc.w	r3, r3, #0
 8005afc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b00:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8005b04:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005b08:	e13b      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 28:
	case 29:
		seconds +=  3*3600;
 8005b0a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005b0e:	f642 2130 	movw	r1, #10800	; 0x2a30
 8005b12:	1851      	adds	r1, r2, r1
 8005b14:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8005b18:	f143 0300 	adc.w	r3, r3, #0
 8005b1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005b20:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8005b24:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005b28:	e12b      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 30:
		seconds +=  (3*3600+30*60);
 8005b2a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005b2e:	f243 1138 	movw	r1, #12600	; 0x3138
 8005b32:	1851      	adds	r1, r2, r1
 8005b34:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8005b38:	f143 0300 	adc.w	r3, r3, #0
 8005b3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005b40:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8005b44:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005b48:	e11b      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 31:
		seconds +=  4*3600;
 8005b4a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005b4e:	f512 5161 	adds.w	r1, r2, #14400	; 0x3840
 8005b52:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8005b56:	f143 0300 	adc.w	r3, r3, #0
 8005b5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b5e:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8005b62:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005b66:	e10c      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 32:
		seconds +=  (4*3600+30*60);
 8005b68:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005b6c:	f643 7148 	movw	r1, #16200	; 0x3f48
 8005b70:	1851      	adds	r1, r2, r1
 8005b72:	67b9      	str	r1, [r7, #120]	; 0x78
 8005b74:	f143 0300 	adc.w	r3, r3, #0
 8005b78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b7a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8005b7e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005b82:	e0fe      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 33:
		seconds +=  5*3600;
 8005b84:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005b88:	f244 6150 	movw	r1, #18000	; 0x4650
 8005b8c:	1851      	adds	r1, r2, r1
 8005b8e:	6739      	str	r1, [r7, #112]	; 0x70
 8005b90:	f143 0300 	adc.w	r3, r3, #0
 8005b94:	677b      	str	r3, [r7, #116]	; 0x74
 8005b96:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8005b9a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005b9e:	e0f0      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 34:
		seconds +=  (5*3600+30*60);
 8005ba0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005ba4:	f644 5158 	movw	r1, #19800	; 0x4d58
 8005ba8:	1851      	adds	r1, r2, r1
 8005baa:	66b9      	str	r1, [r7, #104]	; 0x68
 8005bac:	f143 0300 	adc.w	r3, r3, #0
 8005bb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bb2:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8005bb6:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005bba:	e0e2      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
 8005bbc:	20000b9c 	.word	0x20000b9c
 8005bc0:	ffff5740 	.word	0xffff5740
 8005bc4:	ffff6550 	.word	0xffff6550
 8005bc8:	ffff7360 	.word	0xffff7360
 8005bcc:	ffff7a68 	.word	0xffff7a68
 8005bd0:	ffff8170 	.word	0xffff8170
 8005bd4:	ffff9d90 	.word	0xffff9d90
 8005bd8:	ffffaba0 	.word	0xffffaba0
 8005bdc:	ffffb9b0 	.word	0xffffb9b0
 8005be0:	ffffc0b8 	.word	0xffffc0b8
 8005be4:	ffffcec8 	.word	0xffffcec8
 8005be8:	ffffd5d0 	.word	0xffffd5d0
	case 35:
		seconds +=  (5*3600+45*60);
 8005bec:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005bf0:	f245 01dc 	movw	r1, #20700	; 0x50dc
 8005bf4:	1851      	adds	r1, r2, r1
 8005bf6:	6639      	str	r1, [r7, #96]	; 0x60
 8005bf8:	f143 0300 	adc.w	r3, r3, #0
 8005bfc:	667b      	str	r3, [r7, #100]	; 0x64
 8005bfe:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8005c02:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005c06:	e0bc      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 36:
		seconds +=  6*3600;
 8005c08:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005c0c:	f245 4160 	movw	r1, #21600	; 0x5460
 8005c10:	1851      	adds	r1, r2, r1
 8005c12:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c14:	f143 0300 	adc.w	r3, r3, #0
 8005c18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c1a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8005c1e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005c22:	e0ae      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 37:
		seconds +=  (6*3600+30*60);
 8005c24:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005c28:	f645 3168 	movw	r1, #23400	; 0x5b68
 8005c2c:	1851      	adds	r1, r2, r1
 8005c2e:	6539      	str	r1, [r7, #80]	; 0x50
 8005c30:	f143 0300 	adc.w	r3, r3, #0
 8005c34:	657b      	str	r3, [r7, #84]	; 0x54
 8005c36:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8005c3a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005c3e:	e0a0      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 38:
		seconds +=  7*3600;
 8005c40:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005c44:	f246 2170 	movw	r1, #25200	; 0x6270
 8005c48:	1851      	adds	r1, r2, r1
 8005c4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c4c:	f143 0300 	adc.w	r3, r3, #0
 8005c50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c52:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8005c56:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005c5a:	e092      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 39:
		seconds +=  8*3600;
 8005c5c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005c60:	f512 41e1 	adds.w	r1, r2, #28800	; 0x7080
 8005c64:	6439      	str	r1, [r7, #64]	; 0x40
 8005c66:	f143 0300 	adc.w	r3, r3, #0
 8005c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c6c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8005c70:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005c74:	e085      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 40:
		seconds +=  9*3600;
 8005c76:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005c7a:	f647 6190 	movw	r1, #32400	; 0x7e90
 8005c7e:	1851      	adds	r1, r2, r1
 8005c80:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c82:	f143 0300 	adc.w	r3, r3, #0
 8005c86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c88:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8005c8c:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005c90:	e077      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 41:
		seconds +=  (9*3600+30*60);
 8005c92:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005c96:	f248 5198 	movw	r1, #34200	; 0x8598
 8005c9a:	1851      	adds	r1, r2, r1
 8005c9c:	6339      	str	r1, [r7, #48]	; 0x30
 8005c9e:	f143 0300 	adc.w	r3, r3, #0
 8005ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ca4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005ca8:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005cac:	e069      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 42:
		seconds +=  10*3600;
 8005cae:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005cb2:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 8005cb6:	1851      	adds	r1, r2, r1
 8005cb8:	62b9      	str	r1, [r7, #40]	; 0x28
 8005cba:	f143 0300 	adc.w	r3, r3, #0
 8005cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cc0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8005cc4:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005cc8:	e05b      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 43:
		seconds +=  (10*3600+30*60);
 8005cca:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005cce:	f249 31a8 	movw	r1, #37800	; 0x93a8
 8005cd2:	1851      	adds	r1, r2, r1
 8005cd4:	6239      	str	r1, [r7, #32]
 8005cd6:	f143 0300 	adc.w	r3, r3, #0
 8005cda:	627b      	str	r3, [r7, #36]	; 0x24
 8005cdc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005ce0:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005ce4:	e04d      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 44:
		seconds +=  11*3600;
 8005ce6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005cea:	f649 21b0 	movw	r1, #39600	; 0x9ab0
 8005cee:	1851      	adds	r1, r2, r1
 8005cf0:	61b9      	str	r1, [r7, #24]
 8005cf2:	f143 0300 	adc.w	r3, r3, #0
 8005cf6:	61fb      	str	r3, [r7, #28]
 8005cf8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005cfc:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005d00:	e03f      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 45:
		seconds +=  (11*3600+30*60);
 8005d02:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005d06:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
 8005d0a:	1851      	adds	r1, r2, r1
 8005d0c:	6139      	str	r1, [r7, #16]
 8005d0e:	f143 0300 	adc.w	r3, r3, #0
 8005d12:	617b      	str	r3, [r7, #20]
 8005d14:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005d18:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005d1c:	e031      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 46:
		seconds +=  12*3600;
 8005d1e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005d22:	f64a 01c0 	movw	r1, #43200	; 0xa8c0
 8005d26:	1851      	adds	r1, r2, r1
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	f143 0300 	adc.w	r3, r3, #0
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005d34:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005d38:	e023      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 47:
		seconds +=  (12*3600+45*60);
 8005d3a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005d3e:	f24b 314c 	movw	r1, #45900	; 0xb34c
 8005d42:	1851      	adds	r1, r2, r1
 8005d44:	6039      	str	r1, [r7, #0]
 8005d46:	f143 0300 	adc.w	r3, r3, #0
 8005d4a:	607b      	str	r3, [r7, #4]
 8005d4c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005d50:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8005d54:	e015      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 48:
		seconds +=  13*3600;
 8005d56:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005d5a:	f24b 61d0 	movw	r1, #46800	; 0xb6d0
 8005d5e:	eb12 0a01 	adds.w	sl, r2, r1
 8005d62:	f143 0b00 	adc.w	fp, r3, #0
 8005d66:	e9c7 ab4e 	strd	sl, fp, [r7, #312]	; 0x138
		break;
 8005d6a:	e00a      	b.n	8005d82 <get_seconds_from_ntp_server+0x5d6>
	case 49:
		seconds +=  14*3600;
 8005d6c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005d70:	f24c 41e0 	movw	r1, #50400	; 0xc4e0
 8005d74:	eb12 0801 	adds.w	r8, r2, r1
 8005d78:	f143 0900 	adc.w	r9, r3, #0
 8005d7c:	e9c7 894e 	strd	r8, r9, [r7, #312]	; 0x138
		break;
 8005d80:	bf00      	nop

	}

	//calculation for date
	calcdatetime(seconds);
 8005d82:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8005d86:	f000 f93f 	bl	8006008 <calcdatetime>
}
 8005d8a:	bf00      	nop
 8005d8c:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8005d90:	46bd      	mov	sp, r7
 8005d92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d96:	bf00      	nop

08005d98 <SNTP_init>:

void SNTP_init(uint8_t s, uint8_t *ntp_server, uint8_t tz, uint8_t *buf)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	607b      	str	r3, [r7, #4]
 8005da2:	4603      	mov	r3, r0
 8005da4:	73fb      	strb	r3, [r7, #15]
 8005da6:	4613      	mov	r3, r2
 8005da8:	73bb      	strb	r3, [r7, #14]
	NTP_SOCKET = s;
 8005daa:	4a34      	ldr	r2, [pc, #208]	; (8005e7c <SNTP_init+0xe4>)
 8005dac:	7bfb      	ldrb	r3, [r7, #15]
 8005dae:	7013      	strb	r3, [r2, #0]

	NTPformat.dstaddr[0] = ntp_server[0];
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	781a      	ldrb	r2, [r3, #0]
 8005db4:	4b32      	ldr	r3, [pc, #200]	; (8005e80 <SNTP_init+0xe8>)
 8005db6:	701a      	strb	r2, [r3, #0]
	NTPformat.dstaddr[1] = ntp_server[1];
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	785a      	ldrb	r2, [r3, #1]
 8005dbc:	4b30      	ldr	r3, [pc, #192]	; (8005e80 <SNTP_init+0xe8>)
 8005dbe:	705a      	strb	r2, [r3, #1]
	NTPformat.dstaddr[2] = ntp_server[2];
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	789a      	ldrb	r2, [r3, #2]
 8005dc4:	4b2e      	ldr	r3, [pc, #184]	; (8005e80 <SNTP_init+0xe8>)
 8005dc6:	709a      	strb	r2, [r3, #2]
	NTPformat.dstaddr[3] = ntp_server[3];
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	78da      	ldrb	r2, [r3, #3]
 8005dcc:	4b2c      	ldr	r3, [pc, #176]	; (8005e80 <SNTP_init+0xe8>)
 8005dce:	70da      	strb	r2, [r3, #3]

	time_zone = tz;
 8005dd0:	4a2c      	ldr	r2, [pc, #176]	; (8005e84 <SNTP_init+0xec>)
 8005dd2:	7bbb      	ldrb	r3, [r7, #14]
 8005dd4:	7013      	strb	r3, [r2, #0]

	data_buf = buf;
 8005dd6:	4a2c      	ldr	r2, [pc, #176]	; (8005e88 <SNTP_init+0xf0>)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6013      	str	r3, [r2, #0]

	uint8_t Flag;
	NTPformat.leap = 0;           /* leap indicator */
 8005ddc:	4b28      	ldr	r3, [pc, #160]	; (8005e80 <SNTP_init+0xe8>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	715a      	strb	r2, [r3, #5]
	NTPformat.version = 4;        /* version number */
 8005de2:	4b27      	ldr	r3, [pc, #156]	; (8005e80 <SNTP_init+0xe8>)
 8005de4:	2204      	movs	r2, #4
 8005de6:	711a      	strb	r2, [r3, #4]
	NTPformat.mode = 3;           /* mode */
 8005de8:	4b25      	ldr	r3, [pc, #148]	; (8005e80 <SNTP_init+0xe8>)
 8005dea:	2203      	movs	r2, #3
 8005dec:	719a      	strb	r2, [r3, #6]
	NTPformat.stratum = 0;        /* stratum */
 8005dee:	4b24      	ldr	r3, [pc, #144]	; (8005e80 <SNTP_init+0xe8>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	71da      	strb	r2, [r3, #7]
	NTPformat.poll = 0;           /* poll interval */
 8005df4:	4b22      	ldr	r3, [pc, #136]	; (8005e80 <SNTP_init+0xe8>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	721a      	strb	r2, [r3, #8]
	NTPformat.precision = 0;      /* precision */
 8005dfa:	4b21      	ldr	r3, [pc, #132]	; (8005e80 <SNTP_init+0xe8>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	725a      	strb	r2, [r3, #9]
	NTPformat.rootdelay = 0;      /* root delay */
 8005e00:	4b1f      	ldr	r3, [pc, #124]	; (8005e80 <SNTP_init+0xe8>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	60da      	str	r2, [r3, #12]
	NTPformat.rootdisp = 0;       /* root dispersion */
 8005e06:	4b1e      	ldr	r3, [pc, #120]	; (8005e80 <SNTP_init+0xe8>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	611a      	str	r2, [r3, #16]
	NTPformat.refid = 0;          /* reference ID */
 8005e0c:	4b1c      	ldr	r3, [pc, #112]	; (8005e80 <SNTP_init+0xe8>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	751a      	strb	r2, [r3, #20]
	NTPformat.reftime = 0;        /* reference time */
 8005e12:	491b      	ldr	r1, [pc, #108]	; (8005e80 <SNTP_init+0xe8>)
 8005e14:	f04f 0200 	mov.w	r2, #0
 8005e18:	f04f 0300 	mov.w	r3, #0
 8005e1c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	NTPformat.org = 0;            /* origin timestamp */
 8005e20:	4917      	ldr	r1, [pc, #92]	; (8005e80 <SNTP_init+0xe8>)
 8005e22:	f04f 0200 	mov.w	r2, #0
 8005e26:	f04f 0300 	mov.w	r3, #0
 8005e2a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	NTPformat.rec = 0;            /* receive timestamp */
 8005e2e:	4914      	ldr	r1, [pc, #80]	; (8005e80 <SNTP_init+0xe8>)
 8005e30:	f04f 0200 	mov.w	r2, #0
 8005e34:	f04f 0300 	mov.w	r3, #0
 8005e38:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	NTPformat.xmt = 1;            /* transmit timestamp */
 8005e3c:	4910      	ldr	r1, [pc, #64]	; (8005e80 <SNTP_init+0xe8>)
 8005e3e:	f04f 0201 	mov.w	r2, #1
 8005e42:	f04f 0300 	mov.w	r3, #0
 8005e46:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	Flag = (NTPformat.leap<<6)+(NTPformat.version<<3)+NTPformat.mode; //one byte Flag
 8005e4a:	4b0d      	ldr	r3, [pc, #52]	; (8005e80 <SNTP_init+0xe8>)
 8005e4c:	795b      	ldrb	r3, [r3, #5]
 8005e4e:	019b      	lsls	r3, r3, #6
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	4b0b      	ldr	r3, [pc, #44]	; (8005e80 <SNTP_init+0xe8>)
 8005e54:	791b      	ldrb	r3, [r3, #4]
 8005e56:	00db      	lsls	r3, r3, #3
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	4413      	add	r3, r2
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	4b08      	ldr	r3, [pc, #32]	; (8005e80 <SNTP_init+0xe8>)
 8005e60:	799b      	ldrb	r3, [r3, #6]
 8005e62:	4413      	add	r3, r2
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	75fb      	strb	r3, [r7, #23]
 8005e68:	7dfa      	ldrb	r2, [r7, #23]
	memcpy(ntpmessage,(void const*)(&Flag),1);
 8005e6a:	4b08      	ldr	r3, [pc, #32]	; (8005e8c <SNTP_init+0xf4>)
 8005e6c:	701a      	strb	r2, [r3, #0]
}
 8005e6e:	bf00      	nop
 8005e70:	371c      	adds	r7, #28
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	20000ba8 	.word	0x20000ba8
 8005e80:	20000bb0 	.word	0x20000bb0
 8005e84:	20000b9c 	.word	0x20000b9c
 8005e88:	20000b68 	.word	0x20000b68
 8005e8c:	20000b6c 	.word	0x20000b6c

08005e90 <SNTP_run>:

int8_t SNTP_run(datetime *time)
{
 8005e90:	b590      	push	{r4, r7, lr}
 8005e92:	b089      	sub	sp, #36	; 0x24
 8005e94:	af02      	add	r7, sp, #8
 8005e96:	6078      	str	r0, [r7, #4]
	uint16_t RSR_len;
	uint32_t destip = 0;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	613b      	str	r3, [r7, #16]
	uint16_t destport;
	uint16_t startindex = 40; //last 8-byte of data_buf[size is 48 byte] is xmt, so the startindex should be 40
 8005e9c:	2328      	movs	r3, #40	; 0x28
 8005e9e:	82bb      	strh	r3, [r7, #20]

	switch(getSn_SR(NTP_SOCKET))
 8005ea0:	4b52      	ldr	r3, [pc, #328]	; (8005fec <SNTP_run+0x15c>)
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	3308      	adds	r3, #8
 8005ea6:	019b      	lsls	r3, r3, #6
 8005ea8:	3308      	adds	r3, #8
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7fd ff84 	bl	8003db8 <WIZCHIP_READ>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 808b 	beq.w	8005fd0 <SNTP_run+0x140>
 8005eba:	2b22      	cmp	r3, #34	; 0x22
 8005ebc:	f040 8091 	bne.w	8005fe2 <SNTP_run+0x152>
	{
	case SOCK_UDP:
		if ((RSR_len = getSn_RX_RSR(NTP_SOCKET)) > 0)
 8005ec0:	4b4a      	ldr	r3, [pc, #296]	; (8005fec <SNTP_run+0x15c>)
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7fe f853 	bl	8003f70 <getSn_RX_RSR>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	82fb      	strh	r3, [r7, #22]
 8005ece:	8afb      	ldrh	r3, [r7, #22]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d03a      	beq.n	8005f4a <SNTP_run+0xba>
		{
			if (RSR_len > MAX_SNTP_BUF_SIZE) RSR_len = MAX_SNTP_BUF_SIZE;	// if Rx data size is lager than TX_RX_MAX_BUF_SIZE
 8005ed4:	8afb      	ldrh	r3, [r7, #22]
 8005ed6:	2b38      	cmp	r3, #56	; 0x38
 8005ed8:	d901      	bls.n	8005ede <SNTP_run+0x4e>
 8005eda:	2338      	movs	r3, #56	; 0x38
 8005edc:	82fb      	strh	r3, [r7, #22]
			recvfrom(NTP_SOCKET, data_buf, RSR_len, (uint8_t *)&destip, &destport);
 8005ede:	4b43      	ldr	r3, [pc, #268]	; (8005fec <SNTP_run+0x15c>)
 8005ee0:	7818      	ldrb	r0, [r3, #0]
 8005ee2:	4b43      	ldr	r3, [pc, #268]	; (8005ff0 <SNTP_run+0x160>)
 8005ee4:	6819      	ldr	r1, [r3, #0]
 8005ee6:	f107 0410 	add.w	r4, r7, #16
 8005eea:	8afa      	ldrh	r2, [r7, #22]
 8005eec:	f107 030e 	add.w	r3, r7, #14
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	4623      	mov	r3, r4
 8005ef4:	f7fe fce0 	bl	80048b8 <recvfrom>

			get_seconds_from_ntp_server(data_buf,startindex);
 8005ef8:	4b3d      	ldr	r3, [pc, #244]	; (8005ff0 <SNTP_run+0x160>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	8aba      	ldrh	r2, [r7, #20]
 8005efe:	4611      	mov	r1, r2
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7ff fc53 	bl	80057ac <get_seconds_from_ntp_server>
			time->yy = Nowdatetime.yy;
 8005f06:	4b3b      	ldr	r3, [pc, #236]	; (8005ff4 <SNTP_run+0x164>)
 8005f08:	881a      	ldrh	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	801a      	strh	r2, [r3, #0]
			time->mo = Nowdatetime.mo;
 8005f0e:	4b39      	ldr	r3, [pc, #228]	; (8005ff4 <SNTP_run+0x164>)
 8005f10:	789a      	ldrb	r2, [r3, #2]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	709a      	strb	r2, [r3, #2]
			time->dd = Nowdatetime.dd;
 8005f16:	4b37      	ldr	r3, [pc, #220]	; (8005ff4 <SNTP_run+0x164>)
 8005f18:	78da      	ldrb	r2, [r3, #3]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	70da      	strb	r2, [r3, #3]
			time->hh = Nowdatetime.hh;
 8005f1e:	4b35      	ldr	r3, [pc, #212]	; (8005ff4 <SNTP_run+0x164>)
 8005f20:	791a      	ldrb	r2, [r3, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	711a      	strb	r2, [r3, #4]
			time->mm = Nowdatetime.mm;
 8005f26:	4b33      	ldr	r3, [pc, #204]	; (8005ff4 <SNTP_run+0x164>)
 8005f28:	795a      	ldrb	r2, [r3, #5]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	715a      	strb	r2, [r3, #5]
			time->ss = Nowdatetime.ss;
 8005f2e:	4b31      	ldr	r3, [pc, #196]	; (8005ff4 <SNTP_run+0x164>)
 8005f30:	799a      	ldrb	r2, [r3, #6]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	719a      	strb	r2, [r3, #6]

			ntp_retry_cnt=0;
 8005f36:	4b30      	ldr	r3, [pc, #192]	; (8005ff8 <SNTP_run+0x168>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	801a      	strh	r2, [r3, #0]
			close(NTP_SOCKET);
 8005f3c:	4b2b      	ldr	r3, [pc, #172]	; (8005fec <SNTP_run+0x15c>)
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fe f9f3 	bl	800432c <close>

			return 1;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e04c      	b.n	8005fe4 <SNTP_run+0x154>
		}

		if(ntp_retry_cnt<0xFFFF)
 8005f4a:	4b2b      	ldr	r3, [pc, #172]	; (8005ff8 <SNTP_run+0x168>)
 8005f4c:	881b      	ldrh	r3, [r3, #0]
 8005f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d033      	beq.n	8005fbe <SNTP_run+0x12e>
		{
			if(ntp_retry_cnt==0)//first send request, no need to wait
 8005f56:	4b28      	ldr	r3, [pc, #160]	; (8005ff8 <SNTP_run+0x168>)
 8005f58:	881b      	ldrh	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10f      	bne.n	8005f7e <SNTP_run+0xee>
			{
				sendto(NTP_SOCKET,ntpmessage,sizeof(ntpmessage),NTPformat.dstaddr,ntp_port);
 8005f5e:	4b23      	ldr	r3, [pc, #140]	; (8005fec <SNTP_run+0x15c>)
 8005f60:	7818      	ldrb	r0, [r3, #0]
 8005f62:	237b      	movs	r3, #123	; 0x7b
 8005f64:	9300      	str	r3, [sp, #0]
 8005f66:	4b25      	ldr	r3, [pc, #148]	; (8005ffc <SNTP_run+0x16c>)
 8005f68:	2230      	movs	r2, #48	; 0x30
 8005f6a:	4925      	ldr	r1, [pc, #148]	; (8006000 <SNTP_run+0x170>)
 8005f6c:	f7fe fa9c 	bl	80044a8 <sendto>
				ntp_retry_cnt++;
 8005f70:	4b21      	ldr	r3, [pc, #132]	; (8005ff8 <SNTP_run+0x168>)
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	3301      	adds	r3, #1
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	4b1f      	ldr	r3, [pc, #124]	; (8005ff8 <SNTP_run+0x168>)
 8005f7a:	801a      	strh	r2, [r3, #0]
#ifdef _SNTP_DEBUG_
			printf("ntp retry failed!\r\n");
#endif
			close(NTP_SOCKET);
		}
		break;
 8005f7c:	e030      	b.n	8005fe0 <SNTP_run+0x150>
				if((ntp_retry_cnt % 0xFFF) == 0) //wait time
 8005f7e:	4b1e      	ldr	r3, [pc, #120]	; (8005ff8 <SNTP_run+0x168>)
 8005f80:	881a      	ldrh	r2, [r3, #0]
 8005f82:	4b20      	ldr	r3, [pc, #128]	; (8006004 <SNTP_run+0x174>)
 8005f84:	fba3 1302 	umull	r1, r3, r3, r2
 8005f88:	1ad1      	subs	r1, r2, r3
 8005f8a:	0849      	lsrs	r1, r1, #1
 8005f8c:	440b      	add	r3, r1
 8005f8e:	0ad9      	lsrs	r1, r3, #11
 8005f90:	460b      	mov	r3, r1
 8005f92:	031b      	lsls	r3, r3, #12
 8005f94:	1a5b      	subs	r3, r3, r1
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d120      	bne.n	8005fe0 <SNTP_run+0x150>
					sendto(NTP_SOCKET,ntpmessage,sizeof(ntpmessage),NTPformat.dstaddr,ntp_port);
 8005f9e:	4b13      	ldr	r3, [pc, #76]	; (8005fec <SNTP_run+0x15c>)
 8005fa0:	7818      	ldrb	r0, [r3, #0]
 8005fa2:	237b      	movs	r3, #123	; 0x7b
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	4b15      	ldr	r3, [pc, #84]	; (8005ffc <SNTP_run+0x16c>)
 8005fa8:	2230      	movs	r2, #48	; 0x30
 8005faa:	4915      	ldr	r1, [pc, #84]	; (8006000 <SNTP_run+0x170>)
 8005fac:	f7fe fa7c 	bl	80044a8 <sendto>
					ntp_retry_cnt++;
 8005fb0:	4b11      	ldr	r3, [pc, #68]	; (8005ff8 <SNTP_run+0x168>)
 8005fb2:	881b      	ldrh	r3, [r3, #0]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	4b0f      	ldr	r3, [pc, #60]	; (8005ff8 <SNTP_run+0x168>)
 8005fba:	801a      	strh	r2, [r3, #0]
		break;
 8005fbc:	e010      	b.n	8005fe0 <SNTP_run+0x150>
			ntp_retry_cnt=0;
 8005fbe:	4b0e      	ldr	r3, [pc, #56]	; (8005ff8 <SNTP_run+0x168>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	801a      	strh	r2, [r3, #0]
			close(NTP_SOCKET);
 8005fc4:	4b09      	ldr	r3, [pc, #36]	; (8005fec <SNTP_run+0x15c>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7fe f9af 	bl	800432c <close>
		break;
 8005fce:	e007      	b.n	8005fe0 <SNTP_run+0x150>
	case SOCK_CLOSED:
		socket(NTP_SOCKET,Sn_MR_UDP,ntp_port,0);
 8005fd0:	4b06      	ldr	r3, [pc, #24]	; (8005fec <SNTP_run+0x15c>)
 8005fd2:	7818      	ldrb	r0, [r3, #0]
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	227b      	movs	r2, #123	; 0x7b
 8005fd8:	2102      	movs	r1, #2
 8005fda:	f7fe f88d 	bl	80040f8 <socket>
		break;
 8005fde:	e000      	b.n	8005fe2 <SNTP_run+0x152>
		break;
 8005fe0:	bf00      	nop
	}
	// Return value
	// 0 - failed / 1 - success
	return 0;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	371c      	adds	r7, #28
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd90      	pop	{r4, r7, pc}
 8005fec:	20000ba8 	.word	0x20000ba8
 8005ff0:	20000b68 	.word	0x20000b68
 8005ff4:	20000ba0 	.word	0x20000ba0
 8005ff8:	200008ee 	.word	0x200008ee
 8005ffc:	20000bb0 	.word	0x20000bb0
 8006000:	20000b6c 	.word	0x20000b6c
 8006004:	00100101 	.word	0x00100101

08006008 <calcdatetime>:

void calcdatetime(tstamp seconds)
{
 8006008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800600c:	b0ae      	sub	sp, #184	; 0xb8
 800600e:	af00      	add	r7, sp, #0
 8006010:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
	uint8_t yf=0;
 8006014:	2300      	movs	r3, #0
 8006016:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	tstamp n=0,d=0,total_d=0,rz=0;
 800601a:	f04f 0200 	mov.w	r2, #0
 800601e:	f04f 0300 	mov.w	r3, #0
 8006022:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 8006026:	f04f 0200 	mov.w	r2, #0
 800602a:	f04f 0300 	mov.w	r3, #0
 800602e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8006032:	f04f 0200 	mov.w	r2, #0
 8006036:	f04f 0300 	mov.w	r3, #0
 800603a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 800603e:	f04f 0200 	mov.w	r2, #0
 8006042:	f04f 0300 	mov.w	r3, #0
 8006046:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	uint16_t y=0,r=0,yr=0;
 800604a:	2300      	movs	r3, #0
 800604c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8006050:	2300      	movs	r3, #0
 8006052:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006056:	2300      	movs	r3, #0
 8006058:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	signed long long yd=0;
 800605c:	f04f 0200 	mov.w	r2, #0
 8006060:	f04f 0300 	mov.w	r3, #0
 8006064:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88

	n = seconds;
 8006068:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800606c:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	total_d = seconds/(SECS_PERDAY);
 8006070:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006074:	4ac0      	ldr	r2, [pc, #768]	; (8006378 <calcdatetime+0x370>)
 8006076:	f04f 0300 	mov.w	r3, #0
 800607a:	f7fa f921 	bl	80002c0 <__aeabi_uldivmod>
 800607e:	4602      	mov	r2, r0
 8006080:	460b      	mov	r3, r1
 8006082:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	d=0;
 8006086:	f04f 0200 	mov.w	r2, #0
 800608a:	f04f 0300 	mov.w	r3, #0
 800608e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	uint32_t p_year_total_sec=SECS_PERDAY*365;
 8006092:	4bba      	ldr	r3, [pc, #744]	; (800637c <calcdatetime+0x374>)
 8006094:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t r_year_total_sec=SECS_PERDAY*366;
 8006096:	4bba      	ldr	r3, [pc, #744]	; (8006380 <calcdatetime+0x378>)
 8006098:	677b      	str	r3, [r7, #116]	; 0x74
	while(n>=p_year_total_sec)
 800609a:	e06c      	b.n	8006176 <calcdatetime+0x16e>
	{
		if((EPOCH+r)%400==0 || ((EPOCH+r)%100!=0 && (EPOCH+r)%4==0))
 800609c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80060a0:	f203 716c 	addw	r1, r3, #1900	; 0x76c
 80060a4:	4bb7      	ldr	r3, [pc, #732]	; (8006384 <calcdatetime+0x37c>)
 80060a6:	fb83 2301 	smull	r2, r3, r3, r1
 80060aa:	11da      	asrs	r2, r3, #7
 80060ac:	17cb      	asrs	r3, r1, #31
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80060b4:	fb02 f303 	mul.w	r3, r2, r3
 80060b8:	1acb      	subs	r3, r1, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d017      	beq.n	80060ee <calcdatetime+0xe6>
 80060be:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80060c2:	f203 716c 	addw	r1, r3, #1900	; 0x76c
 80060c6:	4baf      	ldr	r3, [pc, #700]	; (8006384 <calcdatetime+0x37c>)
 80060c8:	fb83 2301 	smull	r2, r3, r3, r1
 80060cc:	115a      	asrs	r2, r3, #5
 80060ce:	17cb      	asrs	r3, r1, #31
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	2264      	movs	r2, #100	; 0x64
 80060d4:	fb02 f303 	mul.w	r3, r2, r3
 80060d8:	1acb      	subs	r3, r1, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d024      	beq.n	8006128 <calcdatetime+0x120>
 80060de:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80060e2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80060e6:	f003 0303 	and.w	r3, r3, #3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d11c      	bne.n	8006128 <calcdatetime+0x120>
		{
			n = n -(r_year_total_sec);
 80060ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060f0:	2200      	movs	r2, #0
 80060f2:	4698      	mov	r8, r3
 80060f4:	4691      	mov	r9, r2
 80060f6:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80060fa:	ebb2 0108 	subs.w	r1, r2, r8
 80060fe:	65b9      	str	r1, [r7, #88]	; 0x58
 8006100:	eb63 0309 	sbc.w	r3, r3, r9
 8006104:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006106:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800610a:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
			d = d + 366;
 800610e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006112:	f512 71b7 	adds.w	r1, r2, #366	; 0x16e
 8006116:	6539      	str	r1, [r7, #80]	; 0x50
 8006118:	f143 0300 	adc.w	r3, r3, #0
 800611c:	657b      	str	r3, [r7, #84]	; 0x54
 800611e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006122:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8006126:	e01c      	b.n	8006162 <calcdatetime+0x15a>
		}
		else
		{
			n = n - (p_year_total_sec);
 8006128:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800612a:	2200      	movs	r2, #0
 800612c:	469a      	mov	sl, r3
 800612e:	4693      	mov	fp, r2
 8006130:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006134:	ebb2 010a 	subs.w	r1, r2, sl
 8006138:	64b9      	str	r1, [r7, #72]	; 0x48
 800613a:	eb63 030b 	sbc.w	r3, r3, fp
 800613e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006140:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006144:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
			d = d + 365;
 8006148:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800614c:	f240 116d 	movw	r1, #365	; 0x16d
 8006150:	1851      	adds	r1, r2, r1
 8006152:	6439      	str	r1, [r7, #64]	; 0x40
 8006154:	f143 0300 	adc.w	r3, r3, #0
 8006158:	647b      	str	r3, [r7, #68]	; 0x44
 800615a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800615e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
		}
		r+=1;
 8006162:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006166:	3301      	adds	r3, #1
 8006168:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
		y+=1;
 800616c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006170:	3301      	adds	r3, #1
 8006172:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	while(n>=p_year_total_sec)
 8006176:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006178:	2200      	movs	r2, #0
 800617a:	461c      	mov	r4, r3
 800617c:	4615      	mov	r5, r2
 800617e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006182:	42a2      	cmp	r2, r4
 8006184:	41ab      	sbcs	r3, r5
 8006186:	d289      	bcs.n	800609c <calcdatetime+0x94>

	}

	y += EPOCH;
 8006188:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800618c:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8006190:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

	Nowdatetime.yy = y;
 8006194:	4a7c      	ldr	r2, [pc, #496]	; (8006388 <calcdatetime+0x380>)
 8006196:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800619a:	8013      	strh	r3, [r2, #0]

	yd=0;
 800619c:	f04f 0200 	mov.w	r2, #0
 80061a0:	f04f 0300 	mov.w	r3, #0
 80061a4:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	yd = total_d - d;
 80061a8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80061ac:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80061b0:	1a84      	subs	r4, r0, r2
 80061b2:	663c      	str	r4, [r7, #96]	; 0x60
 80061b4:	eb61 0303 	sbc.w	r3, r1, r3
 80061b8:	667b      	str	r3, [r7, #100]	; 0x64
 80061ba:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80061be:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88

	yf=1;
 80061c2:	2301      	movs	r3, #1
 80061c4:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	while(yd>=28)
 80061c8:	e0c8      	b.n	800635c <calcdatetime+0x354>
	{

		if(yf==1 || yf==3 || yf==5 || yf==7 || yf==8 || yf==10 || yf==12)
 80061ca:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d017      	beq.n	8006202 <calcdatetime+0x1fa>
 80061d2:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	d013      	beq.n	8006202 <calcdatetime+0x1fa>
 80061da:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80061de:	2b05      	cmp	r3, #5
 80061e0:	d00f      	beq.n	8006202 <calcdatetime+0x1fa>
 80061e2:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80061e6:	2b07      	cmp	r3, #7
 80061e8:	d00b      	beq.n	8006202 <calcdatetime+0x1fa>
 80061ea:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80061ee:	2b08      	cmp	r3, #8
 80061f0:	d007      	beq.n	8006202 <calcdatetime+0x1fa>
 80061f2:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80061f6:	2b0a      	cmp	r3, #10
 80061f8:	d003      	beq.n	8006202 <calcdatetime+0x1fa>
 80061fa:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80061fe:	2b0c      	cmp	r3, #12
 8006200:	d11c      	bne.n	800623c <calcdatetime+0x234>
		{
			yd -= 31;
 8006202:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006206:	f1b2 011f 	subs.w	r1, r2, #31
 800620a:	63b9      	str	r1, [r7, #56]	; 0x38
 800620c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8006210:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006212:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8006216:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			if(yd<0)break;
 800621a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800621e:	2b00      	cmp	r3, #0
 8006220:	f2c0 80a4 	blt.w	800636c <calcdatetime+0x364>
			rz += 31;
 8006224:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006228:	f112 011f 	adds.w	r1, r2, #31
 800622c:	6339      	str	r1, [r7, #48]	; 0x30
 800622e:	f143 0300 	adc.w	r3, r3, #0
 8006232:	637b      	str	r3, [r7, #52]	; 0x34
 8006234:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8006238:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		}

		if (yf==2)
 800623c:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8006240:	2b02      	cmp	r3, #2
 8006242:	d15a      	bne.n	80062fa <calcdatetime+0x2f2>
		{
			if (y%400==0 || (y%100!=0 && y%4==0))
 8006244:	f8b7 1096 	ldrh.w	r1, [r7, #150]	; 0x96
 8006248:	4b4e      	ldr	r3, [pc, #312]	; (8006384 <calcdatetime+0x37c>)
 800624a:	fba3 2301 	umull	r2, r3, r3, r1
 800624e:	09da      	lsrs	r2, r3, #7
 8006250:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006254:	fb02 f303 	mul.w	r3, r2, r3
 8006258:	1acb      	subs	r3, r1, r3
 800625a:	b29b      	uxth	r3, r3
 800625c:	2b00      	cmp	r3, #0
 800625e:	d013      	beq.n	8006288 <calcdatetime+0x280>
 8006260:	f8b7 1096 	ldrh.w	r1, [r7, #150]	; 0x96
 8006264:	4b47      	ldr	r3, [pc, #284]	; (8006384 <calcdatetime+0x37c>)
 8006266:	fba3 2301 	umull	r2, r3, r3, r1
 800626a:	095a      	lsrs	r2, r3, #5
 800626c:	2364      	movs	r3, #100	; 0x64
 800626e:	fb02 f303 	mul.w	r3, r2, r3
 8006272:	1acb      	subs	r3, r1, r3
 8006274:	b29b      	uxth	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d023      	beq.n	80062c2 <calcdatetime+0x2ba>
 800627a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800627e:	f003 0303 	and.w	r3, r3, #3
 8006282:	b29b      	uxth	r3, r3
 8006284:	2b00      	cmp	r3, #0
 8006286:	d11c      	bne.n	80062c2 <calcdatetime+0x2ba>
			{
				yd -= 29;
 8006288:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800628c:	f1b2 011d 	subs.w	r1, r2, #29
 8006290:	62b9      	str	r1, [r7, #40]	; 0x28
 8006292:	f143 33ff 	adc.w	r3, r3, #4294967295
 8006296:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006298:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800629c:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
				if(yd<0)break;
 80062a0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	db63      	blt.n	8006370 <calcdatetime+0x368>
				rz += 29;
 80062a8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80062ac:	f112 011d 	adds.w	r1, r2, #29
 80062b0:	6239      	str	r1, [r7, #32]
 80062b2:	f143 0300 	adc.w	r3, r3, #0
 80062b6:	627b      	str	r3, [r7, #36]	; 0x24
 80062b8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80062bc:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
 80062c0:	e01b      	b.n	80062fa <calcdatetime+0x2f2>
			}
			else
			{
				yd -= 28;
 80062c2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80062c6:	f1b2 011c 	subs.w	r1, r2, #28
 80062ca:	61b9      	str	r1, [r7, #24]
 80062cc:	f143 33ff 	adc.w	r3, r3, #4294967295
 80062d0:	61fb      	str	r3, [r7, #28]
 80062d2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80062d6:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
				if(yd<0)break;
 80062da:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80062de:	2b00      	cmp	r3, #0
 80062e0:	db48      	blt.n	8006374 <calcdatetime+0x36c>
				rz += 28;
 80062e2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80062e6:	f112 011c 	adds.w	r1, r2, #28
 80062ea:	6139      	str	r1, [r7, #16]
 80062ec:	f143 0300 	adc.w	r3, r3, #0
 80062f0:	617b      	str	r3, [r7, #20]
 80062f2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80062f6:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			}
		}
		if(yf==4 || yf==6 || yf==9 || yf==11 )
 80062fa:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80062fe:	2b04      	cmp	r3, #4
 8006300:	d00b      	beq.n	800631a <calcdatetime+0x312>
 8006302:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8006306:	2b06      	cmp	r3, #6
 8006308:	d007      	beq.n	800631a <calcdatetime+0x312>
 800630a:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800630e:	2b09      	cmp	r3, #9
 8006310:	d003      	beq.n	800631a <calcdatetime+0x312>
 8006312:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8006316:	2b0b      	cmp	r3, #11
 8006318:	d11b      	bne.n	8006352 <calcdatetime+0x34a>
		{
			yd -= 30;
 800631a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800631e:	f1b2 011e 	subs.w	r1, r2, #30
 8006322:	60b9      	str	r1, [r7, #8]
 8006324:	f143 33ff 	adc.w	r3, r3, #4294967295
 8006328:	60fb      	str	r3, [r7, #12]
 800632a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800632e:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			if(yd<0)break;
 8006332:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006336:	2b00      	cmp	r3, #0
 8006338:	db28      	blt.n	800638c <calcdatetime+0x384>
			rz += 30;
 800633a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800633e:	f112 011e 	adds.w	r1, r2, #30
 8006342:	6039      	str	r1, [r7, #0]
 8006344:	f143 0300 	adc.w	r3, r3, #0
 8006348:	607b      	str	r3, [r7, #4]
 800634a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800634e:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		}
		yf += 1;
 8006352:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8006356:	3301      	adds	r3, #1
 8006358:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	while(yd>=28)
 800635c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006360:	2a1c      	cmp	r2, #28
 8006362:	f173 0300 	sbcs.w	r3, r3, #0
 8006366:	f6bf af30 	bge.w	80061ca <calcdatetime+0x1c2>
 800636a:	e010      	b.n	800638e <calcdatetime+0x386>
			if(yd<0)break;
 800636c:	bf00      	nop
 800636e:	e00e      	b.n	800638e <calcdatetime+0x386>
				if(yd<0)break;
 8006370:	bf00      	nop
 8006372:	e00c      	b.n	800638e <calcdatetime+0x386>
				if(yd<0)break;
 8006374:	bf00      	nop
 8006376:	e00a      	b.n	800638e <calcdatetime+0x386>
 8006378:	00015180 	.word	0x00015180
 800637c:	01e13380 	.word	0x01e13380
 8006380:	01e28500 	.word	0x01e28500
 8006384:	51eb851f 	.word	0x51eb851f
 8006388:	20000ba0 	.word	0x20000ba0
			if(yd<0)break;
 800638c:	bf00      	nop

	}
	Nowdatetime.mo=yf;
 800638e:	4a2e      	ldr	r2, [pc, #184]	; (8006448 <calcdatetime+0x440>)
 8006390:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8006394:	7093      	strb	r3, [r2, #2]
	yr = total_d-d-rz;
 8006396:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 800639a:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

	yr += 1;
 80063ac:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80063b0:	3301      	adds	r3, #1
 80063b2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

	Nowdatetime.dd=yr;
 80063b6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	4b22      	ldr	r3, [pc, #136]	; (8006448 <calcdatetime+0x440>)
 80063be:	70da      	strb	r2, [r3, #3]

	//calculation for time
	seconds = seconds%SECS_PERDAY;
 80063c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80063c4:	4a21      	ldr	r2, [pc, #132]	; (800644c <calcdatetime+0x444>)
 80063c6:	f04f 0300 	mov.w	r3, #0
 80063ca:	f7f9 ff79 	bl	80002c0 <__aeabi_uldivmod>
 80063ce:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	Nowdatetime.hh = seconds/3600;
 80063d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80063d6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80063da:	f04f 0300 	mov.w	r3, #0
 80063de:	f7f9 ff6f 	bl	80002c0 <__aeabi_uldivmod>
 80063e2:	4602      	mov	r2, r0
 80063e4:	460b      	mov	r3, r1
 80063e6:	b2d2      	uxtb	r2, r2
 80063e8:	4b17      	ldr	r3, [pc, #92]	; (8006448 <calcdatetime+0x440>)
 80063ea:	711a      	strb	r2, [r3, #4]
	Nowdatetime.mm = (seconds%3600)/60;
 80063ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80063f0:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80063f4:	f04f 0300 	mov.w	r3, #0
 80063f8:	f7f9 ff62 	bl	80002c0 <__aeabi_uldivmod>
 80063fc:	4610      	mov	r0, r2
 80063fe:	4619      	mov	r1, r3
 8006400:	f04f 023c 	mov.w	r2, #60	; 0x3c
 8006404:	f04f 0300 	mov.w	r3, #0
 8006408:	f7f9 ff5a 	bl	80002c0 <__aeabi_uldivmod>
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	b2d2      	uxtb	r2, r2
 8006412:	4b0d      	ldr	r3, [pc, #52]	; (8006448 <calcdatetime+0x440>)
 8006414:	715a      	strb	r2, [r3, #5]
	Nowdatetime.ss = (seconds%3600)%60;
 8006416:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800641a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800641e:	f04f 0300 	mov.w	r3, #0
 8006422:	f7f9 ff4d 	bl	80002c0 <__aeabi_uldivmod>
 8006426:	4610      	mov	r0, r2
 8006428:	4619      	mov	r1, r3
 800642a:	f04f 023c 	mov.w	r2, #60	; 0x3c
 800642e:	f04f 0300 	mov.w	r3, #0
 8006432:	f7f9 ff45 	bl	80002c0 <__aeabi_uldivmod>
 8006436:	b2d2      	uxtb	r2, r2
 8006438:	4b03      	ldr	r3, [pc, #12]	; (8006448 <calcdatetime+0x440>)
 800643a:	719a      	strb	r2, [r3, #6]

}
 800643c:	bf00      	nop
 800643e:	37b8      	adds	r7, #184	; 0xb8
 8006440:	46bd      	mov	sp, r7
 8006442:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006446:	bf00      	nop
 8006448:	20000ba0 	.word	0x20000ba0
 800644c:	00015180 	.word	0x00015180

08006450 <wizchip_select>:
 * ----------------------------------------------------------------------------------------------------
 * Functions
 * ----------------------------------------------------------------------------------------------------
 */
static inline void wizchip_select(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8006454:	2200      	movs	r2, #0
 8006456:	2180      	movs	r1, #128	; 0x80
 8006458:	4802      	ldr	r0, [pc, #8]	; (8006464 <wizchip_select+0x14>)
 800645a:	f7fb fd4f 	bl	8001efc <HAL_GPIO_WritePin>
}
 800645e:	bf00      	nop
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	40020c00 	.word	0x40020c00

08006468 <wizchip_deselect>:

static inline void wizchip_deselect(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 800646c:	2201      	movs	r2, #1
 800646e:	2180      	movs	r1, #128	; 0x80
 8006470:	4802      	ldr	r0, [pc, #8]	; (800647c <wizchip_deselect+0x14>)
 8006472:	f7fb fd43 	bl	8001efc <HAL_GPIO_WritePin>
}
 8006476:	bf00      	nop
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	40020c00 	.word	0x40020c00

08006480 <wizchip_read>:

static inline uint16_t wizchip_read(uint32_t addr)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  return _W5300_DATA(addr);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	005b      	lsls	r3, r3, #1
 800648c:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 8006490:	881b      	ldrh	r3, [r3, #0]
 8006492:	b29b      	uxth	r3, r3
}
 8006494:	4618      	mov	r0, r3
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <wizchip_write>:

static inline void wizchip_write(uint32_t addr, uint16_t tx_data)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	460b      	mov	r3, r1
 80064aa:	807b      	strh	r3, [r7, #2]
  _W5300_DATA(addr) = tx_data;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	005b      	lsls	r3, r3, #1
 80064b0:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 80064b4:	461a      	mov	r2, r3
 80064b6:	887b      	ldrh	r3, [r7, #2]
 80064b8:	8013      	strh	r3, [r2, #0]
}
 80064ba:	bf00      	nop
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
	...

080064c8 <wizchip_initialize>:

void wizchip_initialize(void)
{
 80064c8:	b590      	push	{r4, r7, lr}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
  /* Deselect the FLASH : chip select high */
  wizchip_deselect();
 80064ce:	f7ff ffcb 	bl	8006468 <wizchip_deselect>

  /* CS function register */
  reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 80064d2:	490e      	ldr	r1, [pc, #56]	; (800650c <wizchip_initialize+0x44>)
 80064d4:	480e      	ldr	r0, [pc, #56]	; (8006510 <wizchip_initialize+0x48>)
 80064d6:	f7fe fc99 	bl	8004e0c <reg_wizchip_cs_cbfunc>

  /* BUS function register */
  reg_wizchip_bus_cbfunc(wizchip_read, wizchip_write);
 80064da:	490e      	ldr	r1, [pc, #56]	; (8006514 <wizchip_initialize+0x4c>)
 80064dc:	480e      	ldr	r0, [pc, #56]	; (8006518 <wizchip_initialize+0x50>)
 80064de:	f7fe fcbb 	bl	8004e58 <reg_wizchip_bus_cbfunc>

  /* W5x00 initialize */
#if (_WIZCHIP_ == W5100S)
  uint8_t memsize[2][4] = {{2, 2, 2, 2}, {2, 2, 2, 2}};
#elif (_WIZCHIP_ == W5300)
  uint8_t memsize[2][8] = {{8, 8, 8, 8, 8, 8, 8, 8}, {8, 8, 8, 8, 8, 8, 8, 8}};
 80064e2:	4b0e      	ldr	r3, [pc, #56]	; (800651c <wizchip_initialize+0x54>)
 80064e4:	463c      	mov	r4, r7
 80064e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80064e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#elif (_WIZCHIP_ == W5500)
  uint8_t memsize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
#endif

  if (ctlwizchip(CW_INIT_WIZCHIP, (void *)memsize) == -1)
 80064ec:	463b      	mov	r3, r7
 80064ee:	4619      	mov	r1, r3
 80064f0:	2001      	movs	r0, #1
 80064f2:	f7fe fcdd 	bl	8004eb0 <ctlwizchip>
 80064f6:	4603      	mov	r3, r0
 80064f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fc:	d102      	bne.n	8006504 <wizchip_initialize+0x3c>
  {
    printf(" W5x00 initialized fail\n");
 80064fe:	4808      	ldr	r0, [pc, #32]	; (8006520 <wizchip_initialize+0x58>)
 8006500:	f000 faf4 	bl	8006aec <puts>

      return;
    }
  } while (temp == PHY_LINK_OFF);
#endif
}
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	bd90      	pop	{r4, r7, pc}
 800650a:	bf00      	nop
 800650c:	08006469 	.word	0x08006469
 8006510:	08006451 	.word	0x08006451
 8006514:	080064a1 	.word	0x080064a1
 8006518:	08006481 	.word	0x08006481
 800651c:	0800772c 	.word	0x0800772c
 8006520:	08007714 	.word	0x08007714

08006524 <wizchip_reset>:

void wizchip_reset(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8006528:	2200      	movs	r2, #0
 800652a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800652e:	4808      	ldr	r0, [pc, #32]	; (8006550 <wizchip_reset+0x2c>)
 8006530:	f7fb fce4 	bl	8001efc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8006534:	2064      	movs	r0, #100	; 0x64
 8006536:	f7fa fe07 	bl	8001148 <HAL_Delay>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800653a:	2201      	movs	r2, #1
 800653c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006540:	4803      	ldr	r0, [pc, #12]	; (8006550 <wizchip_reset+0x2c>)
 8006542:	f7fb fcdb 	bl	8001efc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8006546:	2064      	movs	r0, #100	; 0x64
 8006548:	f7fa fdfe 	bl	8001148 <HAL_Delay>
}
 800654c:	bf00      	nop
 800654e:	bd80      	pop	{r7, pc}
 8006550:	40020800 	.word	0x40020800

08006554 <wizchip_check>:

void wizchip_check(void)
{
 8006554:	b480      	push	{r7}
 8006556:	af00      	add	r7, sp, #0

    while (1)
      ;
  }
#endif
}
 8006558:	bf00      	nop
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <wizchip_network_initialize>:
 * ----------------------------------------------------------------------------------------------------
 * Functions
 * ----------------------------------------------------------------------------------------------------
 */
void wizchip_network_initialize(wiz_NetInfo *net_info)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b082      	sub	sp, #8
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  wizchip_initialize();
 800656a:	f7ff ffad 	bl	80064c8 <wizchip_initialize>
  wizchip_reset();
 800656e:	f7ff ffd9 	bl	8006524 <wizchip_reset>
  wizchip_check();
 8006572:	f7ff ffef 	bl	8006554 <wizchip_check>

  ctlnetwork(CN_SET_NETINFO, (void *)net_info);
 8006576:	6879      	ldr	r1, [r7, #4]
 8006578:	2000      	movs	r0, #0
 800657a:	f7fe fd15 	bl	8004fa8 <ctlnetwork>
}
 800657e:	bf00      	nop
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
	...

08006588 <wizchip_network_information>:

void wizchip_network_information(wiz_NetInfo *net_info)
{
 8006588:	b5b0      	push	{r4, r5, r7, lr}
 800658a:	b088      	sub	sp, #32
 800658c:	af04      	add	r7, sp, #16
 800658e:	6078      	str	r0, [r7, #4]
  uint8_t tmp_str[8] = {
 8006590:	2300      	movs	r3, #0
 8006592:	60bb      	str	r3, [r7, #8]
 8006594:	2300      	movs	r3, #0
 8006596:	60fb      	str	r3, [r7, #12]
      0,
  };

  ctlnetwork(CN_GET_NETINFO, (void *)net_info);
 8006598:	6879      	ldr	r1, [r7, #4]
 800659a:	2001      	movs	r0, #1
 800659c:	f7fe fd04 	bl	8004fa8 <ctlnetwork>
  ctlwizchip(CW_GET_ID, (void *)tmp_str);
 80065a0:	f107 0308 	add.w	r3, r7, #8
 80065a4:	4619      	mov	r1, r3
 80065a6:	2008      	movs	r0, #8
 80065a8:	f7fe fc82 	bl	8004eb0 <ctlwizchip>

  if (net_info->dhcp == NETINFO_DHCP)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	7d9b      	ldrb	r3, [r3, #22]
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d109      	bne.n	80065c8 <wizchip_network_information+0x40>
  {
    printf("====================================================================================================\n");
 80065b4:	4839      	ldr	r0, [pc, #228]	; (800669c <wizchip_network_information+0x114>)
 80065b6:	f000 fa99 	bl	8006aec <puts>
    printf(" %s network configuration : DHCP\n\n", (char *)tmp_str);
 80065ba:	f107 0308 	add.w	r3, r7, #8
 80065be:	4619      	mov	r1, r3
 80065c0:	4837      	ldr	r0, [pc, #220]	; (80066a0 <wizchip_network_information+0x118>)
 80065c2:	f000 fa2d 	bl	8006a20 <iprintf>
 80065c6:	e008      	b.n	80065da <wizchip_network_information+0x52>
  }
  else
  {
    printf("====================================================================================================\n");
 80065c8:	4834      	ldr	r0, [pc, #208]	; (800669c <wizchip_network_information+0x114>)
 80065ca:	f000 fa8f 	bl	8006aec <puts>
    printf(" %s network configuration : static\n\n", (char *)tmp_str);
 80065ce:	f107 0308 	add.w	r3, r7, #8
 80065d2:	4619      	mov	r1, r3
 80065d4:	4833      	ldr	r0, [pc, #204]	; (80066a4 <wizchip_network_information+0x11c>)
 80065d6:	f000 fa23 	bl	8006a20 <iprintf>
  }

  printf(" MAC         : %02X:%02X:%02X:%02X:%02X:%02X\n", net_info->mac[0], net_info->mac[1], net_info->mac[2], net_info->mac[3], net_info->mac[4], net_info->mac[5]);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	4618      	mov	r0, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	785b      	ldrb	r3, [r3, #1]
 80065e4:	461c      	mov	r4, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	789b      	ldrb	r3, [r3, #2]
 80065ea:	461d      	mov	r5, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	78db      	ldrb	r3, [r3, #3]
 80065f0:	461a      	mov	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	791b      	ldrb	r3, [r3, #4]
 80065f6:	4619      	mov	r1, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	795b      	ldrb	r3, [r3, #5]
 80065fc:	9302      	str	r3, [sp, #8]
 80065fe:	9101      	str	r1, [sp, #4]
 8006600:	9200      	str	r2, [sp, #0]
 8006602:	462b      	mov	r3, r5
 8006604:	4622      	mov	r2, r4
 8006606:	4601      	mov	r1, r0
 8006608:	4827      	ldr	r0, [pc, #156]	; (80066a8 <wizchip_network_information+0x120>)
 800660a:	f000 fa09 	bl	8006a20 <iprintf>
  printf(" IP          : %d.%d.%d.%d\n", net_info->ip[0], net_info->ip[1], net_info->ip[2], net_info->ip[3]);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	799b      	ldrb	r3, [r3, #6]
 8006612:	4619      	mov	r1, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	79db      	ldrb	r3, [r3, #7]
 8006618:	461a      	mov	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	7a1b      	ldrb	r3, [r3, #8]
 800661e:	4618      	mov	r0, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	7a5b      	ldrb	r3, [r3, #9]
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	4603      	mov	r3, r0
 8006628:	4820      	ldr	r0, [pc, #128]	; (80066ac <wizchip_network_information+0x124>)
 800662a:	f000 f9f9 	bl	8006a20 <iprintf>
  printf(" Subnet Mask : %d.%d.%d.%d\n", net_info->sn[0], net_info->sn[1], net_info->sn[2], net_info->sn[3]);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	7a9b      	ldrb	r3, [r3, #10]
 8006632:	4619      	mov	r1, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	7adb      	ldrb	r3, [r3, #11]
 8006638:	461a      	mov	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	7b1b      	ldrb	r3, [r3, #12]
 800663e:	4618      	mov	r0, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	7b5b      	ldrb	r3, [r3, #13]
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	4603      	mov	r3, r0
 8006648:	4819      	ldr	r0, [pc, #100]	; (80066b0 <wizchip_network_information+0x128>)
 800664a:	f000 f9e9 	bl	8006a20 <iprintf>
  printf(" Gateway     : %d.%d.%d.%d\n", net_info->gw[0], net_info->gw[1], net_info->gw[2], net_info->gw[3]);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	7b9b      	ldrb	r3, [r3, #14]
 8006652:	4619      	mov	r1, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	7bdb      	ldrb	r3, [r3, #15]
 8006658:	461a      	mov	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	7c1b      	ldrb	r3, [r3, #16]
 800665e:	4618      	mov	r0, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	7c5b      	ldrb	r3, [r3, #17]
 8006664:	9300      	str	r3, [sp, #0]
 8006666:	4603      	mov	r3, r0
 8006668:	4812      	ldr	r0, [pc, #72]	; (80066b4 <wizchip_network_information+0x12c>)
 800666a:	f000 f9d9 	bl	8006a20 <iprintf>
  printf(" DNS         : %d.%d.%d.%d\n", net_info->dns[0], net_info->dns[1], net_info->dns[2], net_info->dns[3]);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	7c9b      	ldrb	r3, [r3, #18]
 8006672:	4619      	mov	r1, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	7cdb      	ldrb	r3, [r3, #19]
 8006678:	461a      	mov	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	7d1b      	ldrb	r3, [r3, #20]
 800667e:	4618      	mov	r0, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	7d5b      	ldrb	r3, [r3, #21]
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	4603      	mov	r3, r0
 8006688:	480b      	ldr	r0, [pc, #44]	; (80066b8 <wizchip_network_information+0x130>)
 800668a:	f000 f9c9 	bl	8006a20 <iprintf>
  printf("====================================================================================================\n\n");
 800668e:	480b      	ldr	r0, [pc, #44]	; (80066bc <wizchip_network_information+0x134>)
 8006690:	f000 fa2c 	bl	8006aec <puts>
}
 8006694:	bf00      	nop
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bdb0      	pop	{r4, r5, r7, pc}
 800669c:	0800773c 	.word	0x0800773c
 80066a0:	080077a4 	.word	0x080077a4
 80066a4:	080077c8 	.word	0x080077c8
 80066a8:	080077f0 	.word	0x080077f0
 80066ac:	08007820 	.word	0x08007820
 80066b0:	0800783c 	.word	0x0800783c
 80066b4:	08007858 	.word	0x08007858
 80066b8:	08007874 	.word	0x08007874
 80066bc:	08007890 	.word	0x08007890

080066c0 <HAL_SYSTICK_Callback>:
 * ----------------------------------------------------------------------------------------------------
 * Functions
 * ----------------------------------------------------------------------------------------------------
 */
void HAL_SYSTICK_Callback(void)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	af00      	add	r7, sp, #0
  g_time_base++;
 80066c4:	4b10      	ldr	r3, [pc, #64]	; (8006708 <HAL_SYSTICK_Callback+0x48>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	3301      	adds	r3, #1
 80066ca:	4a0f      	ldr	r2, [pc, #60]	; (8006708 <HAL_SYSTICK_Callback+0x48>)
 80066cc:	6013      	str	r3, [r2, #0]

  if ((g_time_base % 1) == 0) // uint : 1 millisecond, repeat every millisecond
  {
    g_msec++;
 80066ce:	4b0f      	ldr	r3, [pc, #60]	; (800670c <HAL_SYSTICK_Callback+0x4c>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3301      	adds	r3, #1
 80066d4:	4a0d      	ldr	r2, [pc, #52]	; (800670c <HAL_SYSTICK_Callback+0x4c>)
 80066d6:	6013      	str	r3, [r2, #0]

    wizchip_1msec_timer_callback();
 80066d8:	f000 f81e 	bl	8006718 <wizchip_1msec_timer_callback>
  }

  if ((g_time_base % 1000) == 0) // uint : 1 second, repeat every second
 80066dc:	4b0a      	ldr	r3, [pc, #40]	; (8006708 <HAL_SYSTICK_Callback+0x48>)
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	4b0b      	ldr	r3, [pc, #44]	; (8006710 <HAL_SYSTICK_Callback+0x50>)
 80066e2:	fba3 1302 	umull	r1, r3, r3, r2
 80066e6:	099b      	lsrs	r3, r3, #6
 80066e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80066ec:	fb01 f303 	mul.w	r3, r1, r3
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d106      	bne.n	8006704 <HAL_SYSTICK_Callback+0x44>
  {
    g_sec++;
 80066f6:	4b07      	ldr	r3, [pc, #28]	; (8006714 <HAL_SYSTICK_Callback+0x54>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	3301      	adds	r3, #1
 80066fc:	4a05      	ldr	r2, [pc, #20]	; (8006714 <HAL_SYSTICK_Callback+0x54>)
 80066fe:	6013      	str	r3, [r2, #0]

    wizchip_1sec_timer_callback();
 8006700:	f000 f818 	bl	8006734 <wizchip_1sec_timer_callback>
  }
}
 8006704:	bf00      	nop
 8006706:	bd80      	pop	{r7, pc}
 8006708:	200008f0 	.word	0x200008f0
 800670c:	200008f8 	.word	0x200008f8
 8006710:	10624dd3 	.word	0x10624dd3
 8006714:	200008f4 	.word	0x200008f4

08006718 <wizchip_1msec_timer_callback>:
{
  msec_timer_callback_ptr = callback;
}

void wizchip_1msec_timer_callback(void)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	af00      	add	r7, sp, #0
  if (msec_timer_callback_ptr != NULL)
 800671c:	4b04      	ldr	r3, [pc, #16]	; (8006730 <wizchip_1msec_timer_callback+0x18>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d002      	beq.n	800672a <wizchip_1msec_timer_callback+0x12>
  {
    msec_timer_callback_ptr();
 8006724:	4b02      	ldr	r3, [pc, #8]	; (8006730 <wizchip_1msec_timer_callback+0x18>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4798      	blx	r3
  }
}
 800672a:	bf00      	nop
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	20000be8 	.word	0x20000be8

08006734 <wizchip_1sec_timer_callback>:
{
  sec_timer_callback_ptr = callback;
}

void wizchip_1sec_timer_callback(void)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	af00      	add	r7, sp, #0
  if (sec_timer_callback_ptr != NULL)
 8006738:	4b04      	ldr	r3, [pc, #16]	; (800674c <wizchip_1sec_timer_callback+0x18>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d002      	beq.n	8006746 <wizchip_1sec_timer_callback+0x12>
  {
    sec_timer_callback_ptr();
 8006740:	4b02      	ldr	r3, [pc, #8]	; (800674c <wizchip_1sec_timer_callback+0x18>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4798      	blx	r3
  }
}
 8006746:	bf00      	nop
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	20000bec 	.word	0x20000bec

08006750 <wizchip_get_msec_tick>:
{
  HAL_Delay(sec * 1000);
}

uint32_t wizchip_get_msec_tick(void)
{
 8006750:	b480      	push	{r7}
 8006752:	af00      	add	r7, sp, #0
  return g_msec;
 8006754:	4b03      	ldr	r3, [pc, #12]	; (8006764 <wizchip_get_msec_tick+0x14>)
 8006756:	681b      	ldr	r3, [r3, #0]
}
 8006758:	4618      	mov	r0, r3
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	200008f8 	.word	0x200008f8

08006768 <sbrk_aligned>:
 8006768:	b570      	push	{r4, r5, r6, lr}
 800676a:	4e0e      	ldr	r6, [pc, #56]	; (80067a4 <sbrk_aligned+0x3c>)
 800676c:	460c      	mov	r4, r1
 800676e:	6831      	ldr	r1, [r6, #0]
 8006770:	4605      	mov	r5, r0
 8006772:	b911      	cbnz	r1, 800677a <sbrk_aligned+0x12>
 8006774:	f000 fad6 	bl	8006d24 <_sbrk_r>
 8006778:	6030      	str	r0, [r6, #0]
 800677a:	4621      	mov	r1, r4
 800677c:	4628      	mov	r0, r5
 800677e:	f000 fad1 	bl	8006d24 <_sbrk_r>
 8006782:	1c43      	adds	r3, r0, #1
 8006784:	d00a      	beq.n	800679c <sbrk_aligned+0x34>
 8006786:	1cc4      	adds	r4, r0, #3
 8006788:	f024 0403 	bic.w	r4, r4, #3
 800678c:	42a0      	cmp	r0, r4
 800678e:	d007      	beq.n	80067a0 <sbrk_aligned+0x38>
 8006790:	1a21      	subs	r1, r4, r0
 8006792:	4628      	mov	r0, r5
 8006794:	f000 fac6 	bl	8006d24 <_sbrk_r>
 8006798:	3001      	adds	r0, #1
 800679a:	d101      	bne.n	80067a0 <sbrk_aligned+0x38>
 800679c:	f04f 34ff 	mov.w	r4, #4294967295
 80067a0:	4620      	mov	r0, r4
 80067a2:	bd70      	pop	{r4, r5, r6, pc}
 80067a4:	20000900 	.word	0x20000900

080067a8 <_malloc_r>:
 80067a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067ac:	1ccd      	adds	r5, r1, #3
 80067ae:	f025 0503 	bic.w	r5, r5, #3
 80067b2:	3508      	adds	r5, #8
 80067b4:	2d0c      	cmp	r5, #12
 80067b6:	bf38      	it	cc
 80067b8:	250c      	movcc	r5, #12
 80067ba:	2d00      	cmp	r5, #0
 80067bc:	4607      	mov	r7, r0
 80067be:	db01      	blt.n	80067c4 <_malloc_r+0x1c>
 80067c0:	42a9      	cmp	r1, r5
 80067c2:	d905      	bls.n	80067d0 <_malloc_r+0x28>
 80067c4:	230c      	movs	r3, #12
 80067c6:	603b      	str	r3, [r7, #0]
 80067c8:	2600      	movs	r6, #0
 80067ca:	4630      	mov	r0, r6
 80067cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80068a4 <_malloc_r+0xfc>
 80067d4:	f000 f868 	bl	80068a8 <__malloc_lock>
 80067d8:	f8d8 3000 	ldr.w	r3, [r8]
 80067dc:	461c      	mov	r4, r3
 80067de:	bb5c      	cbnz	r4, 8006838 <_malloc_r+0x90>
 80067e0:	4629      	mov	r1, r5
 80067e2:	4638      	mov	r0, r7
 80067e4:	f7ff ffc0 	bl	8006768 <sbrk_aligned>
 80067e8:	1c43      	adds	r3, r0, #1
 80067ea:	4604      	mov	r4, r0
 80067ec:	d155      	bne.n	800689a <_malloc_r+0xf2>
 80067ee:	f8d8 4000 	ldr.w	r4, [r8]
 80067f2:	4626      	mov	r6, r4
 80067f4:	2e00      	cmp	r6, #0
 80067f6:	d145      	bne.n	8006884 <_malloc_r+0xdc>
 80067f8:	2c00      	cmp	r4, #0
 80067fa:	d048      	beq.n	800688e <_malloc_r+0xe6>
 80067fc:	6823      	ldr	r3, [r4, #0]
 80067fe:	4631      	mov	r1, r6
 8006800:	4638      	mov	r0, r7
 8006802:	eb04 0903 	add.w	r9, r4, r3
 8006806:	f000 fa8d 	bl	8006d24 <_sbrk_r>
 800680a:	4581      	cmp	r9, r0
 800680c:	d13f      	bne.n	800688e <_malloc_r+0xe6>
 800680e:	6821      	ldr	r1, [r4, #0]
 8006810:	1a6d      	subs	r5, r5, r1
 8006812:	4629      	mov	r1, r5
 8006814:	4638      	mov	r0, r7
 8006816:	f7ff ffa7 	bl	8006768 <sbrk_aligned>
 800681a:	3001      	adds	r0, #1
 800681c:	d037      	beq.n	800688e <_malloc_r+0xe6>
 800681e:	6823      	ldr	r3, [r4, #0]
 8006820:	442b      	add	r3, r5
 8006822:	6023      	str	r3, [r4, #0]
 8006824:	f8d8 3000 	ldr.w	r3, [r8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d038      	beq.n	800689e <_malloc_r+0xf6>
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	42a2      	cmp	r2, r4
 8006830:	d12b      	bne.n	800688a <_malloc_r+0xe2>
 8006832:	2200      	movs	r2, #0
 8006834:	605a      	str	r2, [r3, #4]
 8006836:	e00f      	b.n	8006858 <_malloc_r+0xb0>
 8006838:	6822      	ldr	r2, [r4, #0]
 800683a:	1b52      	subs	r2, r2, r5
 800683c:	d41f      	bmi.n	800687e <_malloc_r+0xd6>
 800683e:	2a0b      	cmp	r2, #11
 8006840:	d917      	bls.n	8006872 <_malloc_r+0xca>
 8006842:	1961      	adds	r1, r4, r5
 8006844:	42a3      	cmp	r3, r4
 8006846:	6025      	str	r5, [r4, #0]
 8006848:	bf18      	it	ne
 800684a:	6059      	strne	r1, [r3, #4]
 800684c:	6863      	ldr	r3, [r4, #4]
 800684e:	bf08      	it	eq
 8006850:	f8c8 1000 	streq.w	r1, [r8]
 8006854:	5162      	str	r2, [r4, r5]
 8006856:	604b      	str	r3, [r1, #4]
 8006858:	4638      	mov	r0, r7
 800685a:	f104 060b 	add.w	r6, r4, #11
 800685e:	f000 f829 	bl	80068b4 <__malloc_unlock>
 8006862:	f026 0607 	bic.w	r6, r6, #7
 8006866:	1d23      	adds	r3, r4, #4
 8006868:	1af2      	subs	r2, r6, r3
 800686a:	d0ae      	beq.n	80067ca <_malloc_r+0x22>
 800686c:	1b9b      	subs	r3, r3, r6
 800686e:	50a3      	str	r3, [r4, r2]
 8006870:	e7ab      	b.n	80067ca <_malloc_r+0x22>
 8006872:	42a3      	cmp	r3, r4
 8006874:	6862      	ldr	r2, [r4, #4]
 8006876:	d1dd      	bne.n	8006834 <_malloc_r+0x8c>
 8006878:	f8c8 2000 	str.w	r2, [r8]
 800687c:	e7ec      	b.n	8006858 <_malloc_r+0xb0>
 800687e:	4623      	mov	r3, r4
 8006880:	6864      	ldr	r4, [r4, #4]
 8006882:	e7ac      	b.n	80067de <_malloc_r+0x36>
 8006884:	4634      	mov	r4, r6
 8006886:	6876      	ldr	r6, [r6, #4]
 8006888:	e7b4      	b.n	80067f4 <_malloc_r+0x4c>
 800688a:	4613      	mov	r3, r2
 800688c:	e7cc      	b.n	8006828 <_malloc_r+0x80>
 800688e:	230c      	movs	r3, #12
 8006890:	603b      	str	r3, [r7, #0]
 8006892:	4638      	mov	r0, r7
 8006894:	f000 f80e 	bl	80068b4 <__malloc_unlock>
 8006898:	e797      	b.n	80067ca <_malloc_r+0x22>
 800689a:	6025      	str	r5, [r4, #0]
 800689c:	e7dc      	b.n	8006858 <_malloc_r+0xb0>
 800689e:	605b      	str	r3, [r3, #4]
 80068a0:	deff      	udf	#255	; 0xff
 80068a2:	bf00      	nop
 80068a4:	200008fc 	.word	0x200008fc

080068a8 <__malloc_lock>:
 80068a8:	4801      	ldr	r0, [pc, #4]	; (80068b0 <__malloc_lock+0x8>)
 80068aa:	f000 ba87 	b.w	8006dbc <__retarget_lock_acquire_recursive>
 80068ae:	bf00      	nop
 80068b0:	20000a44 	.word	0x20000a44

080068b4 <__malloc_unlock>:
 80068b4:	4801      	ldr	r0, [pc, #4]	; (80068bc <__malloc_unlock+0x8>)
 80068b6:	f000 ba82 	b.w	8006dbe <__retarget_lock_release_recursive>
 80068ba:	bf00      	nop
 80068bc:	20000a44 	.word	0x20000a44

080068c0 <std>:
 80068c0:	2300      	movs	r3, #0
 80068c2:	b510      	push	{r4, lr}
 80068c4:	4604      	mov	r4, r0
 80068c6:	e9c0 3300 	strd	r3, r3, [r0]
 80068ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068ce:	6083      	str	r3, [r0, #8]
 80068d0:	8181      	strh	r1, [r0, #12]
 80068d2:	6643      	str	r3, [r0, #100]	; 0x64
 80068d4:	81c2      	strh	r2, [r0, #14]
 80068d6:	6183      	str	r3, [r0, #24]
 80068d8:	4619      	mov	r1, r3
 80068da:	2208      	movs	r2, #8
 80068dc:	305c      	adds	r0, #92	; 0x5c
 80068de:	f000 f9e5 	bl	8006cac <memset>
 80068e2:	4b05      	ldr	r3, [pc, #20]	; (80068f8 <std+0x38>)
 80068e4:	6263      	str	r3, [r4, #36]	; 0x24
 80068e6:	4b05      	ldr	r3, [pc, #20]	; (80068fc <std+0x3c>)
 80068e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80068ea:	4b05      	ldr	r3, [pc, #20]	; (8006900 <std+0x40>)
 80068ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068ee:	4b05      	ldr	r3, [pc, #20]	; (8006904 <std+0x44>)
 80068f0:	6224      	str	r4, [r4, #32]
 80068f2:	6323      	str	r3, [r4, #48]	; 0x30
 80068f4:	bd10      	pop	{r4, pc}
 80068f6:	bf00      	nop
 80068f8:	08006afd 	.word	0x08006afd
 80068fc:	08006b1f 	.word	0x08006b1f
 8006900:	08006b57 	.word	0x08006b57
 8006904:	08006b7b 	.word	0x08006b7b

08006908 <stdio_exit_handler>:
 8006908:	4a02      	ldr	r2, [pc, #8]	; (8006914 <stdio_exit_handler+0xc>)
 800690a:	4903      	ldr	r1, [pc, #12]	; (8006918 <stdio_exit_handler+0x10>)
 800690c:	4803      	ldr	r0, [pc, #12]	; (800691c <stdio_exit_handler+0x14>)
 800690e:	f000 b869 	b.w	80069e4 <_fwalk_sglue>
 8006912:	bf00      	nop
 8006914:	20000040 	.word	0x20000040
 8006918:	0800750d 	.word	0x0800750d
 800691c:	2000004c 	.word	0x2000004c

08006920 <cleanup_stdio>:
 8006920:	6841      	ldr	r1, [r0, #4]
 8006922:	4b0c      	ldr	r3, [pc, #48]	; (8006954 <cleanup_stdio+0x34>)
 8006924:	4299      	cmp	r1, r3
 8006926:	b510      	push	{r4, lr}
 8006928:	4604      	mov	r4, r0
 800692a:	d001      	beq.n	8006930 <cleanup_stdio+0x10>
 800692c:	f000 fdee 	bl	800750c <_fflush_r>
 8006930:	68a1      	ldr	r1, [r4, #8]
 8006932:	4b09      	ldr	r3, [pc, #36]	; (8006958 <cleanup_stdio+0x38>)
 8006934:	4299      	cmp	r1, r3
 8006936:	d002      	beq.n	800693e <cleanup_stdio+0x1e>
 8006938:	4620      	mov	r0, r4
 800693a:	f000 fde7 	bl	800750c <_fflush_r>
 800693e:	68e1      	ldr	r1, [r4, #12]
 8006940:	4b06      	ldr	r3, [pc, #24]	; (800695c <cleanup_stdio+0x3c>)
 8006942:	4299      	cmp	r1, r3
 8006944:	d004      	beq.n	8006950 <cleanup_stdio+0x30>
 8006946:	4620      	mov	r0, r4
 8006948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800694c:	f000 bdde 	b.w	800750c <_fflush_r>
 8006950:	bd10      	pop	{r4, pc}
 8006952:	bf00      	nop
 8006954:	20000904 	.word	0x20000904
 8006958:	2000096c 	.word	0x2000096c
 800695c:	200009d4 	.word	0x200009d4

08006960 <global_stdio_init.part.0>:
 8006960:	b510      	push	{r4, lr}
 8006962:	4b0b      	ldr	r3, [pc, #44]	; (8006990 <global_stdio_init.part.0+0x30>)
 8006964:	4c0b      	ldr	r4, [pc, #44]	; (8006994 <global_stdio_init.part.0+0x34>)
 8006966:	4a0c      	ldr	r2, [pc, #48]	; (8006998 <global_stdio_init.part.0+0x38>)
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	4620      	mov	r0, r4
 800696c:	2200      	movs	r2, #0
 800696e:	2104      	movs	r1, #4
 8006970:	f7ff ffa6 	bl	80068c0 <std>
 8006974:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006978:	2201      	movs	r2, #1
 800697a:	2109      	movs	r1, #9
 800697c:	f7ff ffa0 	bl	80068c0 <std>
 8006980:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006984:	2202      	movs	r2, #2
 8006986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800698a:	2112      	movs	r1, #18
 800698c:	f7ff bf98 	b.w	80068c0 <std>
 8006990:	20000a3c 	.word	0x20000a3c
 8006994:	20000904 	.word	0x20000904
 8006998:	08006909 	.word	0x08006909

0800699c <__sfp_lock_acquire>:
 800699c:	4801      	ldr	r0, [pc, #4]	; (80069a4 <__sfp_lock_acquire+0x8>)
 800699e:	f000 ba0d 	b.w	8006dbc <__retarget_lock_acquire_recursive>
 80069a2:	bf00      	nop
 80069a4:	20000a45 	.word	0x20000a45

080069a8 <__sfp_lock_release>:
 80069a8:	4801      	ldr	r0, [pc, #4]	; (80069b0 <__sfp_lock_release+0x8>)
 80069aa:	f000 ba08 	b.w	8006dbe <__retarget_lock_release_recursive>
 80069ae:	bf00      	nop
 80069b0:	20000a45 	.word	0x20000a45

080069b4 <__sinit>:
 80069b4:	b510      	push	{r4, lr}
 80069b6:	4604      	mov	r4, r0
 80069b8:	f7ff fff0 	bl	800699c <__sfp_lock_acquire>
 80069bc:	6a23      	ldr	r3, [r4, #32]
 80069be:	b11b      	cbz	r3, 80069c8 <__sinit+0x14>
 80069c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069c4:	f7ff bff0 	b.w	80069a8 <__sfp_lock_release>
 80069c8:	4b04      	ldr	r3, [pc, #16]	; (80069dc <__sinit+0x28>)
 80069ca:	6223      	str	r3, [r4, #32]
 80069cc:	4b04      	ldr	r3, [pc, #16]	; (80069e0 <__sinit+0x2c>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1f5      	bne.n	80069c0 <__sinit+0xc>
 80069d4:	f7ff ffc4 	bl	8006960 <global_stdio_init.part.0>
 80069d8:	e7f2      	b.n	80069c0 <__sinit+0xc>
 80069da:	bf00      	nop
 80069dc:	08006921 	.word	0x08006921
 80069e0:	20000a3c 	.word	0x20000a3c

080069e4 <_fwalk_sglue>:
 80069e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069e8:	4607      	mov	r7, r0
 80069ea:	4688      	mov	r8, r1
 80069ec:	4614      	mov	r4, r2
 80069ee:	2600      	movs	r6, #0
 80069f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069f4:	f1b9 0901 	subs.w	r9, r9, #1
 80069f8:	d505      	bpl.n	8006a06 <_fwalk_sglue+0x22>
 80069fa:	6824      	ldr	r4, [r4, #0]
 80069fc:	2c00      	cmp	r4, #0
 80069fe:	d1f7      	bne.n	80069f0 <_fwalk_sglue+0xc>
 8006a00:	4630      	mov	r0, r6
 8006a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a06:	89ab      	ldrh	r3, [r5, #12]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d907      	bls.n	8006a1c <_fwalk_sglue+0x38>
 8006a0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a10:	3301      	adds	r3, #1
 8006a12:	d003      	beq.n	8006a1c <_fwalk_sglue+0x38>
 8006a14:	4629      	mov	r1, r5
 8006a16:	4638      	mov	r0, r7
 8006a18:	47c0      	blx	r8
 8006a1a:	4306      	orrs	r6, r0
 8006a1c:	3568      	adds	r5, #104	; 0x68
 8006a1e:	e7e9      	b.n	80069f4 <_fwalk_sglue+0x10>

08006a20 <iprintf>:
 8006a20:	b40f      	push	{r0, r1, r2, r3}
 8006a22:	b507      	push	{r0, r1, r2, lr}
 8006a24:	4906      	ldr	r1, [pc, #24]	; (8006a40 <iprintf+0x20>)
 8006a26:	ab04      	add	r3, sp, #16
 8006a28:	6808      	ldr	r0, [r1, #0]
 8006a2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a2e:	6881      	ldr	r1, [r0, #8]
 8006a30:	9301      	str	r3, [sp, #4]
 8006a32:	f000 fa3b 	bl	8006eac <_vfiprintf_r>
 8006a36:	b003      	add	sp, #12
 8006a38:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a3c:	b004      	add	sp, #16
 8006a3e:	4770      	bx	lr
 8006a40:	20000098 	.word	0x20000098

08006a44 <_puts_r>:
 8006a44:	6a03      	ldr	r3, [r0, #32]
 8006a46:	b570      	push	{r4, r5, r6, lr}
 8006a48:	6884      	ldr	r4, [r0, #8]
 8006a4a:	4605      	mov	r5, r0
 8006a4c:	460e      	mov	r6, r1
 8006a4e:	b90b      	cbnz	r3, 8006a54 <_puts_r+0x10>
 8006a50:	f7ff ffb0 	bl	80069b4 <__sinit>
 8006a54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a56:	07db      	lsls	r3, r3, #31
 8006a58:	d405      	bmi.n	8006a66 <_puts_r+0x22>
 8006a5a:	89a3      	ldrh	r3, [r4, #12]
 8006a5c:	0598      	lsls	r0, r3, #22
 8006a5e:	d402      	bmi.n	8006a66 <_puts_r+0x22>
 8006a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a62:	f000 f9ab 	bl	8006dbc <__retarget_lock_acquire_recursive>
 8006a66:	89a3      	ldrh	r3, [r4, #12]
 8006a68:	0719      	lsls	r1, r3, #28
 8006a6a:	d513      	bpl.n	8006a94 <_puts_r+0x50>
 8006a6c:	6923      	ldr	r3, [r4, #16]
 8006a6e:	b18b      	cbz	r3, 8006a94 <_puts_r+0x50>
 8006a70:	3e01      	subs	r6, #1
 8006a72:	68a3      	ldr	r3, [r4, #8]
 8006a74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	60a3      	str	r3, [r4, #8]
 8006a7c:	b9e9      	cbnz	r1, 8006aba <_puts_r+0x76>
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	da2e      	bge.n	8006ae0 <_puts_r+0x9c>
 8006a82:	4622      	mov	r2, r4
 8006a84:	210a      	movs	r1, #10
 8006a86:	4628      	mov	r0, r5
 8006a88:	f000 f87b 	bl	8006b82 <__swbuf_r>
 8006a8c:	3001      	adds	r0, #1
 8006a8e:	d007      	beq.n	8006aa0 <_puts_r+0x5c>
 8006a90:	250a      	movs	r5, #10
 8006a92:	e007      	b.n	8006aa4 <_puts_r+0x60>
 8006a94:	4621      	mov	r1, r4
 8006a96:	4628      	mov	r0, r5
 8006a98:	f000 f8b0 	bl	8006bfc <__swsetup_r>
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	d0e7      	beq.n	8006a70 <_puts_r+0x2c>
 8006aa0:	f04f 35ff 	mov.w	r5, #4294967295
 8006aa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006aa6:	07da      	lsls	r2, r3, #31
 8006aa8:	d405      	bmi.n	8006ab6 <_puts_r+0x72>
 8006aaa:	89a3      	ldrh	r3, [r4, #12]
 8006aac:	059b      	lsls	r3, r3, #22
 8006aae:	d402      	bmi.n	8006ab6 <_puts_r+0x72>
 8006ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ab2:	f000 f984 	bl	8006dbe <__retarget_lock_release_recursive>
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	bd70      	pop	{r4, r5, r6, pc}
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	da04      	bge.n	8006ac8 <_puts_r+0x84>
 8006abe:	69a2      	ldr	r2, [r4, #24]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	dc06      	bgt.n	8006ad2 <_puts_r+0x8e>
 8006ac4:	290a      	cmp	r1, #10
 8006ac6:	d004      	beq.n	8006ad2 <_puts_r+0x8e>
 8006ac8:	6823      	ldr	r3, [r4, #0]
 8006aca:	1c5a      	adds	r2, r3, #1
 8006acc:	6022      	str	r2, [r4, #0]
 8006ace:	7019      	strb	r1, [r3, #0]
 8006ad0:	e7cf      	b.n	8006a72 <_puts_r+0x2e>
 8006ad2:	4622      	mov	r2, r4
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	f000 f854 	bl	8006b82 <__swbuf_r>
 8006ada:	3001      	adds	r0, #1
 8006adc:	d1c9      	bne.n	8006a72 <_puts_r+0x2e>
 8006ade:	e7df      	b.n	8006aa0 <_puts_r+0x5c>
 8006ae0:	6823      	ldr	r3, [r4, #0]
 8006ae2:	250a      	movs	r5, #10
 8006ae4:	1c5a      	adds	r2, r3, #1
 8006ae6:	6022      	str	r2, [r4, #0]
 8006ae8:	701d      	strb	r5, [r3, #0]
 8006aea:	e7db      	b.n	8006aa4 <_puts_r+0x60>

08006aec <puts>:
 8006aec:	4b02      	ldr	r3, [pc, #8]	; (8006af8 <puts+0xc>)
 8006aee:	4601      	mov	r1, r0
 8006af0:	6818      	ldr	r0, [r3, #0]
 8006af2:	f7ff bfa7 	b.w	8006a44 <_puts_r>
 8006af6:	bf00      	nop
 8006af8:	20000098 	.word	0x20000098

08006afc <__sread>:
 8006afc:	b510      	push	{r4, lr}
 8006afe:	460c      	mov	r4, r1
 8006b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b04:	f000 f8fc 	bl	8006d00 <_read_r>
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	bfab      	itete	ge
 8006b0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b0e:	89a3      	ldrhlt	r3, [r4, #12]
 8006b10:	181b      	addge	r3, r3, r0
 8006b12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b16:	bfac      	ite	ge
 8006b18:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b1a:	81a3      	strhlt	r3, [r4, #12]
 8006b1c:	bd10      	pop	{r4, pc}

08006b1e <__swrite>:
 8006b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b22:	461f      	mov	r7, r3
 8006b24:	898b      	ldrh	r3, [r1, #12]
 8006b26:	05db      	lsls	r3, r3, #23
 8006b28:	4605      	mov	r5, r0
 8006b2a:	460c      	mov	r4, r1
 8006b2c:	4616      	mov	r6, r2
 8006b2e:	d505      	bpl.n	8006b3c <__swrite+0x1e>
 8006b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b34:	2302      	movs	r3, #2
 8006b36:	2200      	movs	r2, #0
 8006b38:	f000 f8d0 	bl	8006cdc <_lseek_r>
 8006b3c:	89a3      	ldrh	r3, [r4, #12]
 8006b3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b46:	81a3      	strh	r3, [r4, #12]
 8006b48:	4632      	mov	r2, r6
 8006b4a:	463b      	mov	r3, r7
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b52:	f000 b8f7 	b.w	8006d44 <_write_r>

08006b56 <__sseek>:
 8006b56:	b510      	push	{r4, lr}
 8006b58:	460c      	mov	r4, r1
 8006b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b5e:	f000 f8bd 	bl	8006cdc <_lseek_r>
 8006b62:	1c43      	adds	r3, r0, #1
 8006b64:	89a3      	ldrh	r3, [r4, #12]
 8006b66:	bf15      	itete	ne
 8006b68:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b72:	81a3      	strheq	r3, [r4, #12]
 8006b74:	bf18      	it	ne
 8006b76:	81a3      	strhne	r3, [r4, #12]
 8006b78:	bd10      	pop	{r4, pc}

08006b7a <__sclose>:
 8006b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b7e:	f000 b89d 	b.w	8006cbc <_close_r>

08006b82 <__swbuf_r>:
 8006b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b84:	460e      	mov	r6, r1
 8006b86:	4614      	mov	r4, r2
 8006b88:	4605      	mov	r5, r0
 8006b8a:	b118      	cbz	r0, 8006b94 <__swbuf_r+0x12>
 8006b8c:	6a03      	ldr	r3, [r0, #32]
 8006b8e:	b90b      	cbnz	r3, 8006b94 <__swbuf_r+0x12>
 8006b90:	f7ff ff10 	bl	80069b4 <__sinit>
 8006b94:	69a3      	ldr	r3, [r4, #24]
 8006b96:	60a3      	str	r3, [r4, #8]
 8006b98:	89a3      	ldrh	r3, [r4, #12]
 8006b9a:	071a      	lsls	r2, r3, #28
 8006b9c:	d525      	bpl.n	8006bea <__swbuf_r+0x68>
 8006b9e:	6923      	ldr	r3, [r4, #16]
 8006ba0:	b31b      	cbz	r3, 8006bea <__swbuf_r+0x68>
 8006ba2:	6823      	ldr	r3, [r4, #0]
 8006ba4:	6922      	ldr	r2, [r4, #16]
 8006ba6:	1a98      	subs	r0, r3, r2
 8006ba8:	6963      	ldr	r3, [r4, #20]
 8006baa:	b2f6      	uxtb	r6, r6
 8006bac:	4283      	cmp	r3, r0
 8006bae:	4637      	mov	r7, r6
 8006bb0:	dc04      	bgt.n	8006bbc <__swbuf_r+0x3a>
 8006bb2:	4621      	mov	r1, r4
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	f000 fca9 	bl	800750c <_fflush_r>
 8006bba:	b9e0      	cbnz	r0, 8006bf6 <__swbuf_r+0x74>
 8006bbc:	68a3      	ldr	r3, [r4, #8]
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	60a3      	str	r3, [r4, #8]
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	1c5a      	adds	r2, r3, #1
 8006bc6:	6022      	str	r2, [r4, #0]
 8006bc8:	701e      	strb	r6, [r3, #0]
 8006bca:	6962      	ldr	r2, [r4, #20]
 8006bcc:	1c43      	adds	r3, r0, #1
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d004      	beq.n	8006bdc <__swbuf_r+0x5a>
 8006bd2:	89a3      	ldrh	r3, [r4, #12]
 8006bd4:	07db      	lsls	r3, r3, #31
 8006bd6:	d506      	bpl.n	8006be6 <__swbuf_r+0x64>
 8006bd8:	2e0a      	cmp	r6, #10
 8006bda:	d104      	bne.n	8006be6 <__swbuf_r+0x64>
 8006bdc:	4621      	mov	r1, r4
 8006bde:	4628      	mov	r0, r5
 8006be0:	f000 fc94 	bl	800750c <_fflush_r>
 8006be4:	b938      	cbnz	r0, 8006bf6 <__swbuf_r+0x74>
 8006be6:	4638      	mov	r0, r7
 8006be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bea:	4621      	mov	r1, r4
 8006bec:	4628      	mov	r0, r5
 8006bee:	f000 f805 	bl	8006bfc <__swsetup_r>
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	d0d5      	beq.n	8006ba2 <__swbuf_r+0x20>
 8006bf6:	f04f 37ff 	mov.w	r7, #4294967295
 8006bfa:	e7f4      	b.n	8006be6 <__swbuf_r+0x64>

08006bfc <__swsetup_r>:
 8006bfc:	b538      	push	{r3, r4, r5, lr}
 8006bfe:	4b2a      	ldr	r3, [pc, #168]	; (8006ca8 <__swsetup_r+0xac>)
 8006c00:	4605      	mov	r5, r0
 8006c02:	6818      	ldr	r0, [r3, #0]
 8006c04:	460c      	mov	r4, r1
 8006c06:	b118      	cbz	r0, 8006c10 <__swsetup_r+0x14>
 8006c08:	6a03      	ldr	r3, [r0, #32]
 8006c0a:	b90b      	cbnz	r3, 8006c10 <__swsetup_r+0x14>
 8006c0c:	f7ff fed2 	bl	80069b4 <__sinit>
 8006c10:	89a3      	ldrh	r3, [r4, #12]
 8006c12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c16:	0718      	lsls	r0, r3, #28
 8006c18:	d422      	bmi.n	8006c60 <__swsetup_r+0x64>
 8006c1a:	06d9      	lsls	r1, r3, #27
 8006c1c:	d407      	bmi.n	8006c2e <__swsetup_r+0x32>
 8006c1e:	2309      	movs	r3, #9
 8006c20:	602b      	str	r3, [r5, #0]
 8006c22:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c26:	81a3      	strh	r3, [r4, #12]
 8006c28:	f04f 30ff 	mov.w	r0, #4294967295
 8006c2c:	e034      	b.n	8006c98 <__swsetup_r+0x9c>
 8006c2e:	0758      	lsls	r0, r3, #29
 8006c30:	d512      	bpl.n	8006c58 <__swsetup_r+0x5c>
 8006c32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c34:	b141      	cbz	r1, 8006c48 <__swsetup_r+0x4c>
 8006c36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c3a:	4299      	cmp	r1, r3
 8006c3c:	d002      	beq.n	8006c44 <__swsetup_r+0x48>
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f000 f8be 	bl	8006dc0 <_free_r>
 8006c44:	2300      	movs	r3, #0
 8006c46:	6363      	str	r3, [r4, #52]	; 0x34
 8006c48:	89a3      	ldrh	r3, [r4, #12]
 8006c4a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c4e:	81a3      	strh	r3, [r4, #12]
 8006c50:	2300      	movs	r3, #0
 8006c52:	6063      	str	r3, [r4, #4]
 8006c54:	6923      	ldr	r3, [r4, #16]
 8006c56:	6023      	str	r3, [r4, #0]
 8006c58:	89a3      	ldrh	r3, [r4, #12]
 8006c5a:	f043 0308 	orr.w	r3, r3, #8
 8006c5e:	81a3      	strh	r3, [r4, #12]
 8006c60:	6923      	ldr	r3, [r4, #16]
 8006c62:	b94b      	cbnz	r3, 8006c78 <__swsetup_r+0x7c>
 8006c64:	89a3      	ldrh	r3, [r4, #12]
 8006c66:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c6e:	d003      	beq.n	8006c78 <__swsetup_r+0x7c>
 8006c70:	4621      	mov	r1, r4
 8006c72:	4628      	mov	r0, r5
 8006c74:	f000 fc98 	bl	80075a8 <__smakebuf_r>
 8006c78:	89a0      	ldrh	r0, [r4, #12]
 8006c7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c7e:	f010 0301 	ands.w	r3, r0, #1
 8006c82:	d00a      	beq.n	8006c9a <__swsetup_r+0x9e>
 8006c84:	2300      	movs	r3, #0
 8006c86:	60a3      	str	r3, [r4, #8]
 8006c88:	6963      	ldr	r3, [r4, #20]
 8006c8a:	425b      	negs	r3, r3
 8006c8c:	61a3      	str	r3, [r4, #24]
 8006c8e:	6923      	ldr	r3, [r4, #16]
 8006c90:	b943      	cbnz	r3, 8006ca4 <__swsetup_r+0xa8>
 8006c92:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c96:	d1c4      	bne.n	8006c22 <__swsetup_r+0x26>
 8006c98:	bd38      	pop	{r3, r4, r5, pc}
 8006c9a:	0781      	lsls	r1, r0, #30
 8006c9c:	bf58      	it	pl
 8006c9e:	6963      	ldrpl	r3, [r4, #20]
 8006ca0:	60a3      	str	r3, [r4, #8]
 8006ca2:	e7f4      	b.n	8006c8e <__swsetup_r+0x92>
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	e7f7      	b.n	8006c98 <__swsetup_r+0x9c>
 8006ca8:	20000098 	.word	0x20000098

08006cac <memset>:
 8006cac:	4402      	add	r2, r0
 8006cae:	4603      	mov	r3, r0
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d100      	bne.n	8006cb6 <memset+0xa>
 8006cb4:	4770      	bx	lr
 8006cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8006cba:	e7f9      	b.n	8006cb0 <memset+0x4>

08006cbc <_close_r>:
 8006cbc:	b538      	push	{r3, r4, r5, lr}
 8006cbe:	4d06      	ldr	r5, [pc, #24]	; (8006cd8 <_close_r+0x1c>)
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	4608      	mov	r0, r1
 8006cc6:	602b      	str	r3, [r5, #0]
 8006cc8:	f7fa f939 	bl	8000f3e <_close>
 8006ccc:	1c43      	adds	r3, r0, #1
 8006cce:	d102      	bne.n	8006cd6 <_close_r+0x1a>
 8006cd0:	682b      	ldr	r3, [r5, #0]
 8006cd2:	b103      	cbz	r3, 8006cd6 <_close_r+0x1a>
 8006cd4:	6023      	str	r3, [r4, #0]
 8006cd6:	bd38      	pop	{r3, r4, r5, pc}
 8006cd8:	20000a40 	.word	0x20000a40

08006cdc <_lseek_r>:
 8006cdc:	b538      	push	{r3, r4, r5, lr}
 8006cde:	4d07      	ldr	r5, [pc, #28]	; (8006cfc <_lseek_r+0x20>)
 8006ce0:	4604      	mov	r4, r0
 8006ce2:	4608      	mov	r0, r1
 8006ce4:	4611      	mov	r1, r2
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	602a      	str	r2, [r5, #0]
 8006cea:	461a      	mov	r2, r3
 8006cec:	f7fa f94e 	bl	8000f8c <_lseek>
 8006cf0:	1c43      	adds	r3, r0, #1
 8006cf2:	d102      	bne.n	8006cfa <_lseek_r+0x1e>
 8006cf4:	682b      	ldr	r3, [r5, #0]
 8006cf6:	b103      	cbz	r3, 8006cfa <_lseek_r+0x1e>
 8006cf8:	6023      	str	r3, [r4, #0]
 8006cfa:	bd38      	pop	{r3, r4, r5, pc}
 8006cfc:	20000a40 	.word	0x20000a40

08006d00 <_read_r>:
 8006d00:	b538      	push	{r3, r4, r5, lr}
 8006d02:	4d07      	ldr	r5, [pc, #28]	; (8006d20 <_read_r+0x20>)
 8006d04:	4604      	mov	r4, r0
 8006d06:	4608      	mov	r0, r1
 8006d08:	4611      	mov	r1, r2
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	602a      	str	r2, [r5, #0]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	f7fa f8dc 	bl	8000ecc <_read>
 8006d14:	1c43      	adds	r3, r0, #1
 8006d16:	d102      	bne.n	8006d1e <_read_r+0x1e>
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	b103      	cbz	r3, 8006d1e <_read_r+0x1e>
 8006d1c:	6023      	str	r3, [r4, #0]
 8006d1e:	bd38      	pop	{r3, r4, r5, pc}
 8006d20:	20000a40 	.word	0x20000a40

08006d24 <_sbrk_r>:
 8006d24:	b538      	push	{r3, r4, r5, lr}
 8006d26:	4d06      	ldr	r5, [pc, #24]	; (8006d40 <_sbrk_r+0x1c>)
 8006d28:	2300      	movs	r3, #0
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	4608      	mov	r0, r1
 8006d2e:	602b      	str	r3, [r5, #0]
 8006d30:	f7fa f93a 	bl	8000fa8 <_sbrk>
 8006d34:	1c43      	adds	r3, r0, #1
 8006d36:	d102      	bne.n	8006d3e <_sbrk_r+0x1a>
 8006d38:	682b      	ldr	r3, [r5, #0]
 8006d3a:	b103      	cbz	r3, 8006d3e <_sbrk_r+0x1a>
 8006d3c:	6023      	str	r3, [r4, #0]
 8006d3e:	bd38      	pop	{r3, r4, r5, pc}
 8006d40:	20000a40 	.word	0x20000a40

08006d44 <_write_r>:
 8006d44:	b538      	push	{r3, r4, r5, lr}
 8006d46:	4d07      	ldr	r5, [pc, #28]	; (8006d64 <_write_r+0x20>)
 8006d48:	4604      	mov	r4, r0
 8006d4a:	4608      	mov	r0, r1
 8006d4c:	4611      	mov	r1, r2
 8006d4e:	2200      	movs	r2, #0
 8006d50:	602a      	str	r2, [r5, #0]
 8006d52:	461a      	mov	r2, r3
 8006d54:	f7fa f8d7 	bl	8000f06 <_write>
 8006d58:	1c43      	adds	r3, r0, #1
 8006d5a:	d102      	bne.n	8006d62 <_write_r+0x1e>
 8006d5c:	682b      	ldr	r3, [r5, #0]
 8006d5e:	b103      	cbz	r3, 8006d62 <_write_r+0x1e>
 8006d60:	6023      	str	r3, [r4, #0]
 8006d62:	bd38      	pop	{r3, r4, r5, pc}
 8006d64:	20000a40 	.word	0x20000a40

08006d68 <__errno>:
 8006d68:	4b01      	ldr	r3, [pc, #4]	; (8006d70 <__errno+0x8>)
 8006d6a:	6818      	ldr	r0, [r3, #0]
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	20000098 	.word	0x20000098

08006d74 <__libc_init_array>:
 8006d74:	b570      	push	{r4, r5, r6, lr}
 8006d76:	4d0d      	ldr	r5, [pc, #52]	; (8006dac <__libc_init_array+0x38>)
 8006d78:	4c0d      	ldr	r4, [pc, #52]	; (8006db0 <__libc_init_array+0x3c>)
 8006d7a:	1b64      	subs	r4, r4, r5
 8006d7c:	10a4      	asrs	r4, r4, #2
 8006d7e:	2600      	movs	r6, #0
 8006d80:	42a6      	cmp	r6, r4
 8006d82:	d109      	bne.n	8006d98 <__libc_init_array+0x24>
 8006d84:	4d0b      	ldr	r5, [pc, #44]	; (8006db4 <__libc_init_array+0x40>)
 8006d86:	4c0c      	ldr	r4, [pc, #48]	; (8006db8 <__libc_init_array+0x44>)
 8006d88:	f000 fc6c 	bl	8007664 <_init>
 8006d8c:	1b64      	subs	r4, r4, r5
 8006d8e:	10a4      	asrs	r4, r4, #2
 8006d90:	2600      	movs	r6, #0
 8006d92:	42a6      	cmp	r6, r4
 8006d94:	d105      	bne.n	8006da2 <__libc_init_array+0x2e>
 8006d96:	bd70      	pop	{r4, r5, r6, pc}
 8006d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d9c:	4798      	blx	r3
 8006d9e:	3601      	adds	r6, #1
 8006da0:	e7ee      	b.n	8006d80 <__libc_init_array+0xc>
 8006da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006da6:	4798      	blx	r3
 8006da8:	3601      	adds	r6, #1
 8006daa:	e7f2      	b.n	8006d92 <__libc_init_array+0x1e>
 8006dac:	0800794c 	.word	0x0800794c
 8006db0:	0800794c 	.word	0x0800794c
 8006db4:	0800794c 	.word	0x0800794c
 8006db8:	08007950 	.word	0x08007950

08006dbc <__retarget_lock_acquire_recursive>:
 8006dbc:	4770      	bx	lr

08006dbe <__retarget_lock_release_recursive>:
 8006dbe:	4770      	bx	lr

08006dc0 <_free_r>:
 8006dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dc2:	2900      	cmp	r1, #0
 8006dc4:	d044      	beq.n	8006e50 <_free_r+0x90>
 8006dc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dca:	9001      	str	r0, [sp, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f1a1 0404 	sub.w	r4, r1, #4
 8006dd2:	bfb8      	it	lt
 8006dd4:	18e4      	addlt	r4, r4, r3
 8006dd6:	f7ff fd67 	bl	80068a8 <__malloc_lock>
 8006dda:	4a1e      	ldr	r2, [pc, #120]	; (8006e54 <_free_r+0x94>)
 8006ddc:	9801      	ldr	r0, [sp, #4]
 8006dde:	6813      	ldr	r3, [r2, #0]
 8006de0:	b933      	cbnz	r3, 8006df0 <_free_r+0x30>
 8006de2:	6063      	str	r3, [r4, #4]
 8006de4:	6014      	str	r4, [r2, #0]
 8006de6:	b003      	add	sp, #12
 8006de8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006dec:	f7ff bd62 	b.w	80068b4 <__malloc_unlock>
 8006df0:	42a3      	cmp	r3, r4
 8006df2:	d908      	bls.n	8006e06 <_free_r+0x46>
 8006df4:	6825      	ldr	r5, [r4, #0]
 8006df6:	1961      	adds	r1, r4, r5
 8006df8:	428b      	cmp	r3, r1
 8006dfa:	bf01      	itttt	eq
 8006dfc:	6819      	ldreq	r1, [r3, #0]
 8006dfe:	685b      	ldreq	r3, [r3, #4]
 8006e00:	1949      	addeq	r1, r1, r5
 8006e02:	6021      	streq	r1, [r4, #0]
 8006e04:	e7ed      	b.n	8006de2 <_free_r+0x22>
 8006e06:	461a      	mov	r2, r3
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	b10b      	cbz	r3, 8006e10 <_free_r+0x50>
 8006e0c:	42a3      	cmp	r3, r4
 8006e0e:	d9fa      	bls.n	8006e06 <_free_r+0x46>
 8006e10:	6811      	ldr	r1, [r2, #0]
 8006e12:	1855      	adds	r5, r2, r1
 8006e14:	42a5      	cmp	r5, r4
 8006e16:	d10b      	bne.n	8006e30 <_free_r+0x70>
 8006e18:	6824      	ldr	r4, [r4, #0]
 8006e1a:	4421      	add	r1, r4
 8006e1c:	1854      	adds	r4, r2, r1
 8006e1e:	42a3      	cmp	r3, r4
 8006e20:	6011      	str	r1, [r2, #0]
 8006e22:	d1e0      	bne.n	8006de6 <_free_r+0x26>
 8006e24:	681c      	ldr	r4, [r3, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	6053      	str	r3, [r2, #4]
 8006e2a:	440c      	add	r4, r1
 8006e2c:	6014      	str	r4, [r2, #0]
 8006e2e:	e7da      	b.n	8006de6 <_free_r+0x26>
 8006e30:	d902      	bls.n	8006e38 <_free_r+0x78>
 8006e32:	230c      	movs	r3, #12
 8006e34:	6003      	str	r3, [r0, #0]
 8006e36:	e7d6      	b.n	8006de6 <_free_r+0x26>
 8006e38:	6825      	ldr	r5, [r4, #0]
 8006e3a:	1961      	adds	r1, r4, r5
 8006e3c:	428b      	cmp	r3, r1
 8006e3e:	bf04      	itt	eq
 8006e40:	6819      	ldreq	r1, [r3, #0]
 8006e42:	685b      	ldreq	r3, [r3, #4]
 8006e44:	6063      	str	r3, [r4, #4]
 8006e46:	bf04      	itt	eq
 8006e48:	1949      	addeq	r1, r1, r5
 8006e4a:	6021      	streq	r1, [r4, #0]
 8006e4c:	6054      	str	r4, [r2, #4]
 8006e4e:	e7ca      	b.n	8006de6 <_free_r+0x26>
 8006e50:	b003      	add	sp, #12
 8006e52:	bd30      	pop	{r4, r5, pc}
 8006e54:	200008fc 	.word	0x200008fc

08006e58 <__sfputc_r>:
 8006e58:	6893      	ldr	r3, [r2, #8]
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	b410      	push	{r4}
 8006e60:	6093      	str	r3, [r2, #8]
 8006e62:	da08      	bge.n	8006e76 <__sfputc_r+0x1e>
 8006e64:	6994      	ldr	r4, [r2, #24]
 8006e66:	42a3      	cmp	r3, r4
 8006e68:	db01      	blt.n	8006e6e <__sfputc_r+0x16>
 8006e6a:	290a      	cmp	r1, #10
 8006e6c:	d103      	bne.n	8006e76 <__sfputc_r+0x1e>
 8006e6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e72:	f7ff be86 	b.w	8006b82 <__swbuf_r>
 8006e76:	6813      	ldr	r3, [r2, #0]
 8006e78:	1c58      	adds	r0, r3, #1
 8006e7a:	6010      	str	r0, [r2, #0]
 8006e7c:	7019      	strb	r1, [r3, #0]
 8006e7e:	4608      	mov	r0, r1
 8006e80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <__sfputs_r>:
 8006e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e88:	4606      	mov	r6, r0
 8006e8a:	460f      	mov	r7, r1
 8006e8c:	4614      	mov	r4, r2
 8006e8e:	18d5      	adds	r5, r2, r3
 8006e90:	42ac      	cmp	r4, r5
 8006e92:	d101      	bne.n	8006e98 <__sfputs_r+0x12>
 8006e94:	2000      	movs	r0, #0
 8006e96:	e007      	b.n	8006ea8 <__sfputs_r+0x22>
 8006e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e9c:	463a      	mov	r2, r7
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	f7ff ffda 	bl	8006e58 <__sfputc_r>
 8006ea4:	1c43      	adds	r3, r0, #1
 8006ea6:	d1f3      	bne.n	8006e90 <__sfputs_r+0xa>
 8006ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006eac <_vfiprintf_r>:
 8006eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb0:	460d      	mov	r5, r1
 8006eb2:	b09d      	sub	sp, #116	; 0x74
 8006eb4:	4614      	mov	r4, r2
 8006eb6:	4698      	mov	r8, r3
 8006eb8:	4606      	mov	r6, r0
 8006eba:	b118      	cbz	r0, 8006ec4 <_vfiprintf_r+0x18>
 8006ebc:	6a03      	ldr	r3, [r0, #32]
 8006ebe:	b90b      	cbnz	r3, 8006ec4 <_vfiprintf_r+0x18>
 8006ec0:	f7ff fd78 	bl	80069b4 <__sinit>
 8006ec4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ec6:	07d9      	lsls	r1, r3, #31
 8006ec8:	d405      	bmi.n	8006ed6 <_vfiprintf_r+0x2a>
 8006eca:	89ab      	ldrh	r3, [r5, #12]
 8006ecc:	059a      	lsls	r2, r3, #22
 8006ece:	d402      	bmi.n	8006ed6 <_vfiprintf_r+0x2a>
 8006ed0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ed2:	f7ff ff73 	bl	8006dbc <__retarget_lock_acquire_recursive>
 8006ed6:	89ab      	ldrh	r3, [r5, #12]
 8006ed8:	071b      	lsls	r3, r3, #28
 8006eda:	d501      	bpl.n	8006ee0 <_vfiprintf_r+0x34>
 8006edc:	692b      	ldr	r3, [r5, #16]
 8006ede:	b99b      	cbnz	r3, 8006f08 <_vfiprintf_r+0x5c>
 8006ee0:	4629      	mov	r1, r5
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	f7ff fe8a 	bl	8006bfc <__swsetup_r>
 8006ee8:	b170      	cbz	r0, 8006f08 <_vfiprintf_r+0x5c>
 8006eea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006eec:	07dc      	lsls	r4, r3, #31
 8006eee:	d504      	bpl.n	8006efa <_vfiprintf_r+0x4e>
 8006ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef4:	b01d      	add	sp, #116	; 0x74
 8006ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006efa:	89ab      	ldrh	r3, [r5, #12]
 8006efc:	0598      	lsls	r0, r3, #22
 8006efe:	d4f7      	bmi.n	8006ef0 <_vfiprintf_r+0x44>
 8006f00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f02:	f7ff ff5c 	bl	8006dbe <__retarget_lock_release_recursive>
 8006f06:	e7f3      	b.n	8006ef0 <_vfiprintf_r+0x44>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8006f0c:	2320      	movs	r3, #32
 8006f0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f12:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f16:	2330      	movs	r3, #48	; 0x30
 8006f18:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80070cc <_vfiprintf_r+0x220>
 8006f1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f20:	f04f 0901 	mov.w	r9, #1
 8006f24:	4623      	mov	r3, r4
 8006f26:	469a      	mov	sl, r3
 8006f28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f2c:	b10a      	cbz	r2, 8006f32 <_vfiprintf_r+0x86>
 8006f2e:	2a25      	cmp	r2, #37	; 0x25
 8006f30:	d1f9      	bne.n	8006f26 <_vfiprintf_r+0x7a>
 8006f32:	ebba 0b04 	subs.w	fp, sl, r4
 8006f36:	d00b      	beq.n	8006f50 <_vfiprintf_r+0xa4>
 8006f38:	465b      	mov	r3, fp
 8006f3a:	4622      	mov	r2, r4
 8006f3c:	4629      	mov	r1, r5
 8006f3e:	4630      	mov	r0, r6
 8006f40:	f7ff ffa1 	bl	8006e86 <__sfputs_r>
 8006f44:	3001      	adds	r0, #1
 8006f46:	f000 80a9 	beq.w	800709c <_vfiprintf_r+0x1f0>
 8006f4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f4c:	445a      	add	r2, fp
 8006f4e:	9209      	str	r2, [sp, #36]	; 0x24
 8006f50:	f89a 3000 	ldrb.w	r3, [sl]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 80a1 	beq.w	800709c <_vfiprintf_r+0x1f0>
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f64:	f10a 0a01 	add.w	sl, sl, #1
 8006f68:	9304      	str	r3, [sp, #16]
 8006f6a:	9307      	str	r3, [sp, #28]
 8006f6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f70:	931a      	str	r3, [sp, #104]	; 0x68
 8006f72:	4654      	mov	r4, sl
 8006f74:	2205      	movs	r2, #5
 8006f76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f7a:	4854      	ldr	r0, [pc, #336]	; (80070cc <_vfiprintf_r+0x220>)
 8006f7c:	f7f9 f950 	bl	8000220 <memchr>
 8006f80:	9a04      	ldr	r2, [sp, #16]
 8006f82:	b9d8      	cbnz	r0, 8006fbc <_vfiprintf_r+0x110>
 8006f84:	06d1      	lsls	r1, r2, #27
 8006f86:	bf44      	itt	mi
 8006f88:	2320      	movmi	r3, #32
 8006f8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f8e:	0713      	lsls	r3, r2, #28
 8006f90:	bf44      	itt	mi
 8006f92:	232b      	movmi	r3, #43	; 0x2b
 8006f94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f98:	f89a 3000 	ldrb.w	r3, [sl]
 8006f9c:	2b2a      	cmp	r3, #42	; 0x2a
 8006f9e:	d015      	beq.n	8006fcc <_vfiprintf_r+0x120>
 8006fa0:	9a07      	ldr	r2, [sp, #28]
 8006fa2:	4654      	mov	r4, sl
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	f04f 0c0a 	mov.w	ip, #10
 8006faa:	4621      	mov	r1, r4
 8006fac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fb0:	3b30      	subs	r3, #48	; 0x30
 8006fb2:	2b09      	cmp	r3, #9
 8006fb4:	d94d      	bls.n	8007052 <_vfiprintf_r+0x1a6>
 8006fb6:	b1b0      	cbz	r0, 8006fe6 <_vfiprintf_r+0x13a>
 8006fb8:	9207      	str	r2, [sp, #28]
 8006fba:	e014      	b.n	8006fe6 <_vfiprintf_r+0x13a>
 8006fbc:	eba0 0308 	sub.w	r3, r0, r8
 8006fc0:	fa09 f303 	lsl.w	r3, r9, r3
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	9304      	str	r3, [sp, #16]
 8006fc8:	46a2      	mov	sl, r4
 8006fca:	e7d2      	b.n	8006f72 <_vfiprintf_r+0xc6>
 8006fcc:	9b03      	ldr	r3, [sp, #12]
 8006fce:	1d19      	adds	r1, r3, #4
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	9103      	str	r1, [sp, #12]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	bfbb      	ittet	lt
 8006fd8:	425b      	neglt	r3, r3
 8006fda:	f042 0202 	orrlt.w	r2, r2, #2
 8006fde:	9307      	strge	r3, [sp, #28]
 8006fe0:	9307      	strlt	r3, [sp, #28]
 8006fe2:	bfb8      	it	lt
 8006fe4:	9204      	strlt	r2, [sp, #16]
 8006fe6:	7823      	ldrb	r3, [r4, #0]
 8006fe8:	2b2e      	cmp	r3, #46	; 0x2e
 8006fea:	d10c      	bne.n	8007006 <_vfiprintf_r+0x15a>
 8006fec:	7863      	ldrb	r3, [r4, #1]
 8006fee:	2b2a      	cmp	r3, #42	; 0x2a
 8006ff0:	d134      	bne.n	800705c <_vfiprintf_r+0x1b0>
 8006ff2:	9b03      	ldr	r3, [sp, #12]
 8006ff4:	1d1a      	adds	r2, r3, #4
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	9203      	str	r2, [sp, #12]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	bfb8      	it	lt
 8006ffe:	f04f 33ff 	movlt.w	r3, #4294967295
 8007002:	3402      	adds	r4, #2
 8007004:	9305      	str	r3, [sp, #20]
 8007006:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80070dc <_vfiprintf_r+0x230>
 800700a:	7821      	ldrb	r1, [r4, #0]
 800700c:	2203      	movs	r2, #3
 800700e:	4650      	mov	r0, sl
 8007010:	f7f9 f906 	bl	8000220 <memchr>
 8007014:	b138      	cbz	r0, 8007026 <_vfiprintf_r+0x17a>
 8007016:	9b04      	ldr	r3, [sp, #16]
 8007018:	eba0 000a 	sub.w	r0, r0, sl
 800701c:	2240      	movs	r2, #64	; 0x40
 800701e:	4082      	lsls	r2, r0
 8007020:	4313      	orrs	r3, r2
 8007022:	3401      	adds	r4, #1
 8007024:	9304      	str	r3, [sp, #16]
 8007026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800702a:	4829      	ldr	r0, [pc, #164]	; (80070d0 <_vfiprintf_r+0x224>)
 800702c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007030:	2206      	movs	r2, #6
 8007032:	f7f9 f8f5 	bl	8000220 <memchr>
 8007036:	2800      	cmp	r0, #0
 8007038:	d03f      	beq.n	80070ba <_vfiprintf_r+0x20e>
 800703a:	4b26      	ldr	r3, [pc, #152]	; (80070d4 <_vfiprintf_r+0x228>)
 800703c:	bb1b      	cbnz	r3, 8007086 <_vfiprintf_r+0x1da>
 800703e:	9b03      	ldr	r3, [sp, #12]
 8007040:	3307      	adds	r3, #7
 8007042:	f023 0307 	bic.w	r3, r3, #7
 8007046:	3308      	adds	r3, #8
 8007048:	9303      	str	r3, [sp, #12]
 800704a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800704c:	443b      	add	r3, r7
 800704e:	9309      	str	r3, [sp, #36]	; 0x24
 8007050:	e768      	b.n	8006f24 <_vfiprintf_r+0x78>
 8007052:	fb0c 3202 	mla	r2, ip, r2, r3
 8007056:	460c      	mov	r4, r1
 8007058:	2001      	movs	r0, #1
 800705a:	e7a6      	b.n	8006faa <_vfiprintf_r+0xfe>
 800705c:	2300      	movs	r3, #0
 800705e:	3401      	adds	r4, #1
 8007060:	9305      	str	r3, [sp, #20]
 8007062:	4619      	mov	r1, r3
 8007064:	f04f 0c0a 	mov.w	ip, #10
 8007068:	4620      	mov	r0, r4
 800706a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800706e:	3a30      	subs	r2, #48	; 0x30
 8007070:	2a09      	cmp	r2, #9
 8007072:	d903      	bls.n	800707c <_vfiprintf_r+0x1d0>
 8007074:	2b00      	cmp	r3, #0
 8007076:	d0c6      	beq.n	8007006 <_vfiprintf_r+0x15a>
 8007078:	9105      	str	r1, [sp, #20]
 800707a:	e7c4      	b.n	8007006 <_vfiprintf_r+0x15a>
 800707c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007080:	4604      	mov	r4, r0
 8007082:	2301      	movs	r3, #1
 8007084:	e7f0      	b.n	8007068 <_vfiprintf_r+0x1bc>
 8007086:	ab03      	add	r3, sp, #12
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	462a      	mov	r2, r5
 800708c:	4b12      	ldr	r3, [pc, #72]	; (80070d8 <_vfiprintf_r+0x22c>)
 800708e:	a904      	add	r1, sp, #16
 8007090:	4630      	mov	r0, r6
 8007092:	f3af 8000 	nop.w
 8007096:	4607      	mov	r7, r0
 8007098:	1c78      	adds	r0, r7, #1
 800709a:	d1d6      	bne.n	800704a <_vfiprintf_r+0x19e>
 800709c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800709e:	07d9      	lsls	r1, r3, #31
 80070a0:	d405      	bmi.n	80070ae <_vfiprintf_r+0x202>
 80070a2:	89ab      	ldrh	r3, [r5, #12]
 80070a4:	059a      	lsls	r2, r3, #22
 80070a6:	d402      	bmi.n	80070ae <_vfiprintf_r+0x202>
 80070a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070aa:	f7ff fe88 	bl	8006dbe <__retarget_lock_release_recursive>
 80070ae:	89ab      	ldrh	r3, [r5, #12]
 80070b0:	065b      	lsls	r3, r3, #25
 80070b2:	f53f af1d 	bmi.w	8006ef0 <_vfiprintf_r+0x44>
 80070b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070b8:	e71c      	b.n	8006ef4 <_vfiprintf_r+0x48>
 80070ba:	ab03      	add	r3, sp, #12
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	462a      	mov	r2, r5
 80070c0:	4b05      	ldr	r3, [pc, #20]	; (80070d8 <_vfiprintf_r+0x22c>)
 80070c2:	a904      	add	r1, sp, #16
 80070c4:	4630      	mov	r0, r6
 80070c6:	f000 f879 	bl	80071bc <_printf_i>
 80070ca:	e7e4      	b.n	8007096 <_vfiprintf_r+0x1ea>
 80070cc:	08007910 	.word	0x08007910
 80070d0:	0800791a 	.word	0x0800791a
 80070d4:	00000000 	.word	0x00000000
 80070d8:	08006e87 	.word	0x08006e87
 80070dc:	08007916 	.word	0x08007916

080070e0 <_printf_common>:
 80070e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070e4:	4616      	mov	r6, r2
 80070e6:	4699      	mov	r9, r3
 80070e8:	688a      	ldr	r2, [r1, #8]
 80070ea:	690b      	ldr	r3, [r1, #16]
 80070ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070f0:	4293      	cmp	r3, r2
 80070f2:	bfb8      	it	lt
 80070f4:	4613      	movlt	r3, r2
 80070f6:	6033      	str	r3, [r6, #0]
 80070f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070fc:	4607      	mov	r7, r0
 80070fe:	460c      	mov	r4, r1
 8007100:	b10a      	cbz	r2, 8007106 <_printf_common+0x26>
 8007102:	3301      	adds	r3, #1
 8007104:	6033      	str	r3, [r6, #0]
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	0699      	lsls	r1, r3, #26
 800710a:	bf42      	ittt	mi
 800710c:	6833      	ldrmi	r3, [r6, #0]
 800710e:	3302      	addmi	r3, #2
 8007110:	6033      	strmi	r3, [r6, #0]
 8007112:	6825      	ldr	r5, [r4, #0]
 8007114:	f015 0506 	ands.w	r5, r5, #6
 8007118:	d106      	bne.n	8007128 <_printf_common+0x48>
 800711a:	f104 0a19 	add.w	sl, r4, #25
 800711e:	68e3      	ldr	r3, [r4, #12]
 8007120:	6832      	ldr	r2, [r6, #0]
 8007122:	1a9b      	subs	r3, r3, r2
 8007124:	42ab      	cmp	r3, r5
 8007126:	dc26      	bgt.n	8007176 <_printf_common+0x96>
 8007128:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800712c:	1e13      	subs	r3, r2, #0
 800712e:	6822      	ldr	r2, [r4, #0]
 8007130:	bf18      	it	ne
 8007132:	2301      	movne	r3, #1
 8007134:	0692      	lsls	r2, r2, #26
 8007136:	d42b      	bmi.n	8007190 <_printf_common+0xb0>
 8007138:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800713c:	4649      	mov	r1, r9
 800713e:	4638      	mov	r0, r7
 8007140:	47c0      	blx	r8
 8007142:	3001      	adds	r0, #1
 8007144:	d01e      	beq.n	8007184 <_printf_common+0xa4>
 8007146:	6823      	ldr	r3, [r4, #0]
 8007148:	6922      	ldr	r2, [r4, #16]
 800714a:	f003 0306 	and.w	r3, r3, #6
 800714e:	2b04      	cmp	r3, #4
 8007150:	bf02      	ittt	eq
 8007152:	68e5      	ldreq	r5, [r4, #12]
 8007154:	6833      	ldreq	r3, [r6, #0]
 8007156:	1aed      	subeq	r5, r5, r3
 8007158:	68a3      	ldr	r3, [r4, #8]
 800715a:	bf0c      	ite	eq
 800715c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007160:	2500      	movne	r5, #0
 8007162:	4293      	cmp	r3, r2
 8007164:	bfc4      	itt	gt
 8007166:	1a9b      	subgt	r3, r3, r2
 8007168:	18ed      	addgt	r5, r5, r3
 800716a:	2600      	movs	r6, #0
 800716c:	341a      	adds	r4, #26
 800716e:	42b5      	cmp	r5, r6
 8007170:	d11a      	bne.n	80071a8 <_printf_common+0xc8>
 8007172:	2000      	movs	r0, #0
 8007174:	e008      	b.n	8007188 <_printf_common+0xa8>
 8007176:	2301      	movs	r3, #1
 8007178:	4652      	mov	r2, sl
 800717a:	4649      	mov	r1, r9
 800717c:	4638      	mov	r0, r7
 800717e:	47c0      	blx	r8
 8007180:	3001      	adds	r0, #1
 8007182:	d103      	bne.n	800718c <_printf_common+0xac>
 8007184:	f04f 30ff 	mov.w	r0, #4294967295
 8007188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800718c:	3501      	adds	r5, #1
 800718e:	e7c6      	b.n	800711e <_printf_common+0x3e>
 8007190:	18e1      	adds	r1, r4, r3
 8007192:	1c5a      	adds	r2, r3, #1
 8007194:	2030      	movs	r0, #48	; 0x30
 8007196:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800719a:	4422      	add	r2, r4
 800719c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071a4:	3302      	adds	r3, #2
 80071a6:	e7c7      	b.n	8007138 <_printf_common+0x58>
 80071a8:	2301      	movs	r3, #1
 80071aa:	4622      	mov	r2, r4
 80071ac:	4649      	mov	r1, r9
 80071ae:	4638      	mov	r0, r7
 80071b0:	47c0      	blx	r8
 80071b2:	3001      	adds	r0, #1
 80071b4:	d0e6      	beq.n	8007184 <_printf_common+0xa4>
 80071b6:	3601      	adds	r6, #1
 80071b8:	e7d9      	b.n	800716e <_printf_common+0x8e>
	...

080071bc <_printf_i>:
 80071bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071c0:	7e0f      	ldrb	r7, [r1, #24]
 80071c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071c4:	2f78      	cmp	r7, #120	; 0x78
 80071c6:	4691      	mov	r9, r2
 80071c8:	4680      	mov	r8, r0
 80071ca:	460c      	mov	r4, r1
 80071cc:	469a      	mov	sl, r3
 80071ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071d2:	d807      	bhi.n	80071e4 <_printf_i+0x28>
 80071d4:	2f62      	cmp	r7, #98	; 0x62
 80071d6:	d80a      	bhi.n	80071ee <_printf_i+0x32>
 80071d8:	2f00      	cmp	r7, #0
 80071da:	f000 80d4 	beq.w	8007386 <_printf_i+0x1ca>
 80071de:	2f58      	cmp	r7, #88	; 0x58
 80071e0:	f000 80c0 	beq.w	8007364 <_printf_i+0x1a8>
 80071e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071ec:	e03a      	b.n	8007264 <_printf_i+0xa8>
 80071ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071f2:	2b15      	cmp	r3, #21
 80071f4:	d8f6      	bhi.n	80071e4 <_printf_i+0x28>
 80071f6:	a101      	add	r1, pc, #4	; (adr r1, 80071fc <_printf_i+0x40>)
 80071f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071fc:	08007255 	.word	0x08007255
 8007200:	08007269 	.word	0x08007269
 8007204:	080071e5 	.word	0x080071e5
 8007208:	080071e5 	.word	0x080071e5
 800720c:	080071e5 	.word	0x080071e5
 8007210:	080071e5 	.word	0x080071e5
 8007214:	08007269 	.word	0x08007269
 8007218:	080071e5 	.word	0x080071e5
 800721c:	080071e5 	.word	0x080071e5
 8007220:	080071e5 	.word	0x080071e5
 8007224:	080071e5 	.word	0x080071e5
 8007228:	0800736d 	.word	0x0800736d
 800722c:	08007295 	.word	0x08007295
 8007230:	08007327 	.word	0x08007327
 8007234:	080071e5 	.word	0x080071e5
 8007238:	080071e5 	.word	0x080071e5
 800723c:	0800738f 	.word	0x0800738f
 8007240:	080071e5 	.word	0x080071e5
 8007244:	08007295 	.word	0x08007295
 8007248:	080071e5 	.word	0x080071e5
 800724c:	080071e5 	.word	0x080071e5
 8007250:	0800732f 	.word	0x0800732f
 8007254:	682b      	ldr	r3, [r5, #0]
 8007256:	1d1a      	adds	r2, r3, #4
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	602a      	str	r2, [r5, #0]
 800725c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007264:	2301      	movs	r3, #1
 8007266:	e09f      	b.n	80073a8 <_printf_i+0x1ec>
 8007268:	6820      	ldr	r0, [r4, #0]
 800726a:	682b      	ldr	r3, [r5, #0]
 800726c:	0607      	lsls	r7, r0, #24
 800726e:	f103 0104 	add.w	r1, r3, #4
 8007272:	6029      	str	r1, [r5, #0]
 8007274:	d501      	bpl.n	800727a <_printf_i+0xbe>
 8007276:	681e      	ldr	r6, [r3, #0]
 8007278:	e003      	b.n	8007282 <_printf_i+0xc6>
 800727a:	0646      	lsls	r6, r0, #25
 800727c:	d5fb      	bpl.n	8007276 <_printf_i+0xba>
 800727e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007282:	2e00      	cmp	r6, #0
 8007284:	da03      	bge.n	800728e <_printf_i+0xd2>
 8007286:	232d      	movs	r3, #45	; 0x2d
 8007288:	4276      	negs	r6, r6
 800728a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800728e:	485a      	ldr	r0, [pc, #360]	; (80073f8 <_printf_i+0x23c>)
 8007290:	230a      	movs	r3, #10
 8007292:	e012      	b.n	80072ba <_printf_i+0xfe>
 8007294:	682b      	ldr	r3, [r5, #0]
 8007296:	6820      	ldr	r0, [r4, #0]
 8007298:	1d19      	adds	r1, r3, #4
 800729a:	6029      	str	r1, [r5, #0]
 800729c:	0605      	lsls	r5, r0, #24
 800729e:	d501      	bpl.n	80072a4 <_printf_i+0xe8>
 80072a0:	681e      	ldr	r6, [r3, #0]
 80072a2:	e002      	b.n	80072aa <_printf_i+0xee>
 80072a4:	0641      	lsls	r1, r0, #25
 80072a6:	d5fb      	bpl.n	80072a0 <_printf_i+0xe4>
 80072a8:	881e      	ldrh	r6, [r3, #0]
 80072aa:	4853      	ldr	r0, [pc, #332]	; (80073f8 <_printf_i+0x23c>)
 80072ac:	2f6f      	cmp	r7, #111	; 0x6f
 80072ae:	bf0c      	ite	eq
 80072b0:	2308      	moveq	r3, #8
 80072b2:	230a      	movne	r3, #10
 80072b4:	2100      	movs	r1, #0
 80072b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072ba:	6865      	ldr	r5, [r4, #4]
 80072bc:	60a5      	str	r5, [r4, #8]
 80072be:	2d00      	cmp	r5, #0
 80072c0:	bfa2      	ittt	ge
 80072c2:	6821      	ldrge	r1, [r4, #0]
 80072c4:	f021 0104 	bicge.w	r1, r1, #4
 80072c8:	6021      	strge	r1, [r4, #0]
 80072ca:	b90e      	cbnz	r6, 80072d0 <_printf_i+0x114>
 80072cc:	2d00      	cmp	r5, #0
 80072ce:	d04b      	beq.n	8007368 <_printf_i+0x1ac>
 80072d0:	4615      	mov	r5, r2
 80072d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80072d6:	fb03 6711 	mls	r7, r3, r1, r6
 80072da:	5dc7      	ldrb	r7, [r0, r7]
 80072dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072e0:	4637      	mov	r7, r6
 80072e2:	42bb      	cmp	r3, r7
 80072e4:	460e      	mov	r6, r1
 80072e6:	d9f4      	bls.n	80072d2 <_printf_i+0x116>
 80072e8:	2b08      	cmp	r3, #8
 80072ea:	d10b      	bne.n	8007304 <_printf_i+0x148>
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	07de      	lsls	r6, r3, #31
 80072f0:	d508      	bpl.n	8007304 <_printf_i+0x148>
 80072f2:	6923      	ldr	r3, [r4, #16]
 80072f4:	6861      	ldr	r1, [r4, #4]
 80072f6:	4299      	cmp	r1, r3
 80072f8:	bfde      	ittt	le
 80072fa:	2330      	movle	r3, #48	; 0x30
 80072fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007300:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007304:	1b52      	subs	r2, r2, r5
 8007306:	6122      	str	r2, [r4, #16]
 8007308:	f8cd a000 	str.w	sl, [sp]
 800730c:	464b      	mov	r3, r9
 800730e:	aa03      	add	r2, sp, #12
 8007310:	4621      	mov	r1, r4
 8007312:	4640      	mov	r0, r8
 8007314:	f7ff fee4 	bl	80070e0 <_printf_common>
 8007318:	3001      	adds	r0, #1
 800731a:	d14a      	bne.n	80073b2 <_printf_i+0x1f6>
 800731c:	f04f 30ff 	mov.w	r0, #4294967295
 8007320:	b004      	add	sp, #16
 8007322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007326:	6823      	ldr	r3, [r4, #0]
 8007328:	f043 0320 	orr.w	r3, r3, #32
 800732c:	6023      	str	r3, [r4, #0]
 800732e:	4833      	ldr	r0, [pc, #204]	; (80073fc <_printf_i+0x240>)
 8007330:	2778      	movs	r7, #120	; 0x78
 8007332:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007336:	6823      	ldr	r3, [r4, #0]
 8007338:	6829      	ldr	r1, [r5, #0]
 800733a:	061f      	lsls	r7, r3, #24
 800733c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007340:	d402      	bmi.n	8007348 <_printf_i+0x18c>
 8007342:	065f      	lsls	r7, r3, #25
 8007344:	bf48      	it	mi
 8007346:	b2b6      	uxthmi	r6, r6
 8007348:	07df      	lsls	r7, r3, #31
 800734a:	bf48      	it	mi
 800734c:	f043 0320 	orrmi.w	r3, r3, #32
 8007350:	6029      	str	r1, [r5, #0]
 8007352:	bf48      	it	mi
 8007354:	6023      	strmi	r3, [r4, #0]
 8007356:	b91e      	cbnz	r6, 8007360 <_printf_i+0x1a4>
 8007358:	6823      	ldr	r3, [r4, #0]
 800735a:	f023 0320 	bic.w	r3, r3, #32
 800735e:	6023      	str	r3, [r4, #0]
 8007360:	2310      	movs	r3, #16
 8007362:	e7a7      	b.n	80072b4 <_printf_i+0xf8>
 8007364:	4824      	ldr	r0, [pc, #144]	; (80073f8 <_printf_i+0x23c>)
 8007366:	e7e4      	b.n	8007332 <_printf_i+0x176>
 8007368:	4615      	mov	r5, r2
 800736a:	e7bd      	b.n	80072e8 <_printf_i+0x12c>
 800736c:	682b      	ldr	r3, [r5, #0]
 800736e:	6826      	ldr	r6, [r4, #0]
 8007370:	6961      	ldr	r1, [r4, #20]
 8007372:	1d18      	adds	r0, r3, #4
 8007374:	6028      	str	r0, [r5, #0]
 8007376:	0635      	lsls	r5, r6, #24
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	d501      	bpl.n	8007380 <_printf_i+0x1c4>
 800737c:	6019      	str	r1, [r3, #0]
 800737e:	e002      	b.n	8007386 <_printf_i+0x1ca>
 8007380:	0670      	lsls	r0, r6, #25
 8007382:	d5fb      	bpl.n	800737c <_printf_i+0x1c0>
 8007384:	8019      	strh	r1, [r3, #0]
 8007386:	2300      	movs	r3, #0
 8007388:	6123      	str	r3, [r4, #16]
 800738a:	4615      	mov	r5, r2
 800738c:	e7bc      	b.n	8007308 <_printf_i+0x14c>
 800738e:	682b      	ldr	r3, [r5, #0]
 8007390:	1d1a      	adds	r2, r3, #4
 8007392:	602a      	str	r2, [r5, #0]
 8007394:	681d      	ldr	r5, [r3, #0]
 8007396:	6862      	ldr	r2, [r4, #4]
 8007398:	2100      	movs	r1, #0
 800739a:	4628      	mov	r0, r5
 800739c:	f7f8 ff40 	bl	8000220 <memchr>
 80073a0:	b108      	cbz	r0, 80073a6 <_printf_i+0x1ea>
 80073a2:	1b40      	subs	r0, r0, r5
 80073a4:	6060      	str	r0, [r4, #4]
 80073a6:	6863      	ldr	r3, [r4, #4]
 80073a8:	6123      	str	r3, [r4, #16]
 80073aa:	2300      	movs	r3, #0
 80073ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073b0:	e7aa      	b.n	8007308 <_printf_i+0x14c>
 80073b2:	6923      	ldr	r3, [r4, #16]
 80073b4:	462a      	mov	r2, r5
 80073b6:	4649      	mov	r1, r9
 80073b8:	4640      	mov	r0, r8
 80073ba:	47d0      	blx	sl
 80073bc:	3001      	adds	r0, #1
 80073be:	d0ad      	beq.n	800731c <_printf_i+0x160>
 80073c0:	6823      	ldr	r3, [r4, #0]
 80073c2:	079b      	lsls	r3, r3, #30
 80073c4:	d413      	bmi.n	80073ee <_printf_i+0x232>
 80073c6:	68e0      	ldr	r0, [r4, #12]
 80073c8:	9b03      	ldr	r3, [sp, #12]
 80073ca:	4298      	cmp	r0, r3
 80073cc:	bfb8      	it	lt
 80073ce:	4618      	movlt	r0, r3
 80073d0:	e7a6      	b.n	8007320 <_printf_i+0x164>
 80073d2:	2301      	movs	r3, #1
 80073d4:	4632      	mov	r2, r6
 80073d6:	4649      	mov	r1, r9
 80073d8:	4640      	mov	r0, r8
 80073da:	47d0      	blx	sl
 80073dc:	3001      	adds	r0, #1
 80073de:	d09d      	beq.n	800731c <_printf_i+0x160>
 80073e0:	3501      	adds	r5, #1
 80073e2:	68e3      	ldr	r3, [r4, #12]
 80073e4:	9903      	ldr	r1, [sp, #12]
 80073e6:	1a5b      	subs	r3, r3, r1
 80073e8:	42ab      	cmp	r3, r5
 80073ea:	dcf2      	bgt.n	80073d2 <_printf_i+0x216>
 80073ec:	e7eb      	b.n	80073c6 <_printf_i+0x20a>
 80073ee:	2500      	movs	r5, #0
 80073f0:	f104 0619 	add.w	r6, r4, #25
 80073f4:	e7f5      	b.n	80073e2 <_printf_i+0x226>
 80073f6:	bf00      	nop
 80073f8:	08007921 	.word	0x08007921
 80073fc:	08007932 	.word	0x08007932

08007400 <__sflush_r>:
 8007400:	898a      	ldrh	r2, [r1, #12]
 8007402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007406:	4605      	mov	r5, r0
 8007408:	0710      	lsls	r0, r2, #28
 800740a:	460c      	mov	r4, r1
 800740c:	d458      	bmi.n	80074c0 <__sflush_r+0xc0>
 800740e:	684b      	ldr	r3, [r1, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	dc05      	bgt.n	8007420 <__sflush_r+0x20>
 8007414:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007416:	2b00      	cmp	r3, #0
 8007418:	dc02      	bgt.n	8007420 <__sflush_r+0x20>
 800741a:	2000      	movs	r0, #0
 800741c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007420:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007422:	2e00      	cmp	r6, #0
 8007424:	d0f9      	beq.n	800741a <__sflush_r+0x1a>
 8007426:	2300      	movs	r3, #0
 8007428:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800742c:	682f      	ldr	r7, [r5, #0]
 800742e:	6a21      	ldr	r1, [r4, #32]
 8007430:	602b      	str	r3, [r5, #0]
 8007432:	d032      	beq.n	800749a <__sflush_r+0x9a>
 8007434:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007436:	89a3      	ldrh	r3, [r4, #12]
 8007438:	075a      	lsls	r2, r3, #29
 800743a:	d505      	bpl.n	8007448 <__sflush_r+0x48>
 800743c:	6863      	ldr	r3, [r4, #4]
 800743e:	1ac0      	subs	r0, r0, r3
 8007440:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007442:	b10b      	cbz	r3, 8007448 <__sflush_r+0x48>
 8007444:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007446:	1ac0      	subs	r0, r0, r3
 8007448:	2300      	movs	r3, #0
 800744a:	4602      	mov	r2, r0
 800744c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800744e:	6a21      	ldr	r1, [r4, #32]
 8007450:	4628      	mov	r0, r5
 8007452:	47b0      	blx	r6
 8007454:	1c43      	adds	r3, r0, #1
 8007456:	89a3      	ldrh	r3, [r4, #12]
 8007458:	d106      	bne.n	8007468 <__sflush_r+0x68>
 800745a:	6829      	ldr	r1, [r5, #0]
 800745c:	291d      	cmp	r1, #29
 800745e:	d82b      	bhi.n	80074b8 <__sflush_r+0xb8>
 8007460:	4a29      	ldr	r2, [pc, #164]	; (8007508 <__sflush_r+0x108>)
 8007462:	410a      	asrs	r2, r1
 8007464:	07d6      	lsls	r6, r2, #31
 8007466:	d427      	bmi.n	80074b8 <__sflush_r+0xb8>
 8007468:	2200      	movs	r2, #0
 800746a:	6062      	str	r2, [r4, #4]
 800746c:	04d9      	lsls	r1, r3, #19
 800746e:	6922      	ldr	r2, [r4, #16]
 8007470:	6022      	str	r2, [r4, #0]
 8007472:	d504      	bpl.n	800747e <__sflush_r+0x7e>
 8007474:	1c42      	adds	r2, r0, #1
 8007476:	d101      	bne.n	800747c <__sflush_r+0x7c>
 8007478:	682b      	ldr	r3, [r5, #0]
 800747a:	b903      	cbnz	r3, 800747e <__sflush_r+0x7e>
 800747c:	6560      	str	r0, [r4, #84]	; 0x54
 800747e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007480:	602f      	str	r7, [r5, #0]
 8007482:	2900      	cmp	r1, #0
 8007484:	d0c9      	beq.n	800741a <__sflush_r+0x1a>
 8007486:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800748a:	4299      	cmp	r1, r3
 800748c:	d002      	beq.n	8007494 <__sflush_r+0x94>
 800748e:	4628      	mov	r0, r5
 8007490:	f7ff fc96 	bl	8006dc0 <_free_r>
 8007494:	2000      	movs	r0, #0
 8007496:	6360      	str	r0, [r4, #52]	; 0x34
 8007498:	e7c0      	b.n	800741c <__sflush_r+0x1c>
 800749a:	2301      	movs	r3, #1
 800749c:	4628      	mov	r0, r5
 800749e:	47b0      	blx	r6
 80074a0:	1c41      	adds	r1, r0, #1
 80074a2:	d1c8      	bne.n	8007436 <__sflush_r+0x36>
 80074a4:	682b      	ldr	r3, [r5, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d0c5      	beq.n	8007436 <__sflush_r+0x36>
 80074aa:	2b1d      	cmp	r3, #29
 80074ac:	d001      	beq.n	80074b2 <__sflush_r+0xb2>
 80074ae:	2b16      	cmp	r3, #22
 80074b0:	d101      	bne.n	80074b6 <__sflush_r+0xb6>
 80074b2:	602f      	str	r7, [r5, #0]
 80074b4:	e7b1      	b.n	800741a <__sflush_r+0x1a>
 80074b6:	89a3      	ldrh	r3, [r4, #12]
 80074b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074bc:	81a3      	strh	r3, [r4, #12]
 80074be:	e7ad      	b.n	800741c <__sflush_r+0x1c>
 80074c0:	690f      	ldr	r7, [r1, #16]
 80074c2:	2f00      	cmp	r7, #0
 80074c4:	d0a9      	beq.n	800741a <__sflush_r+0x1a>
 80074c6:	0793      	lsls	r3, r2, #30
 80074c8:	680e      	ldr	r6, [r1, #0]
 80074ca:	bf08      	it	eq
 80074cc:	694b      	ldreq	r3, [r1, #20]
 80074ce:	600f      	str	r7, [r1, #0]
 80074d0:	bf18      	it	ne
 80074d2:	2300      	movne	r3, #0
 80074d4:	eba6 0807 	sub.w	r8, r6, r7
 80074d8:	608b      	str	r3, [r1, #8]
 80074da:	f1b8 0f00 	cmp.w	r8, #0
 80074de:	dd9c      	ble.n	800741a <__sflush_r+0x1a>
 80074e0:	6a21      	ldr	r1, [r4, #32]
 80074e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80074e4:	4643      	mov	r3, r8
 80074e6:	463a      	mov	r2, r7
 80074e8:	4628      	mov	r0, r5
 80074ea:	47b0      	blx	r6
 80074ec:	2800      	cmp	r0, #0
 80074ee:	dc06      	bgt.n	80074fe <__sflush_r+0xfe>
 80074f0:	89a3      	ldrh	r3, [r4, #12]
 80074f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074f6:	81a3      	strh	r3, [r4, #12]
 80074f8:	f04f 30ff 	mov.w	r0, #4294967295
 80074fc:	e78e      	b.n	800741c <__sflush_r+0x1c>
 80074fe:	4407      	add	r7, r0
 8007500:	eba8 0800 	sub.w	r8, r8, r0
 8007504:	e7e9      	b.n	80074da <__sflush_r+0xda>
 8007506:	bf00      	nop
 8007508:	dfbffffe 	.word	0xdfbffffe

0800750c <_fflush_r>:
 800750c:	b538      	push	{r3, r4, r5, lr}
 800750e:	690b      	ldr	r3, [r1, #16]
 8007510:	4605      	mov	r5, r0
 8007512:	460c      	mov	r4, r1
 8007514:	b913      	cbnz	r3, 800751c <_fflush_r+0x10>
 8007516:	2500      	movs	r5, #0
 8007518:	4628      	mov	r0, r5
 800751a:	bd38      	pop	{r3, r4, r5, pc}
 800751c:	b118      	cbz	r0, 8007526 <_fflush_r+0x1a>
 800751e:	6a03      	ldr	r3, [r0, #32]
 8007520:	b90b      	cbnz	r3, 8007526 <_fflush_r+0x1a>
 8007522:	f7ff fa47 	bl	80069b4 <__sinit>
 8007526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d0f3      	beq.n	8007516 <_fflush_r+0xa>
 800752e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007530:	07d0      	lsls	r0, r2, #31
 8007532:	d404      	bmi.n	800753e <_fflush_r+0x32>
 8007534:	0599      	lsls	r1, r3, #22
 8007536:	d402      	bmi.n	800753e <_fflush_r+0x32>
 8007538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800753a:	f7ff fc3f 	bl	8006dbc <__retarget_lock_acquire_recursive>
 800753e:	4628      	mov	r0, r5
 8007540:	4621      	mov	r1, r4
 8007542:	f7ff ff5d 	bl	8007400 <__sflush_r>
 8007546:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007548:	07da      	lsls	r2, r3, #31
 800754a:	4605      	mov	r5, r0
 800754c:	d4e4      	bmi.n	8007518 <_fflush_r+0xc>
 800754e:	89a3      	ldrh	r3, [r4, #12]
 8007550:	059b      	lsls	r3, r3, #22
 8007552:	d4e1      	bmi.n	8007518 <_fflush_r+0xc>
 8007554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007556:	f7ff fc32 	bl	8006dbe <__retarget_lock_release_recursive>
 800755a:	e7dd      	b.n	8007518 <_fflush_r+0xc>

0800755c <__swhatbuf_r>:
 800755c:	b570      	push	{r4, r5, r6, lr}
 800755e:	460c      	mov	r4, r1
 8007560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007564:	2900      	cmp	r1, #0
 8007566:	b096      	sub	sp, #88	; 0x58
 8007568:	4615      	mov	r5, r2
 800756a:	461e      	mov	r6, r3
 800756c:	da0d      	bge.n	800758a <__swhatbuf_r+0x2e>
 800756e:	89a3      	ldrh	r3, [r4, #12]
 8007570:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007574:	f04f 0100 	mov.w	r1, #0
 8007578:	bf0c      	ite	eq
 800757a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800757e:	2340      	movne	r3, #64	; 0x40
 8007580:	2000      	movs	r0, #0
 8007582:	6031      	str	r1, [r6, #0]
 8007584:	602b      	str	r3, [r5, #0]
 8007586:	b016      	add	sp, #88	; 0x58
 8007588:	bd70      	pop	{r4, r5, r6, pc}
 800758a:	466a      	mov	r2, sp
 800758c:	f000 f848 	bl	8007620 <_fstat_r>
 8007590:	2800      	cmp	r0, #0
 8007592:	dbec      	blt.n	800756e <__swhatbuf_r+0x12>
 8007594:	9901      	ldr	r1, [sp, #4]
 8007596:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800759a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800759e:	4259      	negs	r1, r3
 80075a0:	4159      	adcs	r1, r3
 80075a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075a6:	e7eb      	b.n	8007580 <__swhatbuf_r+0x24>

080075a8 <__smakebuf_r>:
 80075a8:	898b      	ldrh	r3, [r1, #12]
 80075aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075ac:	079d      	lsls	r5, r3, #30
 80075ae:	4606      	mov	r6, r0
 80075b0:	460c      	mov	r4, r1
 80075b2:	d507      	bpl.n	80075c4 <__smakebuf_r+0x1c>
 80075b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075b8:	6023      	str	r3, [r4, #0]
 80075ba:	6123      	str	r3, [r4, #16]
 80075bc:	2301      	movs	r3, #1
 80075be:	6163      	str	r3, [r4, #20]
 80075c0:	b002      	add	sp, #8
 80075c2:	bd70      	pop	{r4, r5, r6, pc}
 80075c4:	ab01      	add	r3, sp, #4
 80075c6:	466a      	mov	r2, sp
 80075c8:	f7ff ffc8 	bl	800755c <__swhatbuf_r>
 80075cc:	9900      	ldr	r1, [sp, #0]
 80075ce:	4605      	mov	r5, r0
 80075d0:	4630      	mov	r0, r6
 80075d2:	f7ff f8e9 	bl	80067a8 <_malloc_r>
 80075d6:	b948      	cbnz	r0, 80075ec <__smakebuf_r+0x44>
 80075d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075dc:	059a      	lsls	r2, r3, #22
 80075de:	d4ef      	bmi.n	80075c0 <__smakebuf_r+0x18>
 80075e0:	f023 0303 	bic.w	r3, r3, #3
 80075e4:	f043 0302 	orr.w	r3, r3, #2
 80075e8:	81a3      	strh	r3, [r4, #12]
 80075ea:	e7e3      	b.n	80075b4 <__smakebuf_r+0xc>
 80075ec:	89a3      	ldrh	r3, [r4, #12]
 80075ee:	6020      	str	r0, [r4, #0]
 80075f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f4:	81a3      	strh	r3, [r4, #12]
 80075f6:	9b00      	ldr	r3, [sp, #0]
 80075f8:	6163      	str	r3, [r4, #20]
 80075fa:	9b01      	ldr	r3, [sp, #4]
 80075fc:	6120      	str	r0, [r4, #16]
 80075fe:	b15b      	cbz	r3, 8007618 <__smakebuf_r+0x70>
 8007600:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007604:	4630      	mov	r0, r6
 8007606:	f000 f81d 	bl	8007644 <_isatty_r>
 800760a:	b128      	cbz	r0, 8007618 <__smakebuf_r+0x70>
 800760c:	89a3      	ldrh	r3, [r4, #12]
 800760e:	f023 0303 	bic.w	r3, r3, #3
 8007612:	f043 0301 	orr.w	r3, r3, #1
 8007616:	81a3      	strh	r3, [r4, #12]
 8007618:	89a3      	ldrh	r3, [r4, #12]
 800761a:	431d      	orrs	r5, r3
 800761c:	81a5      	strh	r5, [r4, #12]
 800761e:	e7cf      	b.n	80075c0 <__smakebuf_r+0x18>

08007620 <_fstat_r>:
 8007620:	b538      	push	{r3, r4, r5, lr}
 8007622:	4d07      	ldr	r5, [pc, #28]	; (8007640 <_fstat_r+0x20>)
 8007624:	2300      	movs	r3, #0
 8007626:	4604      	mov	r4, r0
 8007628:	4608      	mov	r0, r1
 800762a:	4611      	mov	r1, r2
 800762c:	602b      	str	r3, [r5, #0]
 800762e:	f7f9 fc92 	bl	8000f56 <_fstat>
 8007632:	1c43      	adds	r3, r0, #1
 8007634:	d102      	bne.n	800763c <_fstat_r+0x1c>
 8007636:	682b      	ldr	r3, [r5, #0]
 8007638:	b103      	cbz	r3, 800763c <_fstat_r+0x1c>
 800763a:	6023      	str	r3, [r4, #0]
 800763c:	bd38      	pop	{r3, r4, r5, pc}
 800763e:	bf00      	nop
 8007640:	20000a40 	.word	0x20000a40

08007644 <_isatty_r>:
 8007644:	b538      	push	{r3, r4, r5, lr}
 8007646:	4d06      	ldr	r5, [pc, #24]	; (8007660 <_isatty_r+0x1c>)
 8007648:	2300      	movs	r3, #0
 800764a:	4604      	mov	r4, r0
 800764c:	4608      	mov	r0, r1
 800764e:	602b      	str	r3, [r5, #0]
 8007650:	f7f9 fc91 	bl	8000f76 <_isatty>
 8007654:	1c43      	adds	r3, r0, #1
 8007656:	d102      	bne.n	800765e <_isatty_r+0x1a>
 8007658:	682b      	ldr	r3, [r5, #0]
 800765a:	b103      	cbz	r3, 800765e <_isatty_r+0x1a>
 800765c:	6023      	str	r3, [r4, #0]
 800765e:	bd38      	pop	{r3, r4, r5, pc}
 8007660:	20000a40 	.word	0x20000a40

08007664 <_init>:
 8007664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007666:	bf00      	nop
 8007668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800766a:	bc08      	pop	{r3}
 800766c:	469e      	mov	lr, r3
 800766e:	4770      	bx	lr

08007670 <_fini>:
 8007670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007672:	bf00      	nop
 8007674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007676:	bc08      	pop	{r3}
 8007678:	469e      	mov	lr, r3
 800767a:	4770      	bx	lr
